
HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000058ec  0800af10  0800af10  0001af10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080107fc  080107fc  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  080107fc  080107fc  000207fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010804  08010804  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010804  08010804  00020804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010808  08010808  00020808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801080c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  20000094  080108a0  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a98  080108a0  00030a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a63f  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002edb  00000000  00000000  0004a703  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001698  00000000  00000000  0004d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001530  00000000  00000000  0004ec78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023197  00000000  00000000  000501a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014988  00000000  00000000  0007333f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0f80  00000000  00000000  00087cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158c47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066dc  00000000  00000000  00158cc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aef8 	.word	0x0800aef8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800aef8 	.word	0x0800aef8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
 *  	generated by STM32CubeIDE if you choose Nucleo Standard EVK as the hw platform
 */
#ifdef USE_FULL_ASSERT
/* @note Override __io_putchar() in syscalls.c */
int __io_putchar(int ch)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <__io_putchar+0x20>)
 8000582:	f007 f8d7 	bl	8007734 <HAL_UART_Transmit>
	return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200003c8 	.word	0x200003c8

08000594 <rpc_buffer_empty>:
 * 			This function returns the number of characters in the communication buffer
 * @return 	`true` if the buffer is empty
 * 			`false` if the buffer is not empty, message removal from the receiving buffer is required
 */
static bool rpc_buffer_empty(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
	bool empty = true;
 800059a:	2301      	movs	r3, #1
 800059c:	71fb      	strb	r3, [r7, #7]

	if(rpc_rx_buf.ctr > 0)
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <rpc_buffer_empty+0x24>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <rpc_buffer_empty+0x16>
		empty = false;
 80005a6:	2300      	movs	r3, #0
 80005a8:	71fb      	strb	r3, [r7, #7]

	return empty;
 80005aa:	79fb      	ldrb	r3, [r7, #7]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	200001c8 	.word	0x200001c8

080005bc <rpc_get_command>:
 * @return	If FreeRTOS is used, this is the status code that indicates the
 * 			execution status of the function with the same return code of osSemaphoreAcquire()
 * 			If no FreeRTOS is used, the return value is always 0
 */
static int8_t rpc_get_command(uint8_t *buf, uint16_t *length, uint32_t timeout)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	int8_t err = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	757b      	strb	r3, [r7, #21]

	*length = 0;
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]

	if(!rpc_buffer_empty()){
 80005d2:	f7ff ffdf 	bl	8000594 <rpc_buffer_empty>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f083 0301 	eor.w	r3, r3, #1
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d01f      	beq.n	8000622 <rpc_get_command+0x66>
		HAL_UART_DMAPause(&huart2);
 80005e2:	4813      	ldr	r0, [pc, #76]	; (8000630 <rpc_get_command+0x74>)
 80005e4:	f007 f9be 	bl	8007964 <HAL_UART_DMAPause>
		*length = rpc_rx_buf.ctr;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <rpc_get_command+0x78>)
 80005ea:	881a      	ldrh	r2, [r3, #0]
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	801a      	strh	r2, [r3, #0]

		for(uint16_t i=0; i<rpc_rx_buf.ctr; i++){
 80005f0:	2300      	movs	r3, #0
 80005f2:	82fb      	strh	r3, [r7, #22]
 80005f4:	e00a      	b.n	800060c <rpc_get_command+0x50>
			*buf++ = rpc_rx_buf.buf[i];
 80005f6:	8afa      	ldrh	r2, [r7, #22]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	1c59      	adds	r1, r3, #1
 80005fc:	60f9      	str	r1, [r7, #12]
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <rpc_get_command+0x78>)
 8000600:	440a      	add	r2, r1
 8000602:	7892      	ldrb	r2, [r2, #2]
 8000604:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0; i<rpc_rx_buf.ctr; i++){
 8000606:	8afb      	ldrh	r3, [r7, #22]
 8000608:	3301      	adds	r3, #1
 800060a:	82fb      	strh	r3, [r7, #22]
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <rpc_get_command+0x78>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	8afa      	ldrh	r2, [r7, #22]
 8000612:	429a      	cmp	r2, r3
 8000614:	d3ef      	bcc.n	80005f6 <rpc_get_command+0x3a>
		}
		rpc_rx_buf.ctr = 0; //reset the counter
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <rpc_get_command+0x78>)
 8000618:	2200      	movs	r2, #0
 800061a:	801a      	strh	r2, [r3, #0]

		HAL_UART_DMAResume(&huart2);
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <rpc_get_command+0x74>)
 800061e:	f007 f9f5 	bl	8007a0c <HAL_UART_DMAResume>
	}

	return err;
 8000622:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200003c8 	.word	0x200003c8
 8000634:	200001c8 	.word	0x200001c8

08000638 <tone_pwm_set>:
 *		This function sets PWM frequency for buzzer
 *	@param	freq in Hz (max 10kHz)
 *	@note	hardware dependent, assumed a sysclk frequency of 32MHz
 */
void tone_pwm_set(uint16_t freq)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b092      	sub	sp, #72	; 0x48
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
	if (freq>10000) freq=10000;
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	f242 7210 	movw	r2, #10000	; 0x2710
 8000648:	4293      	cmp	r3, r2
 800064a:	d902      	bls.n	8000652 <tone_pwm_set+0x1a>
 800064c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000650:	80fb      	strh	r3, [r7, #6]

	uint16_t period = (100000/freq) - 1;
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	4a3e      	ldr	r2, [pc, #248]	; (8000750 <tone_pwm_set+0x118>)
 8000656:	fb92 f3f3 	sdiv	r3, r2, r3
 800065a:	b29b      	uxth	r3, r3
 800065c:	3b01      	subs	r3, #1
 800065e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000662:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	615a      	str	r2, [r3, #20]
 800068e:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 8000690:	4b30      	ldr	r3, [pc, #192]	; (8000754 <tone_pwm_set+0x11c>)
 8000692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000696:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 320-1;
 8000698:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <tone_pwm_set+0x11c>)
 800069a:	f240 123f 	movw	r2, #319	; 0x13f
 800069e:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <tone_pwm_set+0x11c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = period;
 80006a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80006aa:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <tone_pwm_set+0x11c>)
 80006ac:	60d3      	str	r3, [r2, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <tone_pwm_set+0x11c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006b4:	4b27      	ldr	r3, [pc, #156]	; (8000754 <tone_pwm_set+0x11c>)
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ba:	4826      	ldr	r0, [pc, #152]	; (8000754 <tone_pwm_set+0x11c>)
 80006bc:	f005 fa76 	bl	8005bac <HAL_TIM_Base_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <tone_pwm_set+0x92>
	  {
	    Error_Handler();
 80006c6:	f000 fdc7 	bl	8001258 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006d4:	4619      	mov	r1, r3
 80006d6:	481f      	ldr	r0, [pc, #124]	; (8000754 <tone_pwm_set+0x11c>)
 80006d8:	f005 ffb6 	bl	8006648 <HAL_TIM_ConfigClockSource>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <tone_pwm_set+0xae>
	  {
	    Error_Handler();
 80006e2:	f000 fdb9 	bl	8001258 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006e6:	481b      	ldr	r0, [pc, #108]	; (8000754 <tone_pwm_set+0x11c>)
 80006e8:	f005 fb20 	bl	8005d2c <HAL_TIM_PWM_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <tone_pwm_set+0xbe>
	  {
	    Error_Handler();
 80006f2:	f000 fdb1 	bl	8001258 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	633b      	str	r3, [r7, #48]	; 0x30
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000702:	4619      	mov	r1, r3
 8000704:	4813      	ldr	r0, [pc, #76]	; (8000754 <tone_pwm_set+0x11c>)
 8000706:	f006 fe7d 	bl	8007404 <HAL_TIMEx_MasterConfigSynchronization>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <tone_pwm_set+0xdc>
	  {
	    Error_Handler();
 8000710:	f000 fda2 	bl	8001258 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000714:	2370      	movs	r3, #112	; 0x70
 8000716:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = period/2;
 8000718:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800071c:	085b      	lsrs	r3, r3, #1
 800071e:	b29b      	uxth	r3, r3
 8000720:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2204      	movs	r2, #4
 8000730:	4619      	mov	r1, r3
 8000732:	4808      	ldr	r0, [pc, #32]	; (8000754 <tone_pwm_set+0x11c>)
 8000734:	f005 fdae 	bl	8006294 <HAL_TIM_PWM_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <tone_pwm_set+0x10a>
	  {
	    Error_Handler();
 800073e:	f000 fd8b 	bl	8001258 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM2_Init 2 */

	  /* USER CODE END TIM2_Init 2 */
	  HAL_TIM_MspPostInit(&htim2);
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <tone_pwm_set+0x11c>)
 8000744:	f000 feae 	bl	80014a4 <HAL_TIM_MspPostInit>
}
 8000748:	bf00      	nop
 800074a:	3748      	adds	r7, #72	; 0x48
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	000186a0 	.word	0x000186a0
 8000754:	2000037c 	.word	0x2000037c

08000758 <tone_pwm_on>:

void tone_pwm_on(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800075c:	2104      	movs	r1, #4
 800075e:	4802      	ldr	r0, [pc, #8]	; (8000768 <tone_pwm_on+0x10>)
 8000760:	f005 fbae 	bl	8005ec0 <HAL_TIM_PWM_Start>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000037c 	.word	0x2000037c

0800076c <tone_pwm_off>:

void tone_pwm_off(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000770:	2104      	movs	r1, #4
 8000772:	4802      	ldr	r0, [pc, #8]	; (800077c <tone_pwm_off+0x10>)
 8000774:	f005 fcc4 	bl	8006100 <HAL_TIM_PWM_Stop>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000037c 	.word	0x2000037c

08000780 <rpc_idle_callback>:
 *		in USART2 IRQ handler (stm32l4xx_it.c). Characters are inserted into the ring buffer
 *		if it has enough room for incoming data from the DMA channel; otherwise, data will be lost.
 *		This function is declared in main.h and called in stm32l4xx.c::USART2_IRQHandler()
 */
void rpc_idle_callback(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart2);
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <rpc_idle_callback+0x2c>)
 8000786:	f007 f987 	bl	8007a98 <HAL_UART_DMAStop>
	rpc_rx_buf.ctr = (RPC_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx));
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <rpc_idle_callback+0x30>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	b29b      	uxth	r3, r3
 8000792:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <rpc_idle_callback+0x34>)
 800079a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, rpc_rx_buf.buf, RPC_BUF_SIZE);
 800079c:	22ff      	movs	r2, #255	; 0xff
 800079e:	4906      	ldr	r1, [pc, #24]	; (80007b8 <rpc_idle_callback+0x38>)
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <rpc_idle_callback+0x2c>)
 80007a2:	f007 f85b 	bl	800785c <HAL_UART_Receive_DMA>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200003c8 	.word	0x200003c8
 80007b0:	20000180 	.word	0x20000180
 80007b4:	200001c8 	.word	0x200001c8
 80007b8:	200001ca 	.word	0x200001ca

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b0cb      	sub	sp, #300	; 0x12c
 80007c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f001 f898 	bl	80018f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 faed 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 fcc1 	bl	8001150 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ce:	f000 fc99 	bl	8001104 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 fc4f 	bl	8001074 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007d6:	f000 fb59 	bl	8000e8c <MX_I2C1_Init>
  MX_SPI1_Init();
 80007da:	f000 fb97 	bl	8000f0c <MX_SPI1_Init>
  MX_TIM2_Init();
 80007de:	f000 fbd3 	bl	8000f88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd7317_init();
 80007e2:	f008 f91b 	bl	8008a1c <ssd7317_init>
  ssd7317_put_string(6,5,&Tahoma_12h,"10:15",0);
 80007e6:	4638      	mov	r0, r7
 80007e8:	2300      	movs	r3, #0
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	4baf      	ldr	r3, [pc, #700]	; (8000aac <main+0x2f0>)
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	4baf      	ldr	r3, [pc, #700]	; (8000ab0 <main+0x2f4>)
 80007f2:	2205      	movs	r2, #5
 80007f4:	2106      	movs	r1, #6
 80007f6:	f009 fae9 	bl	8009dcc <ssd7317_put_string>
  ssd7317_put_image(40,0,&bluetooth,0);
 80007fa:	4638      	mov	r0, r7
 80007fc:	2300      	movs	r3, #0
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	4bac      	ldr	r3, [pc, #688]	; (8000ab4 <main+0x2f8>)
 8000802:	2200      	movs	r2, #0
 8000804:	2128      	movs	r1, #40	; 0x28
 8000806:	f009 f901 	bl	8009a0c <ssd7317_put_image>
  ssd7317_put_image(70,0,&batterystatusfull,0);
 800080a:	4638      	mov	r0, r7
 800080c:	2300      	movs	r3, #0
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	4ba9      	ldr	r3, [pc, #676]	; (8000ab8 <main+0x2fc>)
 8000812:	2200      	movs	r2, #0
 8000814:	2146      	movs	r1, #70	; 0x46
 8000816:	f009 f8f9 	bl	8009a0c <ssd7317_put_image>

  ssd7317_get_stringsize(&Tahoma_12h, icons[icon_index].name, &w, &h);
 800081a:	4ba8      	ldr	r3, [pc, #672]	; (8000abc <main+0x300>)
 800081c:	f993 3000 	ldrsb.w	r3, [r3]
 8000820:	461a      	mov	r2, r3
 8000822:	4ba7      	ldr	r3, [pc, #668]	; (8000ac0 <main+0x304>)
 8000824:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 8000828:	4ba6      	ldr	r3, [pc, #664]	; (8000ac4 <main+0x308>)
 800082a:	4aa7      	ldr	r2, [pc, #668]	; (8000ac8 <main+0x30c>)
 800082c:	48a0      	ldr	r0, [pc, #640]	; (8000ab0 <main+0x2f4>)
 800082e:	f009 fb39 	bl	8009ea4 <ssd7317_get_stringsize>
  ssd7317_put_string((OLED_HOR_RES-w)/2, (60-h), &Tahoma_12h, icons[icon_index].name, 0);
 8000832:	4ba5      	ldr	r3, [pc, #660]	; (8000ac8 <main+0x30c>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 800083a:	0fda      	lsrs	r2, r3, #31
 800083c:	4413      	add	r3, r2
 800083e:	105b      	asrs	r3, r3, #1
 8000840:	b299      	uxth	r1, r3
 8000842:	4ba0      	ldr	r3, [pc, #640]	; (8000ac4 <main+0x308>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800084a:	b29c      	uxth	r4, r3
 800084c:	4b9b      	ldr	r3, [pc, #620]	; (8000abc <main+0x300>)
 800084e:	f993 3000 	ldrsb.w	r3, [r3]
 8000852:	461a      	mov	r2, r3
 8000854:	4b9a      	ldr	r3, [pc, #616]	; (8000ac0 <main+0x304>)
 8000856:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800085a:	4638      	mov	r0, r7
 800085c:	2200      	movs	r2, #0
 800085e:	9201      	str	r2, [sp, #4]
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	4b93      	ldr	r3, [pc, #588]	; (8000ab0 <main+0x2f4>)
 8000864:	4622      	mov	r2, r4
 8000866:	f009 fab1 	bl	8009dcc <ssd7317_put_string>
  ssd7317_put_image(16,64, icons[icon_index].image, 0);
 800086a:	4b94      	ldr	r3, [pc, #592]	; (8000abc <main+0x300>)
 800086c:	f993 3000 	ldrsb.w	r3, [r3]
 8000870:	4a93      	ldr	r2, [pc, #588]	; (8000ac0 <main+0x304>)
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	4413      	add	r3, r2
 8000876:	685a      	ldr	r2, [r3, #4]
 8000878:	4638      	mov	r0, r7
 800087a:	2300      	movs	r3, #0
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	4613      	mov	r3, r2
 8000880:	2240      	movs	r2, #64	; 0x40
 8000882:	2110      	movs	r1, #16
 8000884:	f009 f8c2 	bl	8009a0c <ssd7317_put_image>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  finger_t finger = ssd7317_get_gesture();
 8000888:	f009 f800 	bl	800988c <ssd7317_get_gesture>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	f887 211c 	strb.w	r2, [r7, #284]	; 0x11c
 8000894:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000898:	f887 211d 	strb.w	r2, [r7, #285]	; 0x11d
 800089c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80008a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

	  switch (finger.gesture){
 80008a4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008a8:	2b07      	cmp	r3, #7
 80008aa:	f200 8200 	bhi.w	8000cae <main+0x4f2>
 80008ae:	a201      	add	r2, pc, #4	; (adr r2, 80008b4 <main+0xf8>)
 80008b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b4:	080008fb 	.word	0x080008fb
 80008b8:	08000caf 	.word	0x08000caf
 80008bc:	08000caf 	.word	0x08000caf
 80008c0:	08000caf 	.word	0x08000caf
 80008c4:	08000caf 	.word	0x08000caf
 80008c8:	080008d5 	.word	0x080008d5
 80008cc:	08000a1f 	.word	0x08000a1f
 80008d0:	08000a1f 	.word	0x08000a1f
	  case LONG_TAP_ANYKEY:
		  ssd7317_display_clear(BLACK);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f008 f8f1 	bl	8008abc <ssd7317_display_clear>
		  tone_pwm_set(500);
 80008da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008de:	f7ff feab 	bl	8000638 <tone_pwm_set>
		  tone_pwm_on();
 80008e2:	f7ff ff39 	bl	8000758 <tone_pwm_on>
		  HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f001 f879 	bl	80019e0 <HAL_Delay>
		  tone_pwm_off();
 80008ee:	f7ff ff3d 	bl	800076c <tone_pwm_off>
		  sleep=true;
 80008f2:	4b76      	ldr	r3, [pc, #472]	; (8000acc <main+0x310>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
		  break;
 80008f8:	e1d9      	b.n	8000cae <main+0x4f2>
	  case SINGLE_TAP_ANYKEY:
		  if(sleep==true){
 80008fa:	4b74      	ldr	r3, [pc, #464]	; (8000acc <main+0x310>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d053      	beq.n	80009aa <main+0x1ee>
			  sleep=false;
 8000902:	4b72      	ldr	r3, [pc, #456]	; (8000acc <main+0x310>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
			  ssd7317_put_string(6,5,&Tahoma_12h,"10:15",0);
 8000908:	4638      	mov	r0, r7
 800090a:	2300      	movs	r3, #0
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	4b67      	ldr	r3, [pc, #412]	; (8000aac <main+0x2f0>)
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4b67      	ldr	r3, [pc, #412]	; (8000ab0 <main+0x2f4>)
 8000914:	2205      	movs	r2, #5
 8000916:	2106      	movs	r1, #6
 8000918:	f009 fa58 	bl	8009dcc <ssd7317_put_string>
			  ssd7317_put_image(40,0,&bluetooth,0);
 800091c:	4638      	mov	r0, r7
 800091e:	2300      	movs	r3, #0
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <main+0x2f8>)
 8000924:	2200      	movs	r2, #0
 8000926:	2128      	movs	r1, #40	; 0x28
 8000928:	f009 f870 	bl	8009a0c <ssd7317_put_image>
			  ssd7317_put_image(70,0,&batterystatusfull,0);
 800092c:	4638      	mov	r0, r7
 800092e:	2300      	movs	r3, #0
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	4b61      	ldr	r3, [pc, #388]	; (8000ab8 <main+0x2fc>)
 8000934:	2200      	movs	r2, #0
 8000936:	2146      	movs	r1, #70	; 0x46
 8000938:	f009 f868 	bl	8009a0c <ssd7317_put_image>
			  ssd7317_get_stringsize(&Tahoma_12h, icons[icon_index].name, &w, &h);
 800093c:	4b5f      	ldr	r3, [pc, #380]	; (8000abc <main+0x300>)
 800093e:	f993 3000 	ldrsb.w	r3, [r3]
 8000942:	461a      	mov	r2, r3
 8000944:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <main+0x304>)
 8000946:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 800094a:	4b5e      	ldr	r3, [pc, #376]	; (8000ac4 <main+0x308>)
 800094c:	4a5e      	ldr	r2, [pc, #376]	; (8000ac8 <main+0x30c>)
 800094e:	4858      	ldr	r0, [pc, #352]	; (8000ab0 <main+0x2f4>)
 8000950:	f009 faa8 	bl	8009ea4 <ssd7317_get_stringsize>
			  ssd7317_put_string((OLED_HOR_RES-w)/2, (60-h), &Tahoma_12h, icons[icon_index].name, 0);
 8000954:	4b5c      	ldr	r3, [pc, #368]	; (8000ac8 <main+0x30c>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 800095c:	0fda      	lsrs	r2, r3, #31
 800095e:	4413      	add	r3, r2
 8000960:	105b      	asrs	r3, r3, #1
 8000962:	b299      	uxth	r1, r3
 8000964:	4b57      	ldr	r3, [pc, #348]	; (8000ac4 <main+0x308>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800096c:	b29c      	uxth	r4, r3
 800096e:	4b53      	ldr	r3, [pc, #332]	; (8000abc <main+0x300>)
 8000970:	f993 3000 	ldrsb.w	r3, [r3]
 8000974:	461a      	mov	r2, r3
 8000976:	4b52      	ldr	r3, [pc, #328]	; (8000ac0 <main+0x304>)
 8000978:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800097c:	4638      	mov	r0, r7
 800097e:	2200      	movs	r2, #0
 8000980:	9201      	str	r2, [sp, #4]
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	4b4a      	ldr	r3, [pc, #296]	; (8000ab0 <main+0x2f4>)
 8000986:	4622      	mov	r2, r4
 8000988:	f009 fa20 	bl	8009dcc <ssd7317_put_string>
			  ssd7317_put_image(16,64, icons[icon_index].image, 0);
 800098c:	4b4b      	ldr	r3, [pc, #300]	; (8000abc <main+0x300>)
 800098e:	f993 3000 	ldrsb.w	r3, [r3]
 8000992:	4a4b      	ldr	r2, [pc, #300]	; (8000ac0 <main+0x304>)
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	4413      	add	r3, r2
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	4638      	mov	r0, r7
 800099c:	2300      	movs	r3, #0
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	4613      	mov	r3, r2
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	2110      	movs	r1, #16
 80009a6:	f009 f831 	bl	8009a0c <ssd7317_put_image>
		  }
		  if(pan_active){
 80009aa:	4b49      	ldr	r3, [pc, #292]	; (8000ad0 <main+0x314>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d007      	beq.n	80009c2 <main+0x206>
			  ssd7317_scroll_brake();
 80009b2:	f009 f977 	bl	8009ca4 <ssd7317_scroll_brake>
			  pan_active=false;
 80009b6:	4b46      	ldr	r3, [pc, #280]	; (8000ad0 <main+0x314>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
			  tone_pwm_off();
 80009bc:	f7ff fed6 	bl	800076c <tone_pwm_off>
			  tone_pwm_set(500);
			  HAL_Delay(50);
			  ssd7317_put_image(16,64, icons[icon_index].image, 0);
			  tone_pwm_off();
		  }
		  break;
 80009c0:	e175      	b.n	8000cae <main+0x4f2>
			  tone_pwm_set(1000);
 80009c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c6:	f7ff fe37 	bl	8000638 <tone_pwm_set>
			  tone_pwm_on();
 80009ca:	f7ff fec5 	bl	8000758 <tone_pwm_on>
			  ssd7317_put_image(16,64, icons[icon_index].image, 1);
 80009ce:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <main+0x300>)
 80009d0:	f993 3000 	ldrsb.w	r3, [r3]
 80009d4:	4a3a      	ldr	r2, [pc, #232]	; (8000ac0 <main+0x304>)
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	4638      	mov	r0, r7
 80009de:	2301      	movs	r3, #1
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	4613      	mov	r3, r2
 80009e4:	2240      	movs	r2, #64	; 0x40
 80009e6:	2110      	movs	r1, #16
 80009e8:	f009 f810 	bl	8009a0c <ssd7317_put_image>
			  tone_pwm_set(500);
 80009ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f0:	f7ff fe22 	bl	8000638 <tone_pwm_set>
			  HAL_Delay(50);
 80009f4:	2032      	movs	r0, #50	; 0x32
 80009f6:	f000 fff3 	bl	80019e0 <HAL_Delay>
			  ssd7317_put_image(16,64, icons[icon_index].image, 0);
 80009fa:	4b30      	ldr	r3, [pc, #192]	; (8000abc <main+0x300>)
 80009fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000a00:	4a2f      	ldr	r2, [pc, #188]	; (8000ac0 <main+0x304>)
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	4413      	add	r3, r2
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	4638      	mov	r0, r7
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	2240      	movs	r2, #64	; 0x40
 8000a12:	2110      	movs	r1, #16
 8000a14:	f008 fffa 	bl	8009a0c <ssd7317_put_image>
			  tone_pwm_off();
 8000a18:	f7ff fea8 	bl	800076c <tone_pwm_off>
		  break;
 8000a1c:	e147      	b.n	8000cae <main+0x4f2>
	  case SWIPE_DOWN:
	  case SWIPE_UP:
		  if(sleep==true){
 8000a1e:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <main+0x310>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d01c      	beq.n	8000a60 <main+0x2a4>
			  sleep=false;
 8000a26:	4b29      	ldr	r3, [pc, #164]	; (8000acc <main+0x310>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
			  ssd7317_put_string(6,5,&Tahoma_12h,"10:15",0);
 8000a2c:	4638      	mov	r0, r7
 8000a2e:	2300      	movs	r3, #0
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <main+0x2f0>)
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <main+0x2f4>)
 8000a38:	2205      	movs	r2, #5
 8000a3a:	2106      	movs	r1, #6
 8000a3c:	f009 f9c6 	bl	8009dcc <ssd7317_put_string>
			  ssd7317_put_image(40,0,&bluetooth,0);
 8000a40:	4638      	mov	r0, r7
 8000a42:	2300      	movs	r3, #0
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <main+0x2f8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2128      	movs	r1, #40	; 0x28
 8000a4c:	f008 ffde 	bl	8009a0c <ssd7317_put_image>
			  ssd7317_put_image(70,0,&batterystatusfull,0);
 8000a50:	4638      	mov	r0, r7
 8000a52:	2300      	movs	r3, #0
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <main+0x2fc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2146      	movs	r1, #70	; 0x46
 8000a5c:	f008 ffd6 	bl	8009a0c <ssd7317_put_image>
		  }
		  if(finger.tap_down_key == finger.tap_up_key){
 8000a60:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 8000a64:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d135      	bne.n	8000ad8 <main+0x31c>
			  rect_t full_page = {0,0,95,127};
 8000a6c:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <main+0x318>)
 8000a6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a76:	e883 0003 	stmia.w	r3, {r0, r1}
			  ssd7317_scroll_page(full_page,7,5,finger);
 8000a7a:	466b      	mov	r3, sp
 8000a7c:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8000a80:	6812      	ldr	r2, [r2, #0]
 8000a82:	4611      	mov	r1, r2
 8000a84:	8019      	strh	r1, [r3, #0]
 8000a86:	3302      	adds	r3, #2
 8000a88:	0c12      	lsrs	r2, r2, #16
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	2305      	movs	r3, #5
 8000a8e:	2207      	movs	r2, #7
 8000a90:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a94:	c903      	ldmia	r1, {r0, r1}
 8000a96:	f009 f86f 	bl	8009b78 <ssd7317_scroll_page>
			  pan_active = true;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <main+0x314>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
			  tone_pwm_set(200);
 8000aa0:	20c8      	movs	r0, #200	; 0xc8
 8000aa2:	f7ff fdc9 	bl	8000638 <tone_pwm_set>
			  tone_pwm_on();
 8000aa6:	f7ff fe57 	bl	8000758 <tone_pwm_on>
				  ssd7317_put_string((OLED_HOR_RES-w)/2, (60-h), &Tahoma_12h, icons[icon_index].name, 0);
				  ssd7317_get_stringsize(&Tahoma_12h, icons[icon_index].name, &w, &h);
				  ssd7317_scroll_image(16, 64, 0, icons[icon_index].image, finger);
			  }
		  }
		  break;
 8000aaa:	e0ff      	b.n	8000cac <main+0x4f0>
 8000aac:	0800af30 	.word	0x0800af30
 8000ab0:	0800c79c 	.word	0x0800c79c
 8000ab4:	0800b98c 	.word	0x0800b98c
 8000ab8:	0800b938 	.word	0x0800b938
 8000abc:	200000b0 	.word	0x200000b0
 8000ac0:	0800c7a4 	.word	0x0800c7a4
 8000ac4:	200000b4 	.word	0x200000b4
 8000ac8:	200000b2 	.word	0x200000b2
 8000acc:	200000b7 	.word	0x200000b7
 8000ad0:	200000b6 	.word	0x200000b6
 8000ad4:	0800af7c 	.word	0x0800af7c
			  ssd7317_get_stringsize(&Tahoma_12h, icons[icon_index].name, &w, &h);
 8000ad8:	4ba9      	ldr	r3, [pc, #676]	; (8000d80 <main+0x5c4>)
 8000ada:	f993 3000 	ldrsb.w	r3, [r3]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4ba8      	ldr	r3, [pc, #672]	; (8000d84 <main+0x5c8>)
 8000ae2:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 8000ae6:	4ba8      	ldr	r3, [pc, #672]	; (8000d88 <main+0x5cc>)
 8000ae8:	4aa8      	ldr	r2, [pc, #672]	; (8000d8c <main+0x5d0>)
 8000aea:	48a9      	ldr	r0, [pc, #676]	; (8000d90 <main+0x5d4>)
 8000aec:	f009 f9da 	bl	8009ea4 <ssd7317_get_stringsize>
			  rect_t erase = {(OLED_HOR_RES-w)/2, 60-h, (OLED_HOR_RES-w)/2 + w -1, 63};
 8000af0:	4ba6      	ldr	r3, [pc, #664]	; (8000d8c <main+0x5d0>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8000af8:	0fda      	lsrs	r2, r3, #31
 8000afa:	4413      	add	r3, r2
 8000afc:	105b      	asrs	r3, r3, #1
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
 8000b04:	4ba0      	ldr	r3, [pc, #640]	; (8000d88 <main+0x5cc>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8000b14:	4b9d      	ldr	r3, [pc, #628]	; (8000d8c <main+0x5d0>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8000b1c:	0fda      	lsrs	r2, r3, #31
 8000b1e:	4413      	add	r3, r2
 8000b20:	105b      	asrs	r3, r3, #1
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b99      	ldr	r3, [pc, #612]	; (8000d8c <main+0x5d0>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	4413      	add	r3, r2
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8000b36:	233f      	movs	r3, #63	; 0x3f
 8000b38:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			  ssd7317_fill_color(erase, BLACK);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b46:	f007 fff7 	bl	8008b38 <ssd7317_fill_color>
			  if(finger.gesture==SWIPE_DOWN){
 8000b4a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d150      	bne.n	8000bf4 <main+0x438>
				  if(++icon_index>(ICON_MAX-1)) icon_index=0;
 8000b52:	4b8b      	ldr	r3, [pc, #556]	; (8000d80 <main+0x5c4>)
 8000b54:	f993 3000 	ldrsb.w	r3, [r3]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	4b87      	ldr	r3, [pc, #540]	; (8000d80 <main+0x5c4>)
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	4b86      	ldr	r3, [pc, #536]	; (8000d80 <main+0x5c4>)
 8000b66:	f993 3000 	ldrsb.w	r3, [r3]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	dd02      	ble.n	8000b74 <main+0x3b8>
 8000b6e:	4b84      	ldr	r3, [pc, #528]	; (8000d80 <main+0x5c4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
				  ssd7317_get_stringsize(&Tahoma_12h, icons[icon_index].name, &w, &h);
 8000b74:	4b82      	ldr	r3, [pc, #520]	; (8000d80 <main+0x5c4>)
 8000b76:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b81      	ldr	r3, [pc, #516]	; (8000d84 <main+0x5c8>)
 8000b7e:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 8000b82:	4b81      	ldr	r3, [pc, #516]	; (8000d88 <main+0x5cc>)
 8000b84:	4a81      	ldr	r2, [pc, #516]	; (8000d8c <main+0x5d0>)
 8000b86:	4882      	ldr	r0, [pc, #520]	; (8000d90 <main+0x5d4>)
 8000b88:	f009 f98c 	bl	8009ea4 <ssd7317_get_stringsize>
				  ssd7317_put_string((OLED_HOR_RES-w)/2, (60-h), &Tahoma_12h, icons[icon_index].name, 0);
 8000b8c:	4b7f      	ldr	r3, [pc, #508]	; (8000d8c <main+0x5d0>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8000b94:	0fda      	lsrs	r2, r3, #31
 8000b96:	4413      	add	r3, r2
 8000b98:	105b      	asrs	r3, r3, #1
 8000b9a:	b299      	uxth	r1, r3
 8000b9c:	4b7a      	ldr	r3, [pc, #488]	; (8000d88 <main+0x5cc>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8000ba4:	b29c      	uxth	r4, r3
 8000ba6:	4b76      	ldr	r3, [pc, #472]	; (8000d80 <main+0x5c4>)
 8000ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b75      	ldr	r3, [pc, #468]	; (8000d84 <main+0x5c8>)
 8000bb0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000bb4:	4638      	mov	r0, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	9201      	str	r2, [sp, #4]
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	4b74      	ldr	r3, [pc, #464]	; (8000d90 <main+0x5d4>)
 8000bbe:	4622      	mov	r2, r4
 8000bc0:	f009 f904 	bl	8009dcc <ssd7317_put_string>
				  ssd7317_scroll_image(16, 64, 64, icons[icon_index].image, finger);
 8000bc4:	4b6e      	ldr	r3, [pc, #440]	; (8000d80 <main+0x5c4>)
 8000bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8000bca:	4a6e      	ldr	r2, [pc, #440]	; (8000d84 <main+0x5c8>)
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4413      	add	r3, r2
 8000bd0:	6859      	ldr	r1, [r3, #4]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	ab01      	add	r3, sp, #4
 8000bd6:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	4614      	mov	r4, r2
 8000bde:	801c      	strh	r4, [r3, #0]
 8000be0:	3302      	adds	r3, #2
 8000be2:	0c12      	lsrs	r2, r2, #16
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	9100      	str	r1, [sp, #0]
 8000be8:	2340      	movs	r3, #64	; 0x40
 8000bea:	2240      	movs	r2, #64	; 0x40
 8000bec:	2110      	movs	r1, #16
 8000bee:	f008 ff43 	bl	8009a78 <ssd7317_scroll_image>
		  break;
 8000bf2:	e05b      	b.n	8000cac <main+0x4f0>
				  if(--icon_index<0) icon_index=(ICON_MAX-1);
 8000bf4:	4b62      	ldr	r3, [pc, #392]	; (8000d80 <main+0x5c4>)
 8000bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	b25a      	sxtb	r2, r3
 8000c02:	4b5f      	ldr	r3, [pc, #380]	; (8000d80 <main+0x5c4>)
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	4b5e      	ldr	r3, [pc, #376]	; (8000d80 <main+0x5c4>)
 8000c08:	f993 3000 	ldrsb.w	r3, [r3]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	da02      	bge.n	8000c16 <main+0x45a>
 8000c10:	4b5b      	ldr	r3, [pc, #364]	; (8000d80 <main+0x5c4>)
 8000c12:	2202      	movs	r2, #2
 8000c14:	701a      	strb	r2, [r3, #0]
				  ssd7317_get_stringsize(&Tahoma_12h, icons[icon_index].name, &w, &h);
 8000c16:	4b5a      	ldr	r3, [pc, #360]	; (8000d80 <main+0x5c4>)
 8000c18:	f993 3000 	ldrsb.w	r3, [r3]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b59      	ldr	r3, [pc, #356]	; (8000d84 <main+0x5c8>)
 8000c20:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 8000c24:	4b58      	ldr	r3, [pc, #352]	; (8000d88 <main+0x5cc>)
 8000c26:	4a59      	ldr	r2, [pc, #356]	; (8000d8c <main+0x5d0>)
 8000c28:	4859      	ldr	r0, [pc, #356]	; (8000d90 <main+0x5d4>)
 8000c2a:	f009 f93b 	bl	8009ea4 <ssd7317_get_stringsize>
				  ssd7317_put_string((OLED_HOR_RES-w)/2, (60-h), &Tahoma_12h, icons[icon_index].name, 0);
 8000c2e:	4b57      	ldr	r3, [pc, #348]	; (8000d8c <main+0x5d0>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8000c36:	0fda      	lsrs	r2, r3, #31
 8000c38:	4413      	add	r3, r2
 8000c3a:	105b      	asrs	r3, r3, #1
 8000c3c:	b299      	uxth	r1, r3
 8000c3e:	4b52      	ldr	r3, [pc, #328]	; (8000d88 <main+0x5cc>)
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8000c46:	b29c      	uxth	r4, r3
 8000c48:	4b4d      	ldr	r3, [pc, #308]	; (8000d80 <main+0x5c4>)
 8000c4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b4c      	ldr	r3, [pc, #304]	; (8000d84 <main+0x5c8>)
 8000c52:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000c56:	4638      	mov	r0, r7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	9201      	str	r2, [sp, #4]
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	4b4c      	ldr	r3, [pc, #304]	; (8000d90 <main+0x5d4>)
 8000c60:	4622      	mov	r2, r4
 8000c62:	f009 f8b3 	bl	8009dcc <ssd7317_put_string>
				  ssd7317_get_stringsize(&Tahoma_12h, icons[icon_index].name, &w, &h);
 8000c66:	4b46      	ldr	r3, [pc, #280]	; (8000d80 <main+0x5c4>)
 8000c68:	f993 3000 	ldrsb.w	r3, [r3]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <main+0x5c8>)
 8000c70:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 8000c74:	4b44      	ldr	r3, [pc, #272]	; (8000d88 <main+0x5cc>)
 8000c76:	4a45      	ldr	r2, [pc, #276]	; (8000d8c <main+0x5d0>)
 8000c78:	4845      	ldr	r0, [pc, #276]	; (8000d90 <main+0x5d4>)
 8000c7a:	f009 f913 	bl	8009ea4 <ssd7317_get_stringsize>
				  ssd7317_scroll_image(16, 64, 0, icons[icon_index].image, finger);
 8000c7e:	4b40      	ldr	r3, [pc, #256]	; (8000d80 <main+0x5c4>)
 8000c80:	f993 3000 	ldrsb.w	r3, [r3]
 8000c84:	4a3f      	ldr	r2, [pc, #252]	; (8000d84 <main+0x5c8>)
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4413      	add	r3, r2
 8000c8a:	6859      	ldr	r1, [r3, #4]
 8000c8c:	4638      	mov	r0, r7
 8000c8e:	ab01      	add	r3, sp, #4
 8000c90:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8000c94:	6812      	ldr	r2, [r2, #0]
 8000c96:	4614      	mov	r4, r2
 8000c98:	801c      	strh	r4, [r3, #0]
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	0c12      	lsrs	r2, r2, #16
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	9100      	str	r1, [sp, #0]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2240      	movs	r2, #64	; 0x40
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	f008 fee6 	bl	8009a78 <ssd7317_scroll_image>
		  break;
 8000cac:	bf00      	nop
	   * Remote Procedure Call section below
	   */

		  uint16_t length;
		  uint8_t msg[RPC_BUF_SIZE];
		  rpc_get_command(msg, &length, 0);
 8000cae:	f507 718d 	add.w	r1, r7, #282	; 0x11a
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fc7f 	bl	80005bc <rpc_get_command>

		  if(length){
 8000cbe:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f43f ade0 	beq.w	8000888 <main+0xcc>
		#ifdef USE_FULL_ASSERT
			  printf("Command received:\r\n");
 8000cc8:	4832      	ldr	r0, [pc, #200]	; (8000d94 <main+0x5d8>)
 8000cca:	f009 fa0b 	bl	800a0e4 <puts>
			  for(uint8_t i=0; i<length; i++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8000cd4:	e00c      	b.n	8000cf0 <main+0x534>
			  {
				  printf("%c", msg[i]);
 8000cd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000cda:	f107 0208 	add.w	r2, r7, #8
 8000cde:	5cd3      	ldrb	r3, [r2, r3]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f009 f98f 	bl	800a004 <putchar>
			  for(uint8_t i=0; i<length; i++)
 8000ce6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000cea:	3301      	adds	r3, #1
 8000cec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8000cf0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3eb      	bcc.n	8000cd6 <main+0x51a>
			  }
			  printf("\r\n");
 8000cfe:	4826      	ldr	r0, [pc, #152]	; (8000d98 <main+0x5dc>)
 8000d00:	f009 f9f0 	bl	800a0e4 <puts>
		#endif
			  if(length>2){
 8000d04:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d92f      	bls.n	8000d6c <main+0x5b0>
				if(msg[0]==0x7E && (msg[1]=='c')) //0x7E 0x63
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b7e      	cmp	r3, #126	; 0x7e
 8000d14:	d112      	bne.n	8000d3c <main+0x580>
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	2b63      	cmp	r3, #99	; 0x63
 8000d1e:	d10d      	bne.n	8000d3c <main+0x580>
				{
					printf("SPI command sending.\r\n");
 8000d20:	481e      	ldr	r0, [pc, #120]	; (8000d9c <main+0x5e0>)
 8000d22:	f009 f9df 	bl	800a0e4 <puts>
					spi_write_command((const uint8_t *)&msg[2], length-2);
 8000d26:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	3302      	adds	r3, #2
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f008 f852 	bl	8008de0 <spi_write_command>
				}
				if(msg[0]==0x7E && (msg[1]=='d')) //0x7E 0x64
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b7e      	cmp	r3, #126	; 0x7e
 8000d44:	d112      	bne.n	8000d6c <main+0x5b0>
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	785b      	ldrb	r3, [r3, #1]
 8000d4c:	2b64      	cmp	r3, #100	; 0x64
 8000d4e:	d10d      	bne.n	8000d6c <main+0x5b0>
				{
					printf("SPI data sending.\r\n");
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <main+0x5e4>)
 8000d52:	f009 f9c7 	bl	800a0e4 <puts>
					spi_write_data((const uint8_t *)&msg[2], length-2);
 8000d56:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	3302      	adds	r3, #2
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f008 f85e 	bl	8008e28 <spi_write_data>
				}
			  }
			  memset(msg, 0x00, length);
 8000d6c:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000d70:	461a      	mov	r2, r3
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f009 f923 	bl	8009fc4 <memset>
  {
 8000d7e:	e583      	b.n	8000888 <main+0xcc>
 8000d80:	200000b0 	.word	0x200000b0
 8000d84:	0800c7a4 	.word	0x0800c7a4
 8000d88:	200000b4 	.word	0x200000b4
 8000d8c:	200000b2 	.word	0x200000b2
 8000d90:	0800c79c 	.word	0x0800c79c
 8000d94:	0800af38 	.word	0x0800af38
 8000d98:	0800af4c 	.word	0x0800af4c
 8000d9c:	0800af50 	.word	0x0800af50
 8000da0:	0800af68 	.word	0x0800af68

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ac      	sub	sp, #176	; 0xb0
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dae:	2244      	movs	r2, #68	; 0x44
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f009 f906 	bl	8009fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2254      	movs	r2, #84	; 0x54
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f009 f8f8 	bl	8009fc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000de4:	2360      	movs	r3, #96	; 0x60
 8000de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e02:	2307      	movs	r3, #7
 8000e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fd0f 	bl	800383c <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e24:	f000 fa18 	bl	8001258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e28:	230f      	movs	r3, #15
 8000e2a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e40:	2101      	movs	r1, #1
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 fa70 	bl	8004328 <HAL_RCC_ClockConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e4e:	f000 fa03 	bl	8001258 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000e52:	2342      	movs	r3, #66	; 0x42
 8000e54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 fd05 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e6c:	f000 f9f4 	bl	8001258 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e74:	f002 fc80 	bl	8003778 <HAL_PWREx_ControlVoltageScaling>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000e7e:	f000 f9eb 	bl	8001258 <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	37b0      	adds	r7, #176	; 0xb0
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <MX_I2C1_Init+0x78>)
 8000e94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <MX_I2C1_Init+0x7c>)
 8000e9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ec8:	f001 fcea 	bl	80028a0 <HAL_I2C_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ed2:	f000 f9c1 	bl	8001258 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eda:	f002 fb71 	bl	80035c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ee4:	f000 f9b8 	bl	8001258 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eec:	f002 fbd0 	bl	8003690 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 f9af 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200002cc 	.word	0x200002cc
 8000f04:	40005400 	.word	0x40005400
 8000f08:	00707cbb 	.word	0x00707cbb

08000f0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <MX_SPI1_Init+0x78>)
 8000f14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f24:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f3c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f68:	2208      	movs	r2, #8
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <MX_SPI1_Init+0x74>)
 8000f6e:	f004 f95d 	bl	800522c <HAL_SPI_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000f78:	f000 f96e 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000318 	.word	0x20000318
 8000f84:	40013000 	.word	0x40013000

08000f88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08e      	sub	sp, #56	; 0x38
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
 8000fb6:	615a      	str	r2, [r3, #20]
 8000fb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fba:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <MX_TIM2_Init+0xe8>)
 8000fbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <MX_TIM2_Init+0xe8>)
 8000fc4:	f240 123f 	movw	r2, #319	; 0x13f
 8000fc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <MX_TIM2_Init+0xe8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <MX_TIM2_Init+0xe8>)
 8000fd2:	2263      	movs	r2, #99	; 0x63
 8000fd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <MX_TIM2_Init+0xe8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <MX_TIM2_Init+0xe8>)
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fe2:	4823      	ldr	r0, [pc, #140]	; (8001070 <MX_TIM2_Init+0xe8>)
 8000fe4:	f004 fde2 	bl	8005bac <HAL_TIM_Base_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000fee:	f000 f933 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ff8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	481c      	ldr	r0, [pc, #112]	; (8001070 <MX_TIM2_Init+0xe8>)
 8001000:	f005 fb22 	bl	8006648 <HAL_TIM_ConfigClockSource>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800100a:	f000 f925 	bl	8001258 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800100e:	4818      	ldr	r0, [pc, #96]	; (8001070 <MX_TIM2_Init+0xe8>)
 8001010:	f004 fe8c 	bl	8005d2c <HAL_TIM_PWM_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800101a:	f000 f91d 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4810      	ldr	r0, [pc, #64]	; (8001070 <MX_TIM2_Init+0xe8>)
 800102e:	f006 f9e9 	bl	8007404 <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001038:	f000 f90e 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800103c:	2370      	movs	r3, #112	; 0x70
 800103e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	2204      	movs	r2, #4
 8001050:	4619      	mov	r1, r3
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <MX_TIM2_Init+0xe8>)
 8001054:	f005 f91e 	bl	8006294 <HAL_TIM_PWM_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800105e:	f000 f8fb 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <MX_TIM2_Init+0xe8>)
 8001064:	f000 fa1e 	bl	80014a4 <HAL_TIM_MspPostInit>

}
 8001068:	bf00      	nop
 800106a:	3738      	adds	r7, #56	; 0x38
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2000037c 	.word	0x2000037c

08001074 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 800107a:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <MX_USART2_UART_Init+0x84>)
 800107c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	480f      	ldr	r0, [pc, #60]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 80010b8:	f006 fab8 	bl	800762c <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010c2:	f000 f8c9 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  rpc_rx_buf.ctr = 0;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <MX_USART2_UART_Init+0x88>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	801a      	strh	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0210 	orr.w	r2, r2, #16
 80010da:	601a      	str	r2, [r3, #0]
  if(HAL_UART_Receive_DMA(&huart2, rpc_rx_buf.buf, RPC_BUF_SIZE)!=HAL_OK)
 80010dc:	22ff      	movs	r2, #255	; 0xff
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <MX_USART2_UART_Init+0x8c>)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_USART2_UART_Init+0x80>)
 80010e2:	f006 fbbb 	bl	800785c <HAL_UART_Receive_DMA>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_USART2_UART_Init+0x7c>
  	{
  		Error_Handler();
 80010ec:	f000 f8b4 	bl	8001258 <Error_Handler>
  	}
  /* USER CODE END USART2_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200003c8 	.word	0x200003c8
 80010f8:	40004400 	.word	0x40004400
 80010fc:	200001c8 	.word	0x200001c8
 8001100:	200001ca 	.word	0x200001ca

08001104 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <MX_DMA_Init+0x48>)
 800110c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <MX_DMA_Init+0x48>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6493      	str	r3, [r2, #72]	; 0x48
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <MX_DMA_Init+0x48>)
 8001118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 6, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2106      	movs	r1, #6
 8001126:	200d      	movs	r0, #13
 8001128:	f000 fd6c 	bl	8001c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800112c:	200d      	movs	r0, #13
 800112e:	f000 fd95 	bl	8001c5c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	2010      	movs	r0, #16
 8001138:	f000 fd64 	bl	8001c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800113c:	2010      	movs	r0, #16
 800113e:	f000 fd8d 	bl	8001c5c <HAL_NVIC_EnableIRQ>

}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <MX_GPIO_Init+0xf8>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a37      	ldr	r2, [pc, #220]	; (8001248 <MX_GPIO_Init+0xf8>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b35      	ldr	r3, [pc, #212]	; (8001248 <MX_GPIO_Init+0xf8>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4b32      	ldr	r3, [pc, #200]	; (8001248 <MX_GPIO_Init+0xf8>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a31      	ldr	r2, [pc, #196]	; (8001248 <MX_GPIO_Init+0xf8>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <MX_GPIO_Init+0xf8>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2102      	movs	r1, #2
 800119a:	482c      	ldr	r0, [pc, #176]	; (800124c <MX_GPIO_Init+0xfc>)
 800119c:	f001 fb38 	bl	8002810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCH_TRES_GPIO_Port, TCH_TRES_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f001 fb31 	bl	8002810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_FR_Pin */
  GPIO_InitStruct.Pin = OLED_FR_Pin;
 80011ae:	2301      	movs	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MX_GPIO_Init+0x100>)
 80011b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(OLED_FR_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4619      	mov	r1, r3
 80011c0:	4822      	ldr	r0, [pc, #136]	; (800124c <MX_GPIO_Init+0xfc>)
 80011c2:	f001 f8ff 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80011c6:	2302      	movs	r3, #2
 80011c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4619      	mov	r1, r3
 80011dc:	481b      	ldr	r0, [pc, #108]	; (800124c <MX_GPIO_Init+0xfc>)
 80011de:	f001 f8f1 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TCH_TRES_Pin */
  GPIO_InitStruct.Pin = TCH_TRES_Pin;
 80011e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TCH_TRES_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f001 f8e1 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TCH_IRQ_Pin;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_GPIO_Init+0x104>)
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4619      	mov	r1, r3
 8001216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121a:	f001 f8d3 	bl	80023c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2006      	movs	r0, #6
 8001224:	f000 fcee 	bl	8001c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001228:	2006      	movs	r0, #6
 800122a:	f000 fd17 	bl	8001c5c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2028      	movs	r0, #40	; 0x28
 8001234:	f000 fce6 	bl	8001c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001238:	2028      	movs	r0, #40	; 0x28
 800123a:	f000 fd0f 	bl	8001c5c <HAL_NVIC_EnableIRQ>

}
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	48000400 	.word	0x48000400
 8001250:	10110000 	.word	0x10110000
 8001254:	10210000 	.word	0x10210000

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //   printf("Wrong parameters value: file %s on line %d\r\n", file, line);
  /* USER CODE END 6 */
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_MspInit+0x44>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <HAL_MspInit+0x44>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6613      	str	r3, [r2, #96]	; 0x60
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_MspInit+0x44>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_MspInit+0x44>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_MspInit+0x44>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	6593      	str	r3, [r2, #88]	; 0x58
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_MspInit+0x44>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000

080012c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_I2C_MspInit+0x7c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d127      	bne.n	8001336 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_I2C_MspInit+0x80>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a16      	ldr	r2, [pc, #88]	; (8001344 <HAL_I2C_MspInit+0x80>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_I2C_MspInit+0x80>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TCH_SCL_Pin|TCH_SDA_Pin;
 80012fe:	23c0      	movs	r3, #192	; 0xc0
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001302:	2312      	movs	r3, #18
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001306:	2301      	movs	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800130e:	2304      	movs	r3, #4
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <HAL_I2C_MspInit+0x84>)
 800131a:	f001 f853 	bl	80023c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_I2C_MspInit+0x80>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_I2C_MspInit+0x80>)
 8001324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001328:	6593      	str	r3, [r2, #88]	; 0x58
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_I2C_MspInit+0x80>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40005400 	.word	0x40005400
 8001344:	40021000 	.word	0x40021000
 8001348:	48000400 	.word	0x48000400

0800134c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a3a      	ldr	r2, [pc, #232]	; (8001454 <HAL_SPI_MspInit+0x108>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d16e      	bne.n	800144c <HAL_SPI_MspInit+0x100>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800136e:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <HAL_SPI_MspInit+0x10c>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	4a39      	ldr	r2, [pc, #228]	; (8001458 <HAL_SPI_MspInit+0x10c>)
 8001374:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001378:	6613      	str	r3, [r2, #96]	; 0x60
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <HAL_SPI_MspInit+0x10c>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <HAL_SPI_MspInit+0x10c>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a33      	ldr	r2, [pc, #204]	; (8001458 <HAL_SPI_MspInit+0x10c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_SPI_MspInit+0x10c>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <HAL_SPI_MspInit+0x10c>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a2d      	ldr	r2, [pc, #180]	; (8001458 <HAL_SPI_MspInit+0x10c>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_SPI_MspInit+0x10c>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_DCS_Pin;
 80013b6:	2310      	movs	r3, #16
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c6:	2305      	movs	r3, #5
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OLED_DCS_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f000 fff6 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MOSI_Pin;
 80013d8:	2328      	movs	r3, #40	; 0x28
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013e8:	2305      	movs	r3, #5
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	481a      	ldr	r0, [pc, #104]	; (800145c <HAL_SPI_MspInit+0x110>)
 80013f4:	f000 ffe6 	bl	80023c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_SPI_MspInit+0x114>)
 80013fa:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_SPI_MspInit+0x118>)
 80013fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_SPI_MspInit+0x114>)
 8001400:	2201      	movs	r2, #1
 8001402:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_SPI_MspInit+0x114>)
 8001406:	2210      	movs	r2, #16
 8001408:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_SPI_MspInit+0x114>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_SPI_MspInit+0x114>)
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_SPI_MspInit+0x114>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_SPI_MspInit+0x114>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_SPI_MspInit+0x114>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_SPI_MspInit+0x114>)
 800142a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <HAL_SPI_MspInit+0x114>)
 8001432:	f000 fc37 	bl	8001ca4 <HAL_DMA_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 800143c:	f7ff ff0c 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_SPI_MspInit+0x114>)
 8001444:	655a      	str	r2, [r3, #84]	; 0x54
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_SPI_MspInit+0x114>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40013000 	.word	0x40013000
 8001458:	40021000 	.word	0x40021000
 800145c:	48000400 	.word	0x48000400
 8001460:	20000448 	.word	0x20000448
 8001464:	40020030 	.word	0x40020030

08001468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001478:	d10b      	bne.n	8001492 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_TIM_Base_MspInit+0x38>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_TIM_Base_MspInit+0x38>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6593      	str	r3, [r2, #88]	; 0x58
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_TIM_Base_MspInit+0x38>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000

080014a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c4:	d11c      	bne.n	8001500 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_TIM_MspPostInit+0x64>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_TIM_MspPostInit+0x64>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_TIM_MspPostInit+0x64>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 80014de:	2302      	movs	r3, #2
 80014e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f000 ff62 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a39      	ldr	r2, [pc, #228]	; (8001610 <HAL_UART_MspInit+0x104>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d16b      	bne.n	8001606 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <HAL_UART_MspInit+0x108>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	4a38      	ldr	r2, [pc, #224]	; (8001614 <HAL_UART_MspInit+0x108>)
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	6593      	str	r3, [r2, #88]	; 0x58
 800153a:	4b36      	ldr	r3, [pc, #216]	; (8001614 <HAL_UART_MspInit+0x108>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <HAL_UART_MspInit+0x108>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a32      	ldr	r2, [pc, #200]	; (8001614 <HAL_UART_MspInit+0x108>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b30      	ldr	r3, [pc, #192]	; (8001614 <HAL_UART_MspInit+0x108>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800155e:	2304      	movs	r3, #4
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156e:	2307      	movs	r3, #7
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f000 ff22 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001592:	2303      	movs	r3, #3
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a0:	f000 ff10 	bl	80023c4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80015a4:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <HAL_UART_MspInit+0x10c>)
 80015a6:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_UART_MspInit+0x110>)
 80015a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_UART_MspInit+0x10c>)
 80015ac:	2202      	movs	r2, #2
 80015ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_UART_MspInit+0x10c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_UART_MspInit+0x10c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_UART_MspInit+0x10c>)
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_UART_MspInit+0x10c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_UART_MspInit+0x10c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_UART_MspInit+0x10c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_UART_MspInit+0x10c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015da:	480f      	ldr	r0, [pc, #60]	; (8001618 <HAL_UART_MspInit+0x10c>)
 80015dc:	f000 fb62 	bl	8001ca4 <HAL_DMA_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80015e6:	f7ff fe37 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <HAL_UART_MspInit+0x10c>)
 80015ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80015f0:	4a09      	ldr	r2, [pc, #36]	; (8001618 <HAL_UART_MspInit+0x10c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2026      	movs	r0, #38	; 0x26
 80015fc:	f000 fb02 	bl	8001c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001600:	2026      	movs	r0, #38	; 0x26
 8001602:	f000 fb2b 	bl	8001c5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40004400 	.word	0x40004400
 8001614:	40021000 	.word	0x40021000
 8001618:	20000180 	.word	0x20000180
 800161c:	4002006c 	.word	0x4002006c

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001674:	f000 f994 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001680:	2001      	movs	r0, #1
 8001682:	f001 f8f5 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <DMA1_Channel3_IRQHandler+0x10>)
 8001692:	f000 fdac 	bl	80021ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000448 	.word	0x20000448

080016a0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <DMA1_Channel6_IRQHandler+0x10>)
 80016a6:	f000 fda2 	bl	80021ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000180 	.word	0x20000180

080016b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016b8:	4808      	ldr	r0, [pc, #32]	; (80016dc <USART2_IRQHandler+0x28>)
 80016ba:	f006 fa59 	bl	8007b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if(RESET!=__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <USART2_IRQHandler+0x28>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b10      	cmp	r3, #16
 80016ca:	d105      	bne.n	80016d8 <USART2_IRQHandler+0x24>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <USART2_IRQHandler+0x28>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2210      	movs	r2, #16
 80016d2:	621a      	str	r2, [r3, #32]
	  rpc_idle_callback();
 80016d4:	f7ff f854 	bl	8000780 <rpc_idle_callback>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200003c8 	.word	0x200003c8

080016e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80016e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016e8:	f001 f8c2 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001702:	f3af 8000 	nop.w
 8001706:	4601      	mov	r1, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf0      	blt.n	8001702 <_read+0x12>
	}

return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e009      	b.n	8001750 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60ba      	str	r2, [r7, #8]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ff13 	bl	8000570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	dbf1      	blt.n	800173c <_write+0x12>
	}
	return len;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_close>:

int _close(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
	return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800178a:	605a      	str	r2, [r3, #4]
	return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_isatty>:

int _isatty(int file)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
	return 1;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
	return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f008 fbb8 	bl	8009f70 <__errno>
 8001800:	4602      	mov	r2, r0
 8001802:	230c      	movs	r3, #12
 8001804:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20010000 	.word	0x20010000
 800182c:	00000400 	.word	0x00000400
 8001830:	200000b8 	.word	0x200000b8
 8001834:	20000a98 	.word	0x20000a98

08001838 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <SystemInit+0x64>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001842:	4a16      	ldr	r2, [pc, #88]	; (800189c <SystemInit+0x64>)
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <SystemInit+0x68>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <SystemInit+0x68>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <SystemInit+0x68>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <SystemInit+0x68>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <SystemInit+0x68>)
 8001864:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001868:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800186c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <SystemInit+0x68>)
 8001870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001874:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <SystemInit+0x68>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <SystemInit+0x68>)
 800187c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <SystemInit+0x68>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <SystemInit+0x64>)
 800188a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800188e:	609a      	str	r2, [r3, #8]
#endif
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00
 80018a0:	40021000 	.word	0x40021000

080018a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018aa:	e003      	b.n	80018b4 <LoopCopyDataInit>

080018ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018b2:	3104      	adds	r1, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018bc:	d3f6      	bcc.n	80018ac <CopyDataInit>
	ldr	r2, =_sbss
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80018c0:	e002      	b.n	80018c8 <LoopFillZerobss>

080018c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018c4:	f842 3b04 	str.w	r3, [r2], #4

080018c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <LoopForever+0x16>)
	cmp	r2, r3
 80018ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018cc:	d3f9      	bcc.n	80018c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ce:	f7ff ffb3 	bl	8001838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d2:	f008 fb53 	bl	8009f7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018d6:	f7fe ff71 	bl	80007bc <main>

080018da <LoopForever>:

LoopForever:
    b LoopForever
 80018da:	e7fe      	b.n	80018da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018dc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80018e0:	0801080c 	.word	0x0801080c
	ldr	r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018e8:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 80018ec:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 80018f0:	20000a98 	.word	0x20000a98

080018f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC1_IRQHandler>

080018f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f95f 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f80e 	bl	8001928 <HAL_InitTick>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	71fb      	strb	r3, [r7, #7]
 8001916:	e001      	b.n	800191c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001918:	f7ff fcb0 	bl	800127c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800191c:	79fb      	ldrb	r3, [r7, #7]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_InitTick+0x6c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_InitTick+0x70>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <HAL_InitTick+0x6c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f99a 	bl	8001c8c <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10f      	bne.n	800197e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b0f      	cmp	r3, #15
 8001962:	d809      	bhi.n	8001978 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001964:	2200      	movs	r2, #0
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f000 f94a 	bl	8001c04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_InitTick+0x74>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e007      	b.n	8001988 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	e004      	b.n	8001988 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	e001      	b.n	8001988 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008
 8001998:	20000000 	.word	0x20000000
 800199c:	20000004 	.word	0x20000004

080019a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000008 	.word	0x20000008
 80019c4:	20000490 	.word	0x20000490

080019c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000490 	.word	0x20000490

080019e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff ffee 	bl	80019c8 <HAL_GetTick>
 80019ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f8:	d005      	beq.n	8001a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_Delay+0x40>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a06:	bf00      	nop
 8001a08:	f7ff ffde 	bl	80019c8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d8f7      	bhi.n	8001a08 <HAL_Delay+0x28>
  {
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000008 	.word	0x20000008

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db0b      	blt.n	8001ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <__NVIC_EnableIRQ+0x38>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db0a      	blt.n	8001aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <__NVIC_SetPriority+0x4c>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aec:	e00a      	b.n	8001b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <__NVIC_SetPriority+0x50>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3b04      	subs	r3, #4
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	440b      	add	r3, r1
 8001b02:	761a      	strb	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf28      	it	cs
 8001b36:	2304      	movcs	r3, #4
 8001b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d902      	bls.n	8001b48 <NVIC_EncodePriority+0x30>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b03      	subs	r3, #3
 8001b46:	e000      	b.n	8001b4a <NVIC_EncodePriority+0x32>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	4313      	orrs	r3, r2
         );
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b90:	d301      	bcc.n	8001b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00f      	b.n	8001bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <SysTick_Config+0x40>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f7ff ff8e 	bl	8001ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <SysTick_Config+0x40>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <SysTick_Config+0x40>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b07      	cmp	r3, #7
 8001bd0:	d00f      	beq.n	8001bf2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b06      	cmp	r3, #6
 8001bd6:	d00c      	beq.n	8001bf2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d009      	beq.n	8001bf2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d006      	beq.n	8001bf2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d003      	beq.n	8001bf2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001bea:	21a7      	movs	r1, #167	; 0xa7
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001bee:	f7ff fb3a 	bl	8001266 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ff16 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	0800af84 	.word	0x0800af84

08001c04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d903      	bls.n	8001c24 <HAL_NVIC_SetPriority+0x20>
 8001c1c:	21bf      	movs	r1, #191	; 0xbf
 8001c1e:	480e      	ldr	r0, [pc, #56]	; (8001c58 <HAL_NVIC_SetPriority+0x54>)
 8001c20:	f7ff fb21 	bl	8001266 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	d903      	bls.n	8001c32 <HAL_NVIC_SetPriority+0x2e>
 8001c2a:	21c0      	movs	r1, #192	; 0xc0
 8001c2c:	480a      	ldr	r0, [pc, #40]	; (8001c58 <HAL_NVIC_SetPriority+0x54>)
 8001c2e:	f7ff fb1a 	bl	8001266 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c32:	f7ff ff1b 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001c36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	6978      	ldr	r0, [r7, #20]
 8001c3e:	f7ff ff6b 	bl	8001b18 <NVIC_EncodePriority>
 8001c42:	4602      	mov	r2, r0
 8001c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff3a 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001c50:	bf00      	nop
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	0800af84 	.word	0x0800af84

08001c5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da03      	bge.n	8001c76 <HAL_NVIC_EnableIRQ+0x1a>
 8001c6e:	21d3      	movs	r1, #211	; 0xd3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_NVIC_EnableIRQ+0x2c>)
 8001c72:	f7ff faf8 	bl	8001266 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff04 	bl	8001a88 <__NVIC_EnableIRQ>
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	0800af84 	.word	0x0800af84

08001c8c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff73 	bl	8001b80 <SysTick_Config>
 8001c9a:	4603      	mov	r3, r0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e19d      	b.n	8001ff2 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a79      	ldr	r2, [pc, #484]	; (8001ea0 <HAL_DMA_Init+0x1fc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d044      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a77      	ldr	r2, [pc, #476]	; (8001ea4 <HAL_DMA_Init+0x200>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d03f      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a76      	ldr	r2, [pc, #472]	; (8001ea8 <HAL_DMA_Init+0x204>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d03a      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a74      	ldr	r2, [pc, #464]	; (8001eac <HAL_DMA_Init+0x208>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d035      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a73      	ldr	r2, [pc, #460]	; (8001eb0 <HAL_DMA_Init+0x20c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d030      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a71      	ldr	r2, [pc, #452]	; (8001eb4 <HAL_DMA_Init+0x210>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d02b      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a70      	ldr	r2, [pc, #448]	; (8001eb8 <HAL_DMA_Init+0x214>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d026      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6e      	ldr	r2, [pc, #440]	; (8001ebc <HAL_DMA_Init+0x218>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d021      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a6d      	ldr	r2, [pc, #436]	; (8001ec0 <HAL_DMA_Init+0x21c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d01c      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a6b      	ldr	r2, [pc, #428]	; (8001ec4 <HAL_DMA_Init+0x220>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d017      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6a      	ldr	r2, [pc, #424]	; (8001ec8 <HAL_DMA_Init+0x224>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d012      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a68      	ldr	r2, [pc, #416]	; (8001ecc <HAL_DMA_Init+0x228>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a67      	ldr	r2, [pc, #412]	; (8001ed0 <HAL_DMA_Init+0x22c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d008      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a65      	ldr	r2, [pc, #404]	; (8001ed4 <HAL_DMA_Init+0x230>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d003      	beq.n	8001d4a <HAL_DMA_Init+0xa6>
 8001d42:	21a4      	movs	r1, #164	; 0xa4
 8001d44:	4864      	ldr	r0, [pc, #400]	; (8001ed8 <HAL_DMA_Init+0x234>)
 8001d46:	f7ff fa8e 	bl	8001266 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <HAL_DMA_Init+0xc8>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b10      	cmp	r3, #16
 8001d58:	d008      	beq.n	8001d6c <HAL_DMA_Init+0xc8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d62:	d003      	beq.n	8001d6c <HAL_DMA_Init+0xc8>
 8001d64:	21a5      	movs	r1, #165	; 0xa5
 8001d66:	485c      	ldr	r0, [pc, #368]	; (8001ed8 <HAL_DMA_Init+0x234>)
 8001d68:	f7ff fa7d 	bl	8001266 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b40      	cmp	r3, #64	; 0x40
 8001d72:	d007      	beq.n	8001d84 <HAL_DMA_Init+0xe0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_DMA_Init+0xe0>
 8001d7c:	21a6      	movs	r1, #166	; 0xa6
 8001d7e:	4856      	ldr	r0, [pc, #344]	; (8001ed8 <HAL_DMA_Init+0x234>)
 8001d80:	f7ff fa71 	bl	8001266 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b80      	cmp	r3, #128	; 0x80
 8001d8a:	d007      	beq.n	8001d9c <HAL_DMA_Init+0xf8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_DMA_Init+0xf8>
 8001d94:	21a7      	movs	r1, #167	; 0xa7
 8001d96:	4850      	ldr	r0, [pc, #320]	; (8001ed8 <HAL_DMA_Init+0x234>)
 8001d98:	f7ff fa65 	bl	8001266 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00d      	beq.n	8001dc0 <HAL_DMA_Init+0x11c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dac:	d008      	beq.n	8001dc0 <HAL_DMA_Init+0x11c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db6:	d003      	beq.n	8001dc0 <HAL_DMA_Init+0x11c>
 8001db8:	21a8      	movs	r1, #168	; 0xa8
 8001dba:	4847      	ldr	r0, [pc, #284]	; (8001ed8 <HAL_DMA_Init+0x234>)
 8001dbc:	f7ff fa53 	bl	8001266 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00d      	beq.n	8001de4 <HAL_DMA_Init+0x140>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd0:	d008      	beq.n	8001de4 <HAL_DMA_Init+0x140>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dda:	d003      	beq.n	8001de4 <HAL_DMA_Init+0x140>
 8001ddc:	21a9      	movs	r1, #169	; 0xa9
 8001dde:	483e      	ldr	r0, [pc, #248]	; (8001ed8 <HAL_DMA_Init+0x234>)
 8001de0:	f7ff fa41 	bl	8001266 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_DMA_Init+0x158>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d003      	beq.n	8001dfc <HAL_DMA_Init+0x158>
 8001df4:	21aa      	movs	r1, #170	; 0xaa
 8001df6:	4838      	ldr	r0, [pc, #224]	; (8001ed8 <HAL_DMA_Init+0x234>)
 8001df8:	f7ff fa35 	bl	8001266 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d012      	beq.n	8001e2a <HAL_DMA_Init+0x186>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0c:	d00d      	beq.n	8001e2a <HAL_DMA_Init+0x186>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e16:	d008      	beq.n	8001e2a <HAL_DMA_Init+0x186>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001e20:	d003      	beq.n	8001e2a <HAL_DMA_Init+0x186>
 8001e22:	21ab      	movs	r1, #171	; 0xab
 8001e24:	482c      	ldr	r0, [pc, #176]	; (8001ed8 <HAL_DMA_Init+0x234>)
 8001e26:	f7ff fa1e 	bl	8001266 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d01f      	beq.n	8001e72 <HAL_DMA_Init+0x1ce>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d01b      	beq.n	8001e72 <HAL_DMA_Init+0x1ce>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d017      	beq.n	8001e72 <HAL_DMA_Init+0x1ce>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d013      	beq.n	8001e72 <HAL_DMA_Init+0x1ce>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d00f      	beq.n	8001e72 <HAL_DMA_Init+0x1ce>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d00b      	beq.n	8001e72 <HAL_DMA_Init+0x1ce>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d007      	beq.n	8001e72 <HAL_DMA_Init+0x1ce>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b07      	cmp	r3, #7
 8001e68:	d003      	beq.n	8001e72 <HAL_DMA_Init+0x1ce>
 8001e6a:	21ad      	movs	r1, #173	; 0xad
 8001e6c:	481a      	ldr	r0, [pc, #104]	; (8001ed8 <HAL_DMA_Init+0x234>)
 8001e6e:	f7ff f9fa 	bl	8001266 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_DMA_Init+0x238>)
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d836      	bhi.n	8001eec <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <HAL_DMA_Init+0x23c>)
 8001e86:	4413      	add	r3, r2
 8001e88:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_DMA_Init+0x240>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	009a      	lsls	r2, r3, #2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a13      	ldr	r2, [pc, #76]	; (8001ee8 <HAL_DMA_Init+0x244>)
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e9c:	e035      	b.n	8001f0a <HAL_DMA_Init+0x266>
 8001e9e:	bf00      	nop
 8001ea0:	40020008 	.word	0x40020008
 8001ea4:	4002001c 	.word	0x4002001c
 8001ea8:	40020030 	.word	0x40020030
 8001eac:	40020044 	.word	0x40020044
 8001eb0:	40020058 	.word	0x40020058
 8001eb4:	4002006c 	.word	0x4002006c
 8001eb8:	40020080 	.word	0x40020080
 8001ebc:	40020408 	.word	0x40020408
 8001ec0:	4002041c 	.word	0x4002041c
 8001ec4:	40020430 	.word	0x40020430
 8001ec8:	40020444 	.word	0x40020444
 8001ecc:	40020458 	.word	0x40020458
 8001ed0:	4002046c 	.word	0x4002046c
 8001ed4:	40020480 	.word	0x40020480
 8001ed8:	0800afc0 	.word	0x0800afc0
 8001edc:	40020407 	.word	0x40020407
 8001ee0:	bffdfff8 	.word	0xbffdfff8
 8001ee4:	cccccccd 	.word	0xcccccccd
 8001ee8:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <HAL_DMA_Init+0x358>)
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4a42      	ldr	r2, [pc, #264]	; (8002000 <HAL_DMA_Init+0x35c>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	009a      	lsls	r2, r3, #2
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3f      	ldr	r2, [pc, #252]	; (8002004 <HAL_DMA_Init+0x360>)
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f24:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f64:	d039      	beq.n	8001fda <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a27      	ldr	r2, [pc, #156]	; (8002008 <HAL_DMA_Init+0x364>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d11a      	bne.n	8001fa6 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <HAL_DMA_Init+0x368>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	f003 031c 	and.w	r3, r3, #28
 8001f7c:	210f      	movs	r1, #15
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	4921      	ldr	r1, [pc, #132]	; (800200c <HAL_DMA_Init+0x368>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_DMA_Init+0x368>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6859      	ldr	r1, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f003 031c 	and.w	r3, r3, #28
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	491b      	ldr	r1, [pc, #108]	; (800200c <HAL_DMA_Init+0x368>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
 8001fa4:	e019      	b.n	8001fda <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_DMA_Init+0x36c>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f003 031c 	and.w	r3, r3, #28
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4915      	ldr	r1, [pc, #84]	; (8002010 <HAL_DMA_Init+0x36c>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_DMA_Init+0x36c>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f003 031c 	and.w	r3, r3, #28
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	490e      	ldr	r1, [pc, #56]	; (8002010 <HAL_DMA_Init+0x36c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	bffdfbf8 	.word	0xbffdfbf8
 8002000:	cccccccd 	.word	0xcccccccd
 8002004:	40020400 	.word	0x40020400
 8002008:	40020000 	.word	0x40020000
 800200c:	400200a8 	.word	0x400200a8
 8002010:	400204a8 	.word	0x400204a8

08002014 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_DMA_Start_IT+0x20>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002032:	d304      	bcc.n	800203e <HAL_DMA_Start_IT+0x2a>
 8002034:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8002038:	482c      	ldr	r0, [pc, #176]	; (80020ec <HAL_DMA_Start_IT+0xd8>)
 800203a:	f7ff f914 	bl	8001266 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_DMA_Start_IT+0x38>
 8002048:	2302      	movs	r3, #2
 800204a:	e04b      	b.n	80020e4 <HAL_DMA_Start_IT+0xd0>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d13a      	bne.n	80020d6 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f96d 	bl	8002364 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 020e 	orr.w	r2, r2, #14
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e00f      	b.n	80020c4 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0204 	bic.w	r2, r2, #4
 80020b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 020a 	orr.w	r2, r2, #10
 80020c2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e005      	b.n	80020e2 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80020de:	2302      	movs	r3, #2
 80020e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80020e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	0800afc0 	.word	0x0800afc0

080020f0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d008      	beq.n	800211a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2204      	movs	r2, #4
 800210c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e022      	b.n	8002160 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 020e 	bic.w	r2, r2, #14
 8002128:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0201 	bic.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f003 021c 	and.w	r2, r3, #28
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f202 	lsl.w	r2, r1, r2
 800214c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d005      	beq.n	8002190 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2204      	movs	r2, #4
 8002188:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	e029      	b.n	80021e4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 020e 	bic.w	r2, r2, #14
 800219e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	f003 021c 	and.w	r2, r3, #28
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f202 	lsl.w	r2, r1, r2
 80021c2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4798      	blx	r3
    }
  }
  return status;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f003 031c 	and.w	r3, r3, #28
 800220e:	2204      	movs	r2, #4
 8002210:	409a      	lsls	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4013      	ands	r3, r2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d026      	beq.n	8002268 <HAL_DMA_IRQHandler+0x7a>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d021      	beq.n	8002268 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0204 	bic.w	r2, r2, #4
 8002240:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f003 021c 	and.w	r2, r3, #28
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2104      	movs	r1, #4
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	2b00      	cmp	r3, #0
 800225c:	d071      	beq.n	8002342 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002266:	e06c      	b.n	8002342 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	f003 031c 	and.w	r3, r3, #28
 8002270:	2202      	movs	r2, #2
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d02e      	beq.n	80022da <HAL_DMA_IRQHandler+0xec>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d029      	beq.n	80022da <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 020a 	bic.w	r2, r2, #10
 80022a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	f003 021c 	and.w	r2, r3, #28
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	2102      	movs	r1, #2
 80022ba:	fa01 f202 	lsl.w	r2, r1, r2
 80022be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d038      	beq.n	8002342 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022d8:	e033      	b.n	8002342 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f003 031c 	and.w	r3, r3, #28
 80022e2:	2208      	movs	r2, #8
 80022e4:	409a      	lsls	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d02a      	beq.n	8002344 <HAL_DMA_IRQHandler+0x156>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d025      	beq.n	8002344 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 020e 	bic.w	r2, r2, #14
 8002306:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230c:	f003 021c 	and.w	r2, r3, #28
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f202 	lsl.w	r2, r1, r2
 800231a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002342:	bf00      	nop
 8002344:	bf00      	nop
}
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f003 021c 	and.w	r2, r3, #28
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f202 	lsl.w	r2, r1, r2
 8002384:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b10      	cmp	r3, #16
 8002394:	d108      	bne.n	80023a8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023a6:	e007      	b.n	80023b8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	60da      	str	r2, [r3, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023d8:	d00f      	beq.n	80023fa <HAL_GPIO_Init+0x36>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a37      	ldr	r2, [pc, #220]	; (80024bc <HAL_GPIO_Init+0xf8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00b      	beq.n	80023fa <HAL_GPIO_Init+0x36>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a36      	ldr	r2, [pc, #216]	; (80024c0 <HAL_GPIO_Init+0xfc>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x36>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a35      	ldr	r2, [pc, #212]	; (80024c4 <HAL_GPIO_Init+0x100>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x36>
 80023f2:	21b3      	movs	r1, #179	; 0xb3
 80023f4:	4834      	ldr	r0, [pc, #208]	; (80024c8 <HAL_GPIO_Init+0x104>)
 80023f6:	f7fe ff36 	bl	8001266 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_GPIO_Init+0x4c>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x54>
 8002410:	21b4      	movs	r1, #180	; 0xb4
 8002412:	482d      	ldr	r0, [pc, #180]	; (80024c8 <HAL_GPIO_Init+0x104>)
 8002414:	f7fe ff27 	bl	8001266 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d039      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d035      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b11      	cmp	r3, #17
 800242e:	d031      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d02d      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b12      	cmp	r3, #18
 800243e:	d029      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a21      	ldr	r2, [pc, #132]	; (80024cc <HAL_GPIO_Init+0x108>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d024      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4a20      	ldr	r2, [pc, #128]	; (80024d0 <HAL_GPIO_Init+0x10c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d01f      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <HAL_GPIO_Init+0x110>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01a      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <HAL_GPIO_Init+0x114>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d015      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a1b      	ldr	r2, [pc, #108]	; (80024dc <HAL_GPIO_Init+0x118>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d010      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a1a      	ldr	r2, [pc, #104]	; (80024e0 <HAL_GPIO_Init+0x11c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00b      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d007      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b0b      	cmp	r3, #11
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0xd0>
 800248c:	21b5      	movs	r1, #181	; 0xb5
 800248e:	480e      	ldr	r0, [pc, #56]	; (80024c8 <HAL_GPIO_Init+0x104>)
 8002490:	f7fe fee9 	bl	8001266 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 81a8 	beq.w	80027ee <HAL_GPIO_Init+0x42a>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	f000 81a3 	beq.w	80027ee <HAL_GPIO_Init+0x42a>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	f000 819e 	beq.w	80027ee <HAL_GPIO_Init+0x42a>
 80024b2:	21b6      	movs	r1, #182	; 0xb6
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <HAL_GPIO_Init+0x104>)
 80024b6:	f7fe fed6 	bl	8001266 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ba:	e198      	b.n	80027ee <HAL_GPIO_Init+0x42a>
 80024bc:	48000400 	.word	0x48000400
 80024c0:	48000800 	.word	0x48000800
 80024c4:	48001c00 	.word	0x48001c00
 80024c8:	0800aff8 	.word	0x0800aff8
 80024cc:	10110000 	.word	0x10110000
 80024d0:	10210000 	.word	0x10210000
 80024d4:	10310000 	.word	0x10310000
 80024d8:	10120000 	.word	0x10120000
 80024dc:	10220000 	.word	0x10220000
 80024e0:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	4013      	ands	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8176 	beq.w	80027e8 <HAL_GPIO_Init+0x424>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d00b      	beq.n	800251c <HAL_GPIO_Init+0x158>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d007      	beq.n	800251c <HAL_GPIO_Init+0x158>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002510:	2b11      	cmp	r3, #17
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x158>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b12      	cmp	r3, #18
 800251a:	d144      	bne.n	80025a6 <HAL_GPIO_Init+0x1e2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00f      	beq.n	8002544 <HAL_GPIO_Init+0x180>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d00b      	beq.n	8002544 <HAL_GPIO_Init+0x180>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d007      	beq.n	8002544 <HAL_GPIO_Init+0x180>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x180>
 800253c:	21c6      	movs	r1, #198	; 0xc6
 800253e:	4872      	ldr	r0, [pc, #456]	; (8002708 <HAL_GPIO_Init+0x344>)
 8002540:	f7fe fe91 	bl	8001266 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800257a:	2201      	movs	r2, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 0201 	and.w	r2, r3, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x222>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b12      	cmp	r3, #18
 80025e4:	d13f      	bne.n	8002666 <HAL_GPIO_Init+0x2a2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025ec:	d00f      	beq.n	800260e <HAL_GPIO_Init+0x24a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a46      	ldr	r2, [pc, #280]	; (800270c <HAL_GPIO_Init+0x348>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00b      	beq.n	800260e <HAL_GPIO_Init+0x24a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a45      	ldr	r2, [pc, #276]	; (8002710 <HAL_GPIO_Init+0x34c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0x24a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a44      	ldr	r2, [pc, #272]	; (8002714 <HAL_GPIO_Init+0x350>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x24a>
 8002606:	21ec      	movs	r1, #236	; 0xec
 8002608:	483f      	ldr	r0, [pc, #252]	; (8002708 <HAL_GPIO_Init+0x344>)
 800260a:	f7fe fe2c 	bl	8001266 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b0f      	cmp	r3, #15
 8002614:	d903      	bls.n	800261e <HAL_GPIO_Init+0x25a>
 8002616:	21ed      	movs	r1, #237	; 0xed
 8002618:	483b      	ldr	r0, [pc, #236]	; (8002708 <HAL_GPIO_Init+0x344>)
 800261a:	f7fe fe24 	bl	8001266 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3208      	adds	r2, #8
 8002626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	08da      	lsrs	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3208      	adds	r2, #8
 8002660:	6939      	ldr	r1, [r7, #16]
 8002662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	2203      	movs	r2, #3
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0203 	and.w	r2, r3, #3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80a0 	beq.w	80027e8 <HAL_GPIO_Init+0x424>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_GPIO_Init+0x354>)
 80026aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ac:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <HAL_GPIO_Init+0x354>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6613      	str	r3, [r2, #96]	; 0x60
 80026b4:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_GPIO_Init+0x354>)
 80026b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026c0:	4a16      	ldr	r2, [pc, #88]	; (800271c <HAL_GPIO_Init+0x358>)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026ea:	d019      	beq.n	8002720 <HAL_GPIO_Init+0x35c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a07      	ldr	r2, [pc, #28]	; (800270c <HAL_GPIO_Init+0x348>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d007      	beq.n	8002704 <HAL_GPIO_Init+0x340>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a06      	ldr	r2, [pc, #24]	; (8002710 <HAL_GPIO_Init+0x34c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d101      	bne.n	8002700 <HAL_GPIO_Init+0x33c>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e010      	b.n	8002722 <HAL_GPIO_Init+0x35e>
 8002700:	2307      	movs	r3, #7
 8002702:	e00e      	b.n	8002722 <HAL_GPIO_Init+0x35e>
 8002704:	2301      	movs	r3, #1
 8002706:	e00c      	b.n	8002722 <HAL_GPIO_Init+0x35e>
 8002708:	0800aff8 	.word	0x0800aff8
 800270c:	48000400 	.word	0x48000400
 8002710:	48000800 	.word	0x48000800
 8002714:	48001c00 	.word	0x48001c00
 8002718:	40021000 	.word	0x40021000
 800271c:	40010000 	.word	0x40010000
 8002720:	2300      	movs	r3, #0
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	f002 0203 	and.w	r2, r2, #3
 8002728:	0092      	lsls	r2, r2, #2
 800272a:	4093      	lsls	r3, r2
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002732:	4935      	ldr	r1, [pc, #212]	; (8002808 <HAL_GPIO_Init+0x444>)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	3302      	adds	r3, #2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002740:	4b32      	ldr	r3, [pc, #200]	; (800280c <HAL_GPIO_Init+0x448>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x3a0>
        {
          temp |= iocurrent;
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002764:	4a29      	ldr	r2, [pc, #164]	; (800280c <HAL_GPIO_Init+0x448>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800276a:	4b28      	ldr	r3, [pc, #160]	; (800280c <HAL_GPIO_Init+0x448>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x3ca>
        {
          temp |= iocurrent;
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800278e:	4a1f      	ldr	r2, [pc, #124]	; (800280c <HAL_GPIO_Init+0x448>)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002794:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_GPIO_Init+0x448>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x3f4>
        {
          temp |= iocurrent;
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027b8:	4a14      	ldr	r2, [pc, #80]	; (800280c <HAL_GPIO_Init+0x448>)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027be:	4b13      	ldr	r3, [pc, #76]	; (800280c <HAL_GPIO_Init+0x448>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x41e>
        {
          temp |= iocurrent;
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <HAL_GPIO_Init+0x448>)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3301      	adds	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f47f ae73 	bne.w	80024e4 <HAL_GPIO_Init+0x120>
  }
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40010000 	.word	0x40010000
 800280c:	40010400 	.word	0x40010400

08002810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
 800281c:	4613      	mov	r3, r2
 800281e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <HAL_GPIO_WritePin+0x20>
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	0c1b      	lsrs	r3, r3, #16
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	d004      	beq.n	800283a <HAL_GPIO_WritePin+0x2a>
 8002830:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8002834:	480d      	ldr	r0, [pc, #52]	; (800286c <HAL_GPIO_WritePin+0x5c>)
 8002836:	f7fe fd16 	bl	8001266 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800283a:	787b      	ldrb	r3, [r7, #1]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d007      	beq.n	8002850 <HAL_GPIO_WritePin+0x40>
 8002840:	787b      	ldrb	r3, [r7, #1]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d004      	beq.n	8002850 <HAL_GPIO_WritePin+0x40>
 8002846:	f240 11b3 	movw	r1, #435	; 0x1b3
 800284a:	4808      	ldr	r0, [pc, #32]	; (800286c <HAL_GPIO_WritePin+0x5c>)
 800284c:	f7fe fd0b 	bl	8001266 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800285c:	e002      	b.n	8002864 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	0800aff8 	.word	0x0800aff8

08002870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d006      	beq.n	8002894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002886:	4a05      	ldr	r2, [pc, #20]	; (800289c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	4618      	mov	r0, r3
 8002890:	f006 f8a4 	bl	80089dc <HAL_GPIO_EXTI_Callback>
  }
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0ff      	b.n	8002ab2 <HAL_I2C_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a81      	ldr	r2, [pc, #516]	; (8002abc <HAL_I2C_Init+0x21c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_I2C_Init+0x30>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a7f      	ldr	r2, [pc, #508]	; (8002ac0 <HAL_I2C_Init+0x220>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d004      	beq.n	80028d0 <HAL_I2C_Init+0x30>
 80028c6:	f240 11e5 	movw	r1, #485	; 0x1e5
 80028ca:	487e      	ldr	r0, [pc, #504]	; (8002ac4 <HAL_I2C_Init+0x224>)
 80028cc:	f7fe fccb 	bl	8001266 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d8:	d304      	bcc.n	80028e4 <HAL_I2C_Init+0x44>
 80028da:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 80028de:	4879      	ldr	r0, [pc, #484]	; (8002ac4 <HAL_I2C_Init+0x224>)
 80028e0:	f7fe fcc1 	bl	8001266 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d008      	beq.n	80028fe <HAL_I2C_Init+0x5e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d004      	beq.n	80028fe <HAL_I2C_Init+0x5e>
 80028f4:	f240 11e7 	movw	r1, #487	; 0x1e7
 80028f8:	4872      	ldr	r0, [pc, #456]	; (8002ac4 <HAL_I2C_Init+0x224>)
 80028fa:	f7fe fcb4 	bl	8001266 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_I2C_Init+0x7a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290e:	d004      	beq.n	800291a <HAL_I2C_Init+0x7a>
 8002910:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8002914:	486b      	ldr	r0, [pc, #428]	; (8002ac4 <HAL_I2C_Init+0x224>)
 8002916:	f7fe fca6 	bl	8001266 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	2bff      	cmp	r3, #255	; 0xff
 8002920:	d904      	bls.n	800292c <HAL_I2C_Init+0x8c>
 8002922:	f240 11e9 	movw	r1, #489	; 0x1e9
 8002926:	4867      	ldr	r0, [pc, #412]	; (8002ac4 <HAL_I2C_Init+0x224>)
 8002928:	f7fe fc9d 	bl	8001266 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <HAL_I2C_Init+0xd6>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d01c      	beq.n	8002976 <HAL_I2C_Init+0xd6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d018      	beq.n	8002976 <HAL_I2C_Init+0xd6>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b03      	cmp	r3, #3
 800294a:	d014      	beq.n	8002976 <HAL_I2C_Init+0xd6>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d010      	beq.n	8002976 <HAL_I2C_Init+0xd6>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b05      	cmp	r3, #5
 800295a:	d00c      	beq.n	8002976 <HAL_I2C_Init+0xd6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b06      	cmp	r3, #6
 8002962:	d008      	beq.n	8002976 <HAL_I2C_Init+0xd6>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b07      	cmp	r3, #7
 800296a:	d004      	beq.n	8002976 <HAL_I2C_Init+0xd6>
 800296c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8002970:	4854      	ldr	r0, [pc, #336]	; (8002ac4 <HAL_I2C_Init+0x224>)
 8002972:	f7fe fc78 	bl	8001266 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <HAL_I2C_Init+0xf2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002986:	d004      	beq.n	8002992 <HAL_I2C_Init+0xf2>
 8002988:	f240 11eb 	movw	r1, #491	; 0x1eb
 800298c:	484d      	ldr	r0, [pc, #308]	; (8002ac4 <HAL_I2C_Init+0x224>)
 800298e:	f7fe fc6a 	bl	8001266 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_I2C_Init+0x10e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029a2:	d004      	beq.n	80029ae <HAL_I2C_Init+0x10e>
 80029a4:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80029a8:	4846      	ldr	r0, [pc, #280]	; (8002ac4 <HAL_I2C_Init+0x224>)
 80029aa:	f7fe fc5c 	bl	8001266 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe fc7e 	bl	80012c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	; 0x24
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d107      	bne.n	8002a16 <HAL_I2C_Init+0x176>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e006      	b.n	8002a24 <HAL_I2C_Init+0x184>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d104      	bne.n	8002a36 <HAL_I2C_Init+0x196>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	ea42 0103 	orr.w	r1, r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	021a      	lsls	r2, r3, #8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69d9      	ldr	r1, [r3, #28]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1a      	ldr	r2, [r3, #32]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40005400 	.word	0x40005400
 8002ac0:	40005c00 	.word	0x40005c00
 8002ac4:	0800b034 	.word	0x0800b034

08002ac8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	817b      	strh	r3, [r7, #10]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	f040 80da 	bne.w	8002c9e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_I2C_Master_Transmit+0x30>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0d3      	b.n	8002ca0 <HAL_I2C_Master_Transmit+0x1d8>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b00:	f7fe ff62 	bl	80019c8 <HAL_GetTick>
 8002b04:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2319      	movs	r3, #25
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fb5c 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e0be      	b.n	8002ca0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2221      	movs	r2, #33	; 0x21
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	893a      	ldrh	r2, [r7, #8]
 8002b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2bff      	cmp	r3, #255	; 0xff
 8002b52:	d90e      	bls.n	8002b72 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	22ff      	movs	r2, #255	; 0xff
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	8979      	ldrh	r1, [r7, #10]
 8002b62:	4b51      	ldr	r3, [pc, #324]	; (8002ca8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fcbe 	bl	80034ec <I2C_TransferConfig>
 8002b70:	e06c      	b.n	8002c4c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	8979      	ldrh	r1, [r7, #10]
 8002b84:	4b48      	ldr	r3, [pc, #288]	; (8002ca8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fcad 	bl	80034ec <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002b92:	e05b      	b.n	8002c4c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	6a39      	ldr	r1, [r7, #32]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fb59 	bl	8003250 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e07b      	b.n	8002ca0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d034      	beq.n	8002c4c <HAL_I2C_Master_Transmit+0x184>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d130      	bne.n	8002c4c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 faeb 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e04d      	b.n	8002ca0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2bff      	cmp	r3, #255	; 0xff
 8002c0c:	d90e      	bls.n	8002c2c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	22ff      	movs	r2, #255	; 0xff
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	8979      	ldrh	r1, [r7, #10]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fc61 	bl	80034ec <I2C_TransferConfig>
 8002c2a:	e00f      	b.n	8002c4c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	8979      	ldrh	r1, [r7, #10]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fc50 	bl	80034ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d19e      	bne.n	8002b94 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	6a39      	ldr	r1, [r7, #32]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fb38 	bl	80032d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e01a      	b.n	8002ca0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_I2C_Master_Transmit+0x1e4>)
 8002c7e:	400b      	ands	r3, r1
 8002c80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	80002000 	.word	0x80002000
 8002cac:	fe00e800 	.word	0xfe00e800

08002cb0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	817b      	strh	r3, [r7, #10]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	f040 80db 	bne.w	8002e88 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_I2C_Master_Receive+0x30>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e0d4      	b.n	8002e8a <HAL_I2C_Master_Receive+0x1da>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ce8:	f7fe fe6e 	bl	80019c8 <HAL_GetTick>
 8002cec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2319      	movs	r3, #25
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fa68 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0bf      	b.n	8002e8a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2222      	movs	r2, #34	; 0x22
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2210      	movs	r2, #16
 8002d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	893a      	ldrh	r2, [r7, #8]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2bff      	cmp	r3, #255	; 0xff
 8002d3a:	d90e      	bls.n	8002d5a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	22ff      	movs	r2, #255	; 0xff
 8002d40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	8979      	ldrh	r1, [r7, #10]
 8002d4a:	4b52      	ldr	r3, [pc, #328]	; (8002e94 <HAL_I2C_Master_Receive+0x1e4>)
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fbca 	bl	80034ec <I2C_TransferConfig>
 8002d58:	e06d      	b.n	8002e36 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	8979      	ldrh	r1, [r7, #10]
 8002d6c:	4b49      	ldr	r3, [pc, #292]	; (8002e94 <HAL_I2C_Master_Receive+0x1e4>)
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fbb9 	bl	80034ec <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002d7a:	e05c      	b.n	8002e36 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	6a39      	ldr	r1, [r7, #32]
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fae1 	bl	8003348 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e07c      	b.n	8002e8a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d034      	beq.n	8002e36 <HAL_I2C_Master_Receive+0x186>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d130      	bne.n	8002e36 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2180      	movs	r1, #128	; 0x80
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f9f6 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e04d      	b.n	8002e8a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2bff      	cmp	r3, #255	; 0xff
 8002df6:	d90e      	bls.n	8002e16 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	22ff      	movs	r2, #255	; 0xff
 8002dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	8979      	ldrh	r1, [r7, #10]
 8002e06:	2300      	movs	r3, #0
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fb6c 	bl	80034ec <I2C_TransferConfig>
 8002e14:	e00f      	b.n	8002e36 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	8979      	ldrh	r1, [r7, #10]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 fb5b 	bl	80034ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d19d      	bne.n	8002d7c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	6a39      	ldr	r1, [r7, #32]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fa43 	bl	80032d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e01a      	b.n	8002e8a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <HAL_I2C_Master_Receive+0x1e8>)
 8002e68:	400b      	ands	r3, r1
 8002e6a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e000      	b.n	8002e8a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
  }
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	80002400 	.word	0x80002400
 8002e98:	fe00e800 	.word	0xfe00e800

08002e9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	817b      	strh	r3, [r7, #10]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	813b      	strh	r3, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d007      	beq.n	8002ecc <HAL_I2C_Mem_Write+0x30>
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d004      	beq.n	8002ecc <HAL_I2C_Mem_Write+0x30>
 8002ec2:	f640 01fb 	movw	r1, #2299	; 0x8fb
 8002ec6:	4884      	ldr	r0, [pc, #528]	; (80030d8 <HAL_I2C_Mem_Write+0x23c>)
 8002ec8:	f7fe f9cd 	bl	8001266 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	f040 80f9 	bne.w	80030cc <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_I2C_Mem_Write+0x4a>
 8002ee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0ed      	b.n	80030ce <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_I2C_Mem_Write+0x64>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0e6      	b.n	80030ce <HAL_I2C_Mem_Write+0x232>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f08:	f7fe fd5e 	bl	80019c8 <HAL_GetTick>
 8002f0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	2319      	movs	r3, #25
 8002f14:	2201      	movs	r2, #1
 8002f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f958 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e0d1      	b.n	80030ce <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2221      	movs	r2, #33	; 0x21
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2240      	movs	r2, #64	; 0x40
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f52:	88f8      	ldrh	r0, [r7, #6]
 8002f54:	893a      	ldrh	r2, [r7, #8]
 8002f56:	8979      	ldrh	r1, [r7, #10]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	4603      	mov	r3, r0
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f8bc 	bl	80030e0 <I2C_RequestMemoryWrite>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e0a9      	b.n	80030ce <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2bff      	cmp	r3, #255	; 0xff
 8002f82:	d90e      	bls.n	8002fa2 <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	22ff      	movs	r2, #255	; 0xff
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	8979      	ldrh	r1, [r7, #10]
 8002f92:	2300      	movs	r3, #0
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 faa6 	bl	80034ec <I2C_TransferConfig>
 8002fa0:	e00f      	b.n	8002fc2 <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	8979      	ldrh	r1, [r7, #10]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fa95 	bl	80034ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f942 	bl	8003250 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e07b      	b.n	80030ce <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	781a      	ldrb	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d034      	beq.n	800307a <HAL_I2C_Mem_Write+0x1de>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d130      	bne.n	800307a <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	2200      	movs	r2, #0
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f8d4 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e04d      	b.n	80030ce <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	2bff      	cmp	r3, #255	; 0xff
 800303a:	d90e      	bls.n	800305a <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	22ff      	movs	r2, #255	; 0xff
 8003040:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	b2da      	uxtb	r2, r3
 8003048:	8979      	ldrh	r1, [r7, #10]
 800304a:	2300      	movs	r3, #0
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa4a 	bl	80034ec <I2C_TransferConfig>
 8003058:	e00f      	b.n	800307a <HAL_I2C_Mem_Write+0x1de>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	b2da      	uxtb	r2, r3
 800306a:	8979      	ldrh	r1, [r7, #10]
 800306c:	2300      	movs	r3, #0
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fa39 	bl	80034ec <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d19e      	bne.n	8002fc2 <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f921 	bl	80032d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e01a      	b.n	80030ce <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2220      	movs	r2, #32
 800309e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <HAL_I2C_Mem_Write+0x240>)
 80030ac:	400b      	ands	r3, r1
 80030ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e000      	b.n	80030ce <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 80030cc:	2302      	movs	r3, #2
  }
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	0800b034 	.word	0x0800b034
 80030dc:	fe00e800 	.word	0xfe00e800

080030e0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4603      	mov	r3, r0
 80030f0:	817b      	strh	r3, [r7, #10]
 80030f2:	460b      	mov	r3, r1
 80030f4:	813b      	strh	r3, [r7, #8]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	8979      	ldrh	r1, [r7, #10]
 8003100:	4b20      	ldr	r3, [pc, #128]	; (8003184 <I2C_RequestMemoryWrite+0xa4>)
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f9ef 	bl	80034ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	69b9      	ldr	r1, [r7, #24]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f89c 	bl	8003250 <I2C_WaitOnTXISFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e02c      	b.n	800317c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003128:	893b      	ldrh	r3, [r7, #8]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	629a      	str	r2, [r3, #40]	; 0x28
 8003132:	e015      	b.n	8003160 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003134:	893b      	ldrh	r3, [r7, #8]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	b29b      	uxth	r3, r3
 800313a:	b2da      	uxtb	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	69b9      	ldr	r1, [r7, #24]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f882 	bl	8003250 <I2C_WaitOnTXISFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e012      	b.n	800317c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003156:	893b      	ldrh	r3, [r7, #8]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2200      	movs	r2, #0
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f830 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	80002000 	.word	0x80002000

08003188 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b02      	cmp	r3, #2
 800319c:	d103      	bne.n	80031a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2200      	movs	r2, #0
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d007      	beq.n	80031c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	619a      	str	r2, [r3, #24]
  }
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e0:	e022      	b.n	8003228 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d01e      	beq.n	8003228 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ea:	f7fe fbed 	bl	80019c8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d113      	bne.n	8003228 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e00f      	b.n	8003248 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4013      	ands	r3, r2
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	429a      	cmp	r2, r3
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	429a      	cmp	r2, r3
 8003244:	d0cd      	beq.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800325c:	e02c      	b.n	80032b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f8dc 	bl	8003420 <I2C_IsAcknowledgeFailed>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e02a      	b.n	80032c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d01e      	beq.n	80032b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327a:	f7fe fba5 	bl	80019c8 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	429a      	cmp	r2, r3
 8003288:	d302      	bcc.n	8003290 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d113      	bne.n	80032b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	f043 0220 	orr.w	r2, r3, #32
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e007      	b.n	80032c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d1cb      	bne.n	800325e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032dc:	e028      	b.n	8003330 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f89c 	bl	8003420 <I2C_IsAcknowledgeFailed>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e026      	b.n	8003340 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7fe fb69 	bl	80019c8 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d113      	bne.n	8003330 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e007      	b.n	8003340 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b20      	cmp	r3, #32
 800333c:	d1cf      	bne.n	80032de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003354:	e055      	b.n	8003402 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f860 	bl	8003420 <I2C_IsAcknowledgeFailed>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e053      	b.n	8003412 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b20      	cmp	r3, #32
 8003376:	d129      	bne.n	80033cc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b04      	cmp	r3, #4
 8003384:	d105      	bne.n	8003392 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e03f      	b.n	8003412 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2220      	movs	r2, #32
 8003398:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80033a6:	400b      	ands	r3, r1
 80033a8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e022      	b.n	8003412 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033cc:	f7fe fafc 	bl	80019c8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d302      	bcc.n	80033e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10f      	bne.n	8003402 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e007      	b.n	8003412 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b04      	cmp	r3, #4
 800340e:	d1a2      	bne.n	8003356 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	fe00e800 	.word	0xfe00e800

08003420 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b10      	cmp	r3, #16
 8003438:	d151      	bne.n	80034de <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800343a:	e022      	b.n	8003482 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d01e      	beq.n	8003482 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003444:	f7fe fac0 	bl	80019c8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	429a      	cmp	r2, r3
 8003452:	d302      	bcc.n	800345a <I2C_IsAcknowledgeFailed+0x3a>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d113      	bne.n	8003482 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	f043 0220 	orr.w	r2, r3, #32
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e02e      	b.n	80034e0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b20      	cmp	r3, #32
 800348e:	d1d5      	bne.n	800343c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2210      	movs	r2, #16
 8003496:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2220      	movs	r2, #32
 800349e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff fe71 	bl	8003188 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <I2C_IsAcknowledgeFailed+0xc8>)
 80034b2:	400b      	ands	r3, r1
 80034b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	f043 0204 	orr.w	r2, r3, #4
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	fe00e800 	.word	0xfe00e800

080034ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	817b      	strh	r3, [r7, #10]
 80034fa:	4613      	mov	r3, r2
 80034fc:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a28      	ldr	r2, [pc, #160]	; (80035a4 <I2C_TransferConfig+0xb8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d009      	beq.n	800351c <I2C_TransferConfig+0x30>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a26      	ldr	r2, [pc, #152]	; (80035a8 <I2C_TransferConfig+0xbc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <I2C_TransferConfig+0x30>
 8003512:	f641 1139 	movw	r1, #6457	; 0x1939
 8003516:	4825      	ldr	r0, [pc, #148]	; (80035ac <I2C_TransferConfig+0xc0>)
 8003518:	f7fd fea5 	bl	8001266 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003522:	d00b      	beq.n	800353c <I2C_TransferConfig+0x50>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800352a:	d007      	beq.n	800353c <I2C_TransferConfig+0x50>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <I2C_TransferConfig+0x50>
 8003532:	f641 113a 	movw	r1, #6458	; 0x193a
 8003536:	481d      	ldr	r0, [pc, #116]	; (80035ac <I2C_TransferConfig+0xc0>)
 8003538:	f7fd fe95 	bl	8001266 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	4a1c      	ldr	r2, [pc, #112]	; (80035b0 <I2C_TransferConfig+0xc4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00f      	beq.n	8003564 <I2C_TransferConfig+0x78>
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4a1b      	ldr	r2, [pc, #108]	; (80035b4 <I2C_TransferConfig+0xc8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00b      	beq.n	8003564 <I2C_TransferConfig+0x78>
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <I2C_TransferConfig+0xcc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <I2C_TransferConfig+0x78>
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <I2C_TransferConfig+0x78>
 800355a:	f641 113b 	movw	r1, #6459	; 0x193b
 800355e:	4813      	ldr	r0, [pc, #76]	; (80035ac <I2C_TransferConfig+0xc0>)
 8003560:	f7fd fe81 	bl	8001266 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	0d5b      	lsrs	r3, r3, #21
 800356e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <I2C_TransferConfig+0xd0>)
 8003574:	430b      	orrs	r3, r1
 8003576:	43db      	mvns	r3, r3
 8003578:	ea02 0103 	and.w	r1, r2, r3
 800357c:	897b      	ldrh	r3, [r7, #10]
 800357e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003582:	7a7b      	ldrb	r3, [r7, #9]
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	431a      	orrs	r2, r3
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	431a      	orrs	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40005400 	.word	0x40005400
 80035a8:	40005c00 	.word	0x40005c00
 80035ac:	0800b034 	.word	0x0800b034
 80035b0:	80004000 	.word	0x80004000
 80035b4:	80002400 	.word	0x80002400
 80035b8:	80002000 	.word	0x80002000
 80035bc:	03ff63ff 	.word	0x03ff63ff

080035c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2d      	ldr	r2, [pc, #180]	; (8003684 <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d008      	beq.n	80035e6 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2b      	ldr	r2, [pc, #172]	; (8003688 <HAL_I2CEx_ConfigAnalogFilter+0xc8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 80035de:	2164      	movs	r1, #100	; 0x64
 80035e0:	482a      	ldr	r0, [pc, #168]	; (800368c <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 80035e2:	f7fd fe40 	bl	8001266 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f2:	d003      	beq.n	80035fc <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 80035f4:	2165      	movs	r1, #101	; 0x65
 80035f6:	4825      	ldr	r0, [pc, #148]	; (800368c <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 80035f8:	f7fd fe35 	bl	8001266 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b20      	cmp	r3, #32
 8003606:	d138      	bne.n	800367a <HAL_I2CEx_ConfigAnalogFilter+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_I2CEx_ConfigAnalogFilter+0x56>
 8003612:	2302      	movs	r3, #2
 8003614:	e032      	b.n	800367c <HAL_I2CEx_ConfigAnalogFilter+0xbc>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2224      	movs	r2, #36	; 0x24
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003644:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6819      	ldr	r1, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_I2CEx_ConfigAnalogFilter+0xbc>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40005400 	.word	0x40005400
 8003688:	40005c00 	.word	0x40005c00
 800368c:	0800b06c 	.word	0x0800b06c

08003690 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a2c      	ldr	r2, [pc, #176]	; (8003750 <HAL_I2CEx_ConfigDigitalFilter+0xc0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d008      	beq.n	80036b6 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <HAL_I2CEx_ConfigDigitalFilter+0xc4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d003      	beq.n	80036b6 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 80036ae:	2192      	movs	r1, #146	; 0x92
 80036b0:	4829      	ldr	r0, [pc, #164]	; (8003758 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80036b2:	f7fd fdd8 	bl	8001266 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b0f      	cmp	r3, #15
 80036ba:	d903      	bls.n	80036c4 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 80036bc:	2193      	movs	r1, #147	; 0x93
 80036be:	4826      	ldr	r0, [pc, #152]	; (8003758 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80036c0:	f7fd fdd1 	bl	8001266 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d139      	bne.n	8003744 <HAL_I2CEx_ConfigDigitalFilter+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 80036da:	2302      	movs	r3, #2
 80036dc:	e033      	b.n	8003746 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2224      	movs	r2, #36	; 0x24
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800370c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e000      	b.n	8003746 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40005400 	.word	0x40005400
 8003754:	40005c00 	.word	0x40005c00
 8003758:	0800b06c 	.word	0x0800b06c

0800375c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003760:	4b04      	ldr	r3, [pc, #16]	; (8003774 <HAL_PWREx_GetVoltageRange+0x18>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40007000 	.word	0x40007000

08003778 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003786:	d007      	beq.n	8003798 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378e:	d003      	beq.n	8003798 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003790:	21a8      	movs	r1, #168	; 0xa8
 8003792:	4826      	ldr	r0, [pc, #152]	; (800382c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003794:	f7fd fd67 	bl	8001266 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379e:	d130      	bne.n	8003802 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037a0:	4b23      	ldr	r3, [pc, #140]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ac:	d038      	beq.n	8003820 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80037b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037be:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2232      	movs	r2, #50	; 0x32
 80037c4:	fb02 f303 	mul.w	r3, r2, r3
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0c9b      	lsrs	r3, r3, #18
 80037d0:	3301      	adds	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037d4:	e002      	b.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d102      	bne.n	80037f0 <HAL_PWREx_ControlVoltageScaling+0x78>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f2      	bne.n	80037d6 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fc:	d110      	bne.n	8003820 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e00f      	b.n	8003822 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	d007      	beq.n	8003820 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003818:	4a05      	ldr	r2, [pc, #20]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800381a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800381e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	0800b0a8 	.word	0x0800b0a8
 8003830:	40007000 	.word	0x40007000
 8003834:	20000000 	.word	0x20000000
 8003838:	431bde83 	.word	0x431bde83

0800383c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f000 bd65 	b.w	800431a <HAL_RCC_OscConfig+0xade>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d028      	beq.n	80038aa <HAL_RCC_OscConfig+0x6e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d122      	bne.n	80038aa <HAL_RCC_OscConfig+0x6e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d11c      	bne.n	80038aa <HAL_RCC_OscConfig+0x6e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d116      	bne.n	80038aa <HAL_RCC_OscConfig+0x6e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d110      	bne.n	80038aa <HAL_RCC_OscConfig+0x6e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <HAL_RCC_OscConfig+0x6e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d104      	bne.n	80038aa <HAL_RCC_OscConfig+0x6e>
 80038a0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80038a4:	48a3      	ldr	r0, [pc, #652]	; (8003b34 <HAL_RCC_OscConfig+0x2f8>)
 80038a6:	f7fd fcde 	bl	8001266 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038aa:	4ba3      	ldr	r3, [pc, #652]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038b4:	4ba0      	ldr	r3, [pc, #640]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 813f 	beq.w	8003b4a <HAL_RCC_OscConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCC_OscConfig+0xaa>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d004      	beq.n	80038e6 <HAL_RCC_OscConfig+0xaa>
 80038dc:	f240 11ab 	movw	r1, #427	; 0x1ab
 80038e0:	4894      	ldr	r0, [pc, #592]	; (8003b34 <HAL_RCC_OscConfig+0x2f8>)
 80038e2:	f7fd fcc0 	bl	8001266 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	2bff      	cmp	r3, #255	; 0xff
 80038ec:	d904      	bls.n	80038f8 <HAL_RCC_OscConfig+0xbc>
 80038ee:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80038f2:	4890      	ldr	r0, [pc, #576]	; (8003b34 <HAL_RCC_OscConfig+0x2f8>)
 80038f4:	f7fd fcb7 	bl	8001266 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d030      	beq.n	8003962 <HAL_RCC_OscConfig+0x126>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	2b10      	cmp	r3, #16
 8003906:	d02c      	beq.n	8003962 <HAL_RCC_OscConfig+0x126>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	2b20      	cmp	r3, #32
 800390e:	d028      	beq.n	8003962 <HAL_RCC_OscConfig+0x126>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	2b30      	cmp	r3, #48	; 0x30
 8003916:	d024      	beq.n	8003962 <HAL_RCC_OscConfig+0x126>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d020      	beq.n	8003962 <HAL_RCC_OscConfig+0x126>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	2b50      	cmp	r3, #80	; 0x50
 8003926:	d01c      	beq.n	8003962 <HAL_RCC_OscConfig+0x126>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	2b60      	cmp	r3, #96	; 0x60
 800392e:	d018      	beq.n	8003962 <HAL_RCC_OscConfig+0x126>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	2b70      	cmp	r3, #112	; 0x70
 8003936:	d014      	beq.n	8003962 <HAL_RCC_OscConfig+0x126>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	2b80      	cmp	r3, #128	; 0x80
 800393e:	d010      	beq.n	8003962 <HAL_RCC_OscConfig+0x126>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	2b90      	cmp	r3, #144	; 0x90
 8003946:	d00c      	beq.n	8003962 <HAL_RCC_OscConfig+0x126>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	2ba0      	cmp	r3, #160	; 0xa0
 800394e:	d008      	beq.n	8003962 <HAL_RCC_OscConfig+0x126>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	2bb0      	cmp	r3, #176	; 0xb0
 8003956:	d004      	beq.n	8003962 <HAL_RCC_OscConfig+0x126>
 8003958:	f240 11ad 	movw	r1, #429	; 0x1ad
 800395c:	4875      	ldr	r0, [pc, #468]	; (8003b34 <HAL_RCC_OscConfig+0x2f8>)
 800395e:	f7fd fc82 	bl	8001266 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <HAL_RCC_OscConfig+0x13c>
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b0c      	cmp	r3, #12
 800396c:	f040 808f 	bne.w	8003a8e <HAL_RCC_OscConfig+0x252>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b01      	cmp	r3, #1
 8003974:	f040 808b 	bne.w	8003a8e <HAL_RCC_OscConfig+0x252>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003978:	4b6f      	ldr	r3, [pc, #444]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <HAL_RCC_OscConfig+0x156>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d102      	bne.n	8003992 <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f000 bcc4 	b.w	800431a <HAL_RCC_OscConfig+0xade>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1a      	ldr	r2, [r3, #32]
 8003996:	4b68      	ldr	r3, [pc, #416]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d004      	beq.n	80039ac <HAL_RCC_OscConfig+0x170>
 80039a2:	4b65      	ldr	r3, [pc, #404]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039aa:	e005      	b.n	80039b8 <HAL_RCC_OscConfig+0x17c>
 80039ac:	4b62      	ldr	r3, [pc, #392]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 80039ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d224      	bcs.n	8003a06 <HAL_RCC_OscConfig+0x1ca>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fef5 	bl	80047b0 <RCC_SetFlashLatencyFromMSIRange>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_RCC_OscConfig+0x196>
          {
            return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f000 bca4 	b.w	800431a <HAL_RCC_OscConfig+0xade>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d2:	4b59      	ldr	r3, [pc, #356]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a58      	ldr	r2, [pc, #352]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 80039d8:	f043 0308 	orr.w	r3, r3, #8
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b56      	ldr	r3, [pc, #344]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4953      	ldr	r1, [pc, #332]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039f0:	4b51      	ldr	r3, [pc, #324]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	494e      	ldr	r1, [pc, #312]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
 8003a04:	e026      	b.n	8003a54 <HAL_RCC_OscConfig+0x218>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a06:	4b4c      	ldr	r3, [pc, #304]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a4b      	ldr	r2, [pc, #300]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003a0c:	f043 0308 	orr.w	r3, r3, #8
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b49      	ldr	r3, [pc, #292]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4946      	ldr	r1, [pc, #280]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a24:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	4941      	ldr	r1, [pc, #260]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <HAL_RCC_OscConfig+0x218>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 feb4 	bl	80047b0 <RCC_SetFlashLatencyFromMSIRange>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_OscConfig+0x218>
            {
              return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f000 bc63 	b.w	800431a <HAL_RCC_OscConfig+0xade>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a54:	f000 fdea 	bl	800462c <HAL_RCC_GetSysClockFreq>
 8003a58:	4601      	mov	r1, r0
 8003a5a:	4b37      	ldr	r3, [pc, #220]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	4a35      	ldr	r2, [pc, #212]	; (8003b3c <HAL_RCC_OscConfig+0x300>)
 8003a66:	5cd3      	ldrb	r3, [r2, r3]
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	fa21 f303 	lsr.w	r3, r1, r3
 8003a70:	4a33      	ldr	r2, [pc, #204]	; (8003b40 <HAL_RCC_OscConfig+0x304>)
 8003a72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a74:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <HAL_RCC_OscConfig+0x308>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fd ff55 	bl	8001928 <HAL_InitTick>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d05f      	beq.n	8003b48 <HAL_RCC_OscConfig+0x30c>
        {
          return status;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	f000 bc46 	b.w	800431a <HAL_RCC_OscConfig+0xade>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d033      	beq.n	8003afe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a96:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a27      	ldr	r2, [pc, #156]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aa2:	f7fd ff91 	bl	80019c8 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa8:	e009      	b.n	8003abe <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aaa:	f7fd ff8d 	bl	80019c8 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d902      	bls.n	8003abe <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	f000 bc2e 	b.w	800431a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0ef      	beq.n	8003aaa <HAL_RCC_OscConfig+0x26e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aca:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1a      	ldr	r2, [pc, #104]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	4915      	ldr	r1, [pc, #84]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ae8:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	4910      	ldr	r1, [pc, #64]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]
 8003afc:	e025      	b.n	8003b4a <HAL_RCC_OscConfig+0x30e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b0a:	f7fd ff5d 	bl	80019c8 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x2e8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b12:	f7fd ff59 	bl	80019c8 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e3fa      	b.n	800431a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <HAL_RCC_OscConfig+0x2fc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x2d6>
 8003b30:	e00b      	b.n	8003b4a <HAL_RCC_OscConfig+0x30e>
 8003b32:	bf00      	nop
 8003b34:	0800b0e4 	.word	0x0800b0e4
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	0800c7bc 	.word	0x0800c7bc
 8003b40:	20000000 	.word	0x20000000
 8003b44:	20000004 	.word	0x20000004
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d07e      	beq.n	8003c54 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00e      	beq.n	8003b7c <HAL_RCC_OscConfig+0x340>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b66:	d009      	beq.n	8003b7c <HAL_RCC_OscConfig+0x340>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b70:	d004      	beq.n	8003b7c <HAL_RCC_OscConfig+0x340>
 8003b72:	f240 2119 	movw	r1, #537	; 0x219
 8003b76:	489b      	ldr	r0, [pc, #620]	; (8003de4 <HAL_RCC_OscConfig+0x5a8>)
 8003b78:	f7fd fb75 	bl	8001266 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d005      	beq.n	8003b8e <HAL_RCC_OscConfig+0x352>
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b0c      	cmp	r3, #12
 8003b86:	d10e      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x36a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d10b      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x36a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8e:	4b96      	ldr	r3, [pc, #600]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d05b      	beq.n	8003c52 <HAL_RCC_OscConfig+0x416>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d157      	bne.n	8003c52 <HAL_RCC_OscConfig+0x416>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e3b9      	b.n	800431a <HAL_RCC_OscConfig+0xade>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bae:	d106      	bne.n	8003bbe <HAL_RCC_OscConfig+0x382>
 8003bb0:	4b8d      	ldr	r3, [pc, #564]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a8c      	ldr	r2, [pc, #560]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	e01d      	b.n	8003bfa <HAL_RCC_OscConfig+0x3be>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCC_OscConfig+0x3a6>
 8003bc8:	4b87      	ldr	r3, [pc, #540]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a86      	ldr	r2, [pc, #536]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003bce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b84      	ldr	r3, [pc, #528]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a83      	ldr	r2, [pc, #524]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	e00b      	b.n	8003bfa <HAL_RCC_OscConfig+0x3be>
 8003be2:	4b81      	ldr	r3, [pc, #516]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a80      	ldr	r2, [pc, #512]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b7e      	ldr	r3, [pc, #504]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a7d      	ldr	r2, [pc, #500]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d013      	beq.n	8003c2a <HAL_RCC_OscConfig+0x3ee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fd fee1 	bl	80019c8 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x3e0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0a:	f7fd fedd 	bl	80019c8 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b64      	cmp	r3, #100	; 0x64
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x3e0>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e37e      	b.n	800431a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1c:	4b72      	ldr	r3, [pc, #456]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x3ce>
 8003c28:	e014      	b.n	8003c54 <HAL_RCC_OscConfig+0x418>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd fecd 	bl	80019c8 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x408>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c32:	f7fd fec9 	bl	80019c8 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b64      	cmp	r3, #100	; 0x64
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e36a      	b.n	800431a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c44:	4b68      	ldr	r3, [pc, #416]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_RCC_OscConfig+0x3f6>
 8003c50:	e000      	b.n	8003c54 <HAL_RCC_OscConfig+0x418>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d077      	beq.n	8003d50 <HAL_RCC_OscConfig+0x514>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d009      	beq.n	8003c7c <HAL_RCC_OscConfig+0x440>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c70:	d004      	beq.n	8003c7c <HAL_RCC_OscConfig+0x440>
 8003c72:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8003c76:	485b      	ldr	r0, [pc, #364]	; (8003de4 <HAL_RCC_OscConfig+0x5a8>)
 8003c78:	f7fd faf5 	bl	8001266 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b7f      	cmp	r3, #127	; 0x7f
 8003c82:	d904      	bls.n	8003c8e <HAL_RCC_OscConfig+0x452>
 8003c84:	f240 214d 	movw	r1, #589	; 0x24d
 8003c88:	4856      	ldr	r0, [pc, #344]	; (8003de4 <HAL_RCC_OscConfig+0x5a8>)
 8003c8a:	f7fd faec 	bl	8001266 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x464>
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d119      	bne.n	8003cce <HAL_RCC_OscConfig+0x492>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d116      	bne.n	8003cce <HAL_RCC_OscConfig+0x492>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca0:	4b51      	ldr	r3, [pc, #324]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x47c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e330      	b.n	800431a <HAL_RCC_OscConfig+0xade>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb8:	4b4b      	ldr	r3, [pc, #300]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	4948      	ldr	r1, [pc, #288]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ccc:	e040      	b.n	8003d50 <HAL_RCC_OscConfig+0x514>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d023      	beq.n	8003d1e <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd6:	4b44      	ldr	r3, [pc, #272]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a43      	ldr	r2, [pc, #268]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7fd fe71 	bl	80019c8 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cea:	f7fd fe6d 	bl	80019c8 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e30e      	b.n	800431a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cfc:	4b3a      	ldr	r3, [pc, #232]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x4ae>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d08:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	4934      	ldr	r1, [pc, #208]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
 8003d1c:	e018      	b.n	8003d50 <HAL_RCC_OscConfig+0x514>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1e:	4b32      	ldr	r3, [pc, #200]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a31      	ldr	r2, [pc, #196]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fd fe4d 	bl	80019c8 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x508>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fd fe49 	bl	80019c8 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x508>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e2ea      	b.n	800431a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d44:	4b28      	ldr	r3, [pc, #160]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d04e      	beq.n	8003dfa <HAL_RCC_OscConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_OscConfig+0x53a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d004      	beq.n	8003d76 <HAL_RCC_OscConfig+0x53a>
 8003d6c:	f240 218d 	movw	r1, #653	; 0x28d
 8003d70:	481c      	ldr	r0, [pc, #112]	; (8003de4 <HAL_RCC_OscConfig+0x5a8>)
 8003d72:	f7fd fa78 	bl	8001266 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x57c>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7e:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d84:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8e:	f7fd fe1b 	bl	80019c8 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d96:	f7fd fe17 	bl	80019c8 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e2b8      	b.n	800431a <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003da8:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0ef      	beq.n	8003d96 <HAL_RCC_OscConfig+0x55a>
 8003db6:	e020      	b.n	8003dfa <HAL_RCC_OscConfig+0x5be>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <HAL_RCC_OscConfig+0x5ac>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fd fdfe 	bl	80019c8 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dce:	e00d      	b.n	8003dec <HAL_RCC_OscConfig+0x5b0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd0:	f7fd fdfa 	bl	80019c8 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d906      	bls.n	8003dec <HAL_RCC_OscConfig+0x5b0>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e29b      	b.n	800431a <HAL_RCC_OscConfig+0xade>
 8003de2:	bf00      	nop
 8003de4:	0800b0e4 	.word	0x0800b0e4
 8003de8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dec:	4b84      	ldr	r3, [pc, #528]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1ea      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x594>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80b2 	beq.w	8003f6c <HAL_RCC_OscConfig+0x730>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00c      	beq.n	8003e2e <HAL_RCC_OscConfig+0x5f2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d008      	beq.n	8003e2e <HAL_RCC_OscConfig+0x5f2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b05      	cmp	r3, #5
 8003e22:	d004      	beq.n	8003e2e <HAL_RCC_OscConfig+0x5f2>
 8003e24:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003e28:	4876      	ldr	r0, [pc, #472]	; (8004004 <HAL_RCC_OscConfig+0x7c8>)
 8003e2a:	f7fd fa1c 	bl	8001266 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e2e:	4b74      	ldr	r3, [pc, #464]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10d      	bne.n	8003e56 <HAL_RCC_OscConfig+0x61a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3a:	4b71      	ldr	r3, [pc, #452]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	4a70      	ldr	r2, [pc, #448]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6593      	str	r3, [r2, #88]	; 0x58
 8003e46:	4b6e      	ldr	r3, [pc, #440]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e52:	2301      	movs	r3, #1
 8003e54:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e56:	4b6c      	ldr	r3, [pc, #432]	; (8004008 <HAL_RCC_OscConfig+0x7cc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d118      	bne.n	8003e94 <HAL_RCC_OscConfig+0x658>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e62:	4b69      	ldr	r3, [pc, #420]	; (8004008 <HAL_RCC_OscConfig+0x7cc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a68      	ldr	r2, [pc, #416]	; (8004008 <HAL_RCC_OscConfig+0x7cc>)
 8003e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6e:	f7fd fdab 	bl	80019c8 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e76:	f7fd fda7 	bl	80019c8 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e248      	b.n	800431a <HAL_RCC_OscConfig+0xade>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e88:	4b5f      	ldr	r3, [pc, #380]	; (8004008 <HAL_RCC_OscConfig+0x7cc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCC_OscConfig+0x63a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d108      	bne.n	8003eae <HAL_RCC_OscConfig+0x672>
 8003e9c:	4b58      	ldr	r3, [pc, #352]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	4a57      	ldr	r2, [pc, #348]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eac:	e024      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6bc>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d110      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x69c>
 8003eb6:	4b52      	ldr	r3, [pc, #328]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	4a50      	ldr	r2, [pc, #320]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003ebe:	f043 0304 	orr.w	r3, r3, #4
 8003ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ec6:	4b4e      	ldr	r3, [pc, #312]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	4a4c      	ldr	r2, [pc, #304]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ed6:	e00f      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6bc>
 8003ed8:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	4a48      	ldr	r2, [pc, #288]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003ee0:	f023 0301 	bic.w	r3, r3, #1
 8003ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ee8:	4b45      	ldr	r3, [pc, #276]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	4a44      	ldr	r2, [pc, #272]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003ef0:	f023 0304 	bic.w	r3, r3, #4
 8003ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d016      	beq.n	8003f2e <HAL_RCC_OscConfig+0x6f2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fd fd62 	bl	80019c8 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_OscConfig+0x6e2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f08:	f7fd fd5e 	bl	80019c8 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x6e2>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e1fd      	b.n	800431a <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1e:	4b38      	ldr	r3, [pc, #224]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ed      	beq.n	8003f08 <HAL_RCC_OscConfig+0x6cc>
 8003f2c:	e015      	b.n	8003f5a <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2e:	f7fd fd4b 	bl	80019c8 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x710>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fd fd47 	bl	80019c8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x710>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e1e6      	b.n	800431a <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f4c:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ed      	bne.n	8003f36 <HAL_RCC_OscConfig+0x6fa>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f5a:	7ffb      	ldrb	r3, [r7, #31]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCC_OscConfig+0x730>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f60:	4b27      	ldr	r3, [pc, #156]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	4a26      	ldr	r2, [pc, #152]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d050      	beq.n	800401a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_OscConfig+0x756>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d004      	beq.n	8003f92 <HAL_RCC_OscConfig+0x756>
 8003f88:	f240 3145 	movw	r1, #837	; 0x345
 8003f8c:	481d      	ldr	r0, [pc, #116]	; (8004004 <HAL_RCC_OscConfig+0x7c8>)
 8003f8e:	f7fd f96a 	bl	8001266 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01c      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f9a:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa0:	4a17      	ldr	r2, [pc, #92]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003faa:	f7fd fd0d 	bl	80019c8 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x788>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb2:	f7fd fd09 	bl	80019c8 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x788>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e1aa      	b.n	800431a <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0ef      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x776>
 8003fd2:	e022      	b.n	800401a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fd4:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <HAL_RCC_OscConfig+0x7c4>)
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fd fcf0 	bl	80019c8 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fea:	e00f      	b.n	800400c <HAL_RCC_OscConfig+0x7d0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fec:	f7fd fcec 	bl	80019c8 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d908      	bls.n	800400c <HAL_RCC_OscConfig+0x7d0>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e18d      	b.n	800431a <HAL_RCC_OscConfig+0xade>
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	0800b0e4 	.word	0x0800b0e4
 8004008:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800400c:	4ba2      	ldr	r3, [pc, #648]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 800400e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e8      	bne.n	8003fec <HAL_RCC_OscConfig+0x7b0>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00c      	beq.n	800403c <HAL_RCC_OscConfig+0x800>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	2b01      	cmp	r3, #1
 8004028:	d008      	beq.n	800403c <HAL_RCC_OscConfig+0x800>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	2b02      	cmp	r3, #2
 8004030:	d004      	beq.n	800403c <HAL_RCC_OscConfig+0x800>
 8004032:	f240 316e 	movw	r1, #878	; 0x36e
 8004036:	4899      	ldr	r0, [pc, #612]	; (800429c <HAL_RCC_OscConfig+0xa60>)
 8004038:	f7fd f915 	bl	8001266 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8169 	beq.w	8004318 <HAL_RCC_OscConfig+0xadc>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	2b02      	cmp	r3, #2
 800404c:	f040 8131 	bne.w	80042b2 <HAL_RCC_OscConfig+0xa76>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d010      	beq.n	800407a <HAL_RCC_OscConfig+0x83e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d00c      	beq.n	800407a <HAL_RCC_OscConfig+0x83e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	2b02      	cmp	r3, #2
 8004066:	d008      	beq.n	800407a <HAL_RCC_OscConfig+0x83e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	2b03      	cmp	r3, #3
 800406e:	d004      	beq.n	800407a <HAL_RCC_OscConfig+0x83e>
 8004070:	f240 3176 	movw	r1, #886	; 0x376
 8004074:	4889      	ldr	r0, [pc, #548]	; (800429c <HAL_RCC_OscConfig+0xa60>)
 8004076:	f7fd f8f6 	bl	8001266 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_RCC_OscConfig+0x84e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	2b08      	cmp	r3, #8
 8004088:	d904      	bls.n	8004094 <HAL_RCC_OscConfig+0x858>
 800408a:	f240 3177 	movw	r1, #887	; 0x377
 800408e:	4883      	ldr	r0, [pc, #524]	; (800429c <HAL_RCC_OscConfig+0xa60>)
 8004090:	f7fd f8e9 	bl	8001266 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004098:	2b07      	cmp	r3, #7
 800409a:	d903      	bls.n	80040a4 <HAL_RCC_OscConfig+0x868>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a0:	2b56      	cmp	r3, #86	; 0x56
 80040a2:	d904      	bls.n	80040ae <HAL_RCC_OscConfig+0x872>
 80040a4:	f44f 715e 	mov.w	r1, #888	; 0x378
 80040a8:	487c      	ldr	r0, [pc, #496]	; (800429c <HAL_RCC_OscConfig+0xa60>)
 80040aa:	f7fd f8dc 	bl	8001266 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d903      	bls.n	80040be <HAL_RCC_OscConfig+0x882>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	2b1f      	cmp	r3, #31
 80040bc:	d904      	bls.n	80040c8 <HAL_RCC_OscConfig+0x88c>
 80040be:	f240 317a 	movw	r1, #890	; 0x37a
 80040c2:	4876      	ldr	r0, [pc, #472]	; (800429c <HAL_RCC_OscConfig+0xa60>)
 80040c4:	f7fd f8cf 	bl	8001266 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d010      	beq.n	80040f2 <HAL_RCC_OscConfig+0x8b6>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d00c      	beq.n	80040f2 <HAL_RCC_OscConfig+0x8b6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040dc:	2b06      	cmp	r3, #6
 80040de:	d008      	beq.n	80040f2 <HAL_RCC_OscConfig+0x8b6>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d004      	beq.n	80040f2 <HAL_RCC_OscConfig+0x8b6>
 80040e8:	f44f 715f 	mov.w	r1, #892	; 0x37c
 80040ec:	486b      	ldr	r0, [pc, #428]	; (800429c <HAL_RCC_OscConfig+0xa60>)
 80040ee:	f7fd f8ba 	bl	8001266 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d010      	beq.n	800411c <HAL_RCC_OscConfig+0x8e0>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d00c      	beq.n	800411c <HAL_RCC_OscConfig+0x8e0>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b06      	cmp	r3, #6
 8004108:	d008      	beq.n	800411c <HAL_RCC_OscConfig+0x8e0>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	2b08      	cmp	r3, #8
 8004110:	d004      	beq.n	800411c <HAL_RCC_OscConfig+0x8e0>
 8004112:	f240 317d 	movw	r1, #893	; 0x37d
 8004116:	4861      	ldr	r0, [pc, #388]	; (800429c <HAL_RCC_OscConfig+0xa60>)
 8004118:	f7fd f8a5 	bl	8001266 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800411c:	4b5e      	ldr	r3, [pc, #376]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f003 0203 	and.w	r2, r3, #3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	429a      	cmp	r2, r3
 800412e:	d12c      	bne.n	800418a <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	3b01      	subs	r3, #1
 800413c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800413e:	429a      	cmp	r2, r3
 8004140:	d123      	bne.n	800418a <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d11b      	bne.n	800418a <HAL_RCC_OscConfig+0x94e>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d113      	bne.n	800418a <HAL_RCC_OscConfig+0x94e>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	3b01      	subs	r3, #1
 8004170:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d109      	bne.n	800418a <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	3b01      	subs	r3, #1
 8004184:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d067      	beq.n	800425a <HAL_RCC_OscConfig+0xa1e>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b0c      	cmp	r3, #12
 800418e:	d062      	beq.n	8004256 <HAL_RCC_OscConfig+0xa1a>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004190:	4b41      	ldr	r3, [pc, #260]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_OscConfig+0x964>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0bc      	b.n	800431a <HAL_RCC_OscConfig+0xade>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041a0:	4b3d      	ldr	r3, [pc, #244]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3c      	ldr	r2, [pc, #240]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 80041a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041ac:	f7fd fc0c 	bl	80019c8 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x98a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fd fc08 	bl	80019c8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x98a>
              {
                return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e0a9      	b.n	800431a <HAL_RCC_OscConfig+0xade>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c6:	4b34      	ldr	r3, [pc, #208]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x978>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d2:	4b31      	ldr	r3, [pc, #196]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	4b32      	ldr	r3, [pc, #200]	; (80042a0 <HAL_RCC_OscConfig+0xa64>)
 80041d8:	4013      	ands	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041e2:	3a01      	subs	r2, #1
 80041e4:	0112      	lsls	r2, r2, #4
 80041e6:	4311      	orrs	r1, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ec:	0212      	lsls	r2, r2, #8
 80041ee:	4311      	orrs	r1, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041f4:	0852      	lsrs	r2, r2, #1
 80041f6:	3a01      	subs	r2, #1
 80041f8:	0552      	lsls	r2, r2, #21
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004200:	0852      	lsrs	r2, r2, #1
 8004202:	3a01      	subs	r2, #1
 8004204:	0652      	lsls	r2, r2, #25
 8004206:	4311      	orrs	r1, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800420c:	06d2      	lsls	r2, r2, #27
 800420e:	430a      	orrs	r2, r1
 8004210:	4921      	ldr	r1, [pc, #132]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 8004212:	4313      	orrs	r3, r2
 8004214:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 800421c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004220:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004222:	4b1d      	ldr	r3, [pc, #116]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 8004228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800422e:	f7fd fbcb 	bl	80019c8 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0xa0c>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004236:	f7fd fbc7 	bl	80019c8 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0xa0c>
              {
                return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e068      	b.n	800431a <HAL_RCC_OscConfig+0xade>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004248:	4b13      	ldr	r3, [pc, #76]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x9fa>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004254:	e060      	b.n	8004318 <HAL_RCC_OscConfig+0xadc>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e05f      	b.n	800431a <HAL_RCC_OscConfig+0xade>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425a:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d158      	bne.n	8004318 <HAL_RCC_OscConfig+0xadc>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a0b      	ldr	r2, [pc, #44]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 800426c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004270:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4a08      	ldr	r2, [pc, #32]	; (8004298 <HAL_RCC_OscConfig+0xa5c>)
 8004278:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800427e:	f7fd fba3 	bl	80019c8 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004284:	e00e      	b.n	80042a4 <HAL_RCC_OscConfig+0xa68>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004286:	f7fd fb9f 	bl	80019c8 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d907      	bls.n	80042a4 <HAL_RCC_OscConfig+0xa68>
            {
              return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e040      	b.n	800431a <HAL_RCC_OscConfig+0xade>
 8004298:	40021000 	.word	0x40021000
 800429c:	0800b0e4 	.word	0x0800b0e4
 80042a0:	019d808c 	.word	0x019d808c
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a4:	4b1f      	ldr	r3, [pc, #124]	; (8004324 <HAL_RCC_OscConfig+0xae8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ea      	beq.n	8004286 <HAL_RCC_OscConfig+0xa4a>
 80042b0:	e032      	b.n	8004318 <HAL_RCC_OscConfig+0xadc>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b0c      	cmp	r3, #12
 80042b6:	d02d      	beq.n	8004314 <HAL_RCC_OscConfig+0xad8>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_RCC_OscConfig+0xae8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a19      	ldr	r2, [pc, #100]	; (8004324 <HAL_RCC_OscConfig+0xae8>)
 80042be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c2:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042c4:	4b17      	ldr	r3, [pc, #92]	; (8004324 <HAL_RCC_OscConfig+0xae8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <HAL_RCC_OscConfig+0xaa0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <HAL_RCC_OscConfig+0xae8>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a13      	ldr	r2, [pc, #76]	; (8004324 <HAL_RCC_OscConfig+0xae8>)
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <HAL_RCC_OscConfig+0xae8>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a10      	ldr	r2, [pc, #64]	; (8004324 <HAL_RCC_OscConfig+0xae8>)
 80042e2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80042e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ea:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd fb6c 	bl	80019c8 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xaca>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fd fb68 	bl	80019c8 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xaca>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e009      	b.n	800431a <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004306:	4b07      	ldr	r3, [pc, #28]	; (8004324 <HAL_RCC_OscConfig+0xae8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0xab8>
 8004312:	e001      	b.n	8004318 <HAL_RCC_OscConfig+0xadc>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_RCC_OscConfig+0xade>
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000

08004328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e168      	b.n	800460e <HAL_RCC_ClockConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_RCC_ClockConfig+0x24>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b0f      	cmp	r3, #15
 800434a:	d904      	bls.n	8004356 <HAL_RCC_ClockConfig+0x2e>
 800434c:	f240 4162 	movw	r1, #1122	; 0x462
 8004350:	4873      	ldr	r0, [pc, #460]	; (8004520 <HAL_RCC_ClockConfig+0x1f8>)
 8004352:	f7fc ff88 	bl	8001266 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d010      	beq.n	800437e <HAL_RCC_ClockConfig+0x56>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d00d      	beq.n	800437e <HAL_RCC_ClockConfig+0x56>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d00a      	beq.n	800437e <HAL_RCC_ClockConfig+0x56>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d007      	beq.n	800437e <HAL_RCC_ClockConfig+0x56>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d004      	beq.n	800437e <HAL_RCC_ClockConfig+0x56>
 8004374:	f240 4163 	movw	r1, #1123	; 0x463
 8004378:	4869      	ldr	r0, [pc, #420]	; (8004520 <HAL_RCC_ClockConfig+0x1f8>)
 800437a:	f7fc ff74 	bl	8001266 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800437e:	4b69      	ldr	r3, [pc, #420]	; (8004524 <HAL_RCC_ClockConfig+0x1fc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d910      	bls.n	80043ae <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438c:	4b65      	ldr	r3, [pc, #404]	; (8004524 <HAL_RCC_ClockConfig+0x1fc>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f023 0207 	bic.w	r2, r3, #7
 8004394:	4963      	ldr	r1, [pc, #396]	; (8004524 <HAL_RCC_ClockConfig+0x1fc>)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439c:	4b61      	ldr	r3, [pc, #388]	; (8004524 <HAL_RCC_ClockConfig+0x1fc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e12f      	b.n	800460e <HAL_RCC_ClockConfig+0x2e6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d061      	beq.n	800447e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d010      	beq.n	80043e4 <HAL_RCC_ClockConfig+0xbc>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d00c      	beq.n	80043e4 <HAL_RCC_ClockConfig+0xbc>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d008      	beq.n	80043e4 <HAL_RCC_ClockConfig+0xbc>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d004      	beq.n	80043e4 <HAL_RCC_ClockConfig+0xbc>
 80043da:	f240 417a 	movw	r1, #1146	; 0x47a
 80043de:	4850      	ldr	r0, [pc, #320]	; (8004520 <HAL_RCC_ClockConfig+0x1f8>)
 80043e0:	f7fc ff41 	bl	8001266 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d107      	bne.n	80043fc <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ec:	4b4e      	ldr	r3, [pc, #312]	; (8004528 <HAL_RCC_ClockConfig+0x200>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d121      	bne.n	800443c <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e108      	b.n	800460e <HAL_RCC_ClockConfig+0x2e6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d107      	bne.n	8004414 <HAL_RCC_ClockConfig+0xec>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004404:	4b48      	ldr	r3, [pc, #288]	; (8004528 <HAL_RCC_ClockConfig+0x200>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d115      	bne.n	800443c <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0fc      	b.n	800460e <HAL_RCC_ClockConfig+0x2e6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d107      	bne.n	800442c <HAL_RCC_ClockConfig+0x104>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800441c:	4b42      	ldr	r3, [pc, #264]	; (8004528 <HAL_RCC_ClockConfig+0x200>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d109      	bne.n	800443c <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0f0      	b.n	800460e <HAL_RCC_ClockConfig+0x2e6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800442c:	4b3e      	ldr	r3, [pc, #248]	; (8004528 <HAL_RCC_ClockConfig+0x200>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0e8      	b.n	800460e <HAL_RCC_ClockConfig+0x2e6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800443c:	4b3a      	ldr	r3, [pc, #232]	; (8004528 <HAL_RCC_ClockConfig+0x200>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f023 0203 	bic.w	r2, r3, #3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4937      	ldr	r1, [pc, #220]	; (8004528 <HAL_RCC_ClockConfig+0x200>)
 800444a:	4313      	orrs	r3, r2
 800444c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444e:	f7fd fabb 	bl	80019c8 <HAL_GetTick>
 8004452:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004454:	e00a      	b.n	800446c <HAL_RCC_ClockConfig+0x144>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004456:	f7fd fab7 	bl	80019c8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	; 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e0d0      	b.n	800460e <HAL_RCC_ClockConfig+0x2e6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446c:	4b2e      	ldr	r3, [pc, #184]	; (8004528 <HAL_RCC_ClockConfig+0x200>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 020c 	and.w	r2, r3, #12
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	429a      	cmp	r2, r3
 800447c:	d1eb      	bne.n	8004456 <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d031      	beq.n	80044ee <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d024      	beq.n	80044dc <HAL_RCC_ClockConfig+0x1b4>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b80      	cmp	r3, #128	; 0x80
 8004498:	d020      	beq.n	80044dc <HAL_RCC_ClockConfig+0x1b4>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b90      	cmp	r3, #144	; 0x90
 80044a0:	d01c      	beq.n	80044dc <HAL_RCC_ClockConfig+0x1b4>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2ba0      	cmp	r3, #160	; 0xa0
 80044a8:	d018      	beq.n	80044dc <HAL_RCC_ClockConfig+0x1b4>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2bb0      	cmp	r3, #176	; 0xb0
 80044b0:	d014      	beq.n	80044dc <HAL_RCC_ClockConfig+0x1b4>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2bc0      	cmp	r3, #192	; 0xc0
 80044b8:	d010      	beq.n	80044dc <HAL_RCC_ClockConfig+0x1b4>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2bd0      	cmp	r3, #208	; 0xd0
 80044c0:	d00c      	beq.n	80044dc <HAL_RCC_ClockConfig+0x1b4>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2be0      	cmp	r3, #224	; 0xe0
 80044c8:	d008      	beq.n	80044dc <HAL_RCC_ClockConfig+0x1b4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2bf0      	cmp	r3, #240	; 0xf0
 80044d0:	d004      	beq.n	80044dc <HAL_RCC_ClockConfig+0x1b4>
 80044d2:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 80044d6:	4812      	ldr	r0, [pc, #72]	; (8004520 <HAL_RCC_ClockConfig+0x1f8>)
 80044d8:	f7fc fec5 	bl	8001266 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <HAL_RCC_ClockConfig+0x200>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	490f      	ldr	r1, [pc, #60]	; (8004528 <HAL_RCC_ClockConfig+0x200>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <HAL_RCC_ClockConfig+0x1fc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d217      	bcs.n	800452c <HAL_RCC_ClockConfig+0x204>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fc:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_RCC_ClockConfig+0x1fc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 0207 	bic.w	r2, r3, #7
 8004504:	4907      	ldr	r1, [pc, #28]	; (8004524 <HAL_RCC_ClockConfig+0x1fc>)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCC_ClockConfig+0x1fc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d008      	beq.n	800452c <HAL_RCC_ClockConfig+0x204>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e077      	b.n	800460e <HAL_RCC_ClockConfig+0x2e6>
 800451e:	bf00      	nop
 8004520:	0800b0e4 	.word	0x0800b0e4
 8004524:	40022000 	.word	0x40022000
 8004528:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d025      	beq.n	8004584 <HAL_RCC_ClockConfig+0x25c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d018      	beq.n	8004572 <HAL_RCC_ClockConfig+0x24a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004548:	d013      	beq.n	8004572 <HAL_RCC_ClockConfig+0x24a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004552:	d00e      	beq.n	8004572 <HAL_RCC_ClockConfig+0x24a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800455c:	d009      	beq.n	8004572 <HAL_RCC_ClockConfig+0x24a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004566:	d004      	beq.n	8004572 <HAL_RCC_ClockConfig+0x24a>
 8004568:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 800456c:	482a      	ldr	r0, [pc, #168]	; (8004618 <HAL_RCC_ClockConfig+0x2f0>)
 800456e:	f7fc fe7a 	bl	8001266 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004572:	4b2a      	ldr	r3, [pc, #168]	; (800461c <HAL_RCC_ClockConfig+0x2f4>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	4927      	ldr	r1, [pc, #156]	; (800461c <HAL_RCC_ClockConfig+0x2f4>)
 8004580:	4313      	orrs	r3, r2
 8004582:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d026      	beq.n	80045de <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d018      	beq.n	80045ca <HAL_RCC_ClockConfig+0x2a2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a0:	d013      	beq.n	80045ca <HAL_RCC_ClockConfig+0x2a2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80045aa:	d00e      	beq.n	80045ca <HAL_RCC_ClockConfig+0x2a2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045b4:	d009      	beq.n	80045ca <HAL_RCC_ClockConfig+0x2a2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045be:	d004      	beq.n	80045ca <HAL_RCC_ClockConfig+0x2a2>
 80045c0:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80045c4:	4814      	ldr	r0, [pc, #80]	; (8004618 <HAL_RCC_ClockConfig+0x2f0>)
 80045c6:	f7fc fe4e 	bl	8001266 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ca:	4b14      	ldr	r3, [pc, #80]	; (800461c <HAL_RCC_ClockConfig+0x2f4>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4910      	ldr	r1, [pc, #64]	; (800461c <HAL_RCC_ClockConfig+0x2f4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045de:	f000 f825 	bl	800462c <HAL_RCC_GetSysClockFreq>
 80045e2:	4601      	mov	r1, r0
 80045e4:	4b0d      	ldr	r3, [pc, #52]	; (800461c <HAL_RCC_ClockConfig+0x2f4>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <HAL_RCC_ClockConfig+0x2f8>)
 80045f0:	5cd3      	ldrb	r3, [r2, r3]
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	fa21 f303 	lsr.w	r3, r1, r3
 80045fa:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <HAL_RCC_ClockConfig+0x2fc>)
 80045fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <HAL_RCC_ClockConfig+0x300>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fd f990 	bl	8001928 <HAL_InitTick>
 8004608:	4603      	mov	r3, r0
 800460a:	72fb      	strb	r3, [r7, #11]

  return status;
 800460c:	7afb      	ldrb	r3, [r7, #11]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	0800b0e4 	.word	0x0800b0e4
 800461c:	40021000 	.word	0x40021000
 8004620:	0800c7bc 	.word	0x0800c7bc
 8004624:	20000000 	.word	0x20000000
 8004628:	20000004 	.word	0x20000004

0800462c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	b089      	sub	sp, #36	; 0x24
 8004630:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800463a:	4b3d      	ldr	r3, [pc, #244]	; (8004730 <HAL_RCC_GetSysClockFreq+0x104>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004644:	4b3a      	ldr	r3, [pc, #232]	; (8004730 <HAL_RCC_GetSysClockFreq+0x104>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x34>
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b0c      	cmp	r3, #12
 8004658:	d121      	bne.n	800469e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d11e      	bne.n	800469e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004660:	4b33      	ldr	r3, [pc, #204]	; (8004730 <HAL_RCC_GetSysClockFreq+0x104>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d107      	bne.n	800467c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800466c:	4b30      	ldr	r3, [pc, #192]	; (8004730 <HAL_RCC_GetSysClockFreq+0x104>)
 800466e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004672:	0a1b      	lsrs	r3, r3, #8
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e005      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800467c:	4b2c      	ldr	r3, [pc, #176]	; (8004730 <HAL_RCC_GetSysClockFreq+0x104>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004688:	4a2a      	ldr	r2, [pc, #168]	; (8004734 <HAL_RCC_GetSysClockFreq+0x108>)
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004690:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10d      	bne.n	80046b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d102      	bne.n	80046aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046a4:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	e004      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046b0:	4b22      	ldr	r3, [pc, #136]	; (800473c <HAL_RCC_GetSysClockFreq+0x110>)
 80046b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d133      	bne.n	8004722 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ba:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <HAL_RCC_GetSysClockFreq+0x104>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d002      	beq.n	80046d0 <HAL_RCC_GetSysClockFreq+0xa4>
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d003      	beq.n	80046d6 <HAL_RCC_GetSysClockFreq+0xaa>
 80046ce:	e005      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046d2:	617b      	str	r3, [r7, #20]
      break;
 80046d4:	e005      	b.n	80046e2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046d6:	4b19      	ldr	r3, [pc, #100]	; (800473c <HAL_RCC_GetSysClockFreq+0x110>)
 80046d8:	617b      	str	r3, [r7, #20]
      break;
 80046da:	e002      	b.n	80046e2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	617b      	str	r3, [r7, #20]
      break;
 80046e0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e2:	4b13      	ldr	r3, [pc, #76]	; (8004730 <HAL_RCC_GetSysClockFreq+0x104>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	3301      	adds	r3, #1
 80046ee:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <HAL_RCC_GetSysClockFreq+0x104>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	fb02 f203 	mul.w	r2, r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	fbb2 f3f3 	udiv	r3, r2, r3
 8004706:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCC_GetSysClockFreq+0x104>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	0e5b      	lsrs	r3, r3, #25
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	3301      	adds	r3, #1
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004722:	69bb      	ldr	r3, [r7, #24]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3724      	adds	r7, #36	; 0x24
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40021000 	.word	0x40021000
 8004734:	0800c7d4 	.word	0x0800c7d4
 8004738:	00f42400 	.word	0x00f42400
 800473c:	007a1200 	.word	0x007a1200

08004740 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004744:	4b03      	ldr	r3, [pc, #12]	; (8004754 <HAL_RCC_GetHCLKFreq+0x14>)
 8004746:	681b      	ldr	r3, [r3, #0]
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000000 	.word	0x20000000

08004758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800475c:	f7ff fff0 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8004760:	4601      	mov	r1, r0
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	4a04      	ldr	r2, [pc, #16]	; (8004780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800476e:	5cd3      	ldrb	r3, [r2, r3]
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40021000 	.word	0x40021000
 8004780:	0800c7cc 	.word	0x0800c7cc

08004784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004788:	f7ff ffda 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 800478c:	4601      	mov	r1, r0
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0adb      	lsrs	r3, r3, #11
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4a04      	ldr	r2, [pc, #16]	; (80047ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800479a:	5cd3      	ldrb	r3, [r2, r3]
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000
 80047ac:	0800c7cc 	.word	0x0800c7cc

080047b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047b8:	2300      	movs	r3, #0
 80047ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047bc:	4b2a      	ldr	r3, [pc, #168]	; (8004868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047c8:	f7fe ffc8 	bl	800375c <HAL_PWREx_GetVoltageRange>
 80047cc:	6178      	str	r0, [r7, #20]
 80047ce:	e014      	b.n	80047fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	4a24      	ldr	r2, [pc, #144]	; (8004868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047da:	6593      	str	r3, [r2, #88]	; 0x58
 80047dc:	4b22      	ldr	r3, [pc, #136]	; (8004868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047e8:	f7fe ffb8 	bl	800375c <HAL_PWREx_GetVoltageRange>
 80047ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047ee:	4b1e      	ldr	r3, [pc, #120]	; (8004868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	4a1d      	ldr	r2, [pc, #116]	; (8004868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004800:	d10b      	bne.n	800481a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b80      	cmp	r3, #128	; 0x80
 8004806:	d919      	bls.n	800483c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2ba0      	cmp	r3, #160	; 0xa0
 800480c:	d902      	bls.n	8004814 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800480e:	2302      	movs	r3, #2
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	e013      	b.n	800483c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004814:	2301      	movs	r3, #1
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	e010      	b.n	800483c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b80      	cmp	r3, #128	; 0x80
 800481e:	d902      	bls.n	8004826 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004820:	2303      	movs	r3, #3
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	e00a      	b.n	800483c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b80      	cmp	r3, #128	; 0x80
 800482a:	d102      	bne.n	8004832 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800482c:	2302      	movs	r3, #2
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	e004      	b.n	800483c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b70      	cmp	r3, #112	; 0x70
 8004836:	d101      	bne.n	800483c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004838:	2301      	movs	r3, #1
 800483a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 0207 	bic.w	r2, r3, #7
 8004844:	4909      	ldr	r1, [pc, #36]	; (800486c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800484c:	4b07      	ldr	r3, [pc, #28]	; (800486c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	429a      	cmp	r2, r3
 8004858:	d001      	beq.n	800485e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40021000 	.word	0x40021000
 800486c:	40022000 	.word	0x40022000

08004870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004878:	2300      	movs	r3, #0
 800487a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800487c:	2300      	movs	r3, #0
 800487e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d14b      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d145      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d13f      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d139      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d133      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d12d      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d127      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d121      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d11b      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d115      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10f      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d109      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800491c:	21cb      	movs	r1, #203	; 0xcb
 800491e:	487c      	ldr	r0, [pc, #496]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004920:	f7fc fca1 	bl	8001266 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492c:	2b00      	cmp	r3, #0
 800492e:	d041      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00d      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004940:	d008      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800494a:	d003      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 800494c:	21d3      	movs	r1, #211	; 0xd3
 800494e:	4870      	ldr	r0, [pc, #448]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004950:	f7fc fc89 	bl	8001266 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004958:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800495c:	d005      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800495e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004962:	d015      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004968:	e00f      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800496a:	4b6a      	ldr	r3, [pc, #424]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	4a69      	ldr	r2, [pc, #420]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004974:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004976:	e00c      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x122>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3304      	adds	r3, #4
 800497c:	2100      	movs	r1, #0
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fad8 	bl	8004f34 <RCCEx_PLLSAI1_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004988:	e003      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x122>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	74fb      	strb	r3, [r7, #19]
      break;
 800498e:	e000      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x122>
      break;
 8004990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004998:	4b5e      	ldr	r3, [pc, #376]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	495b      	ldr	r1, [pc, #364]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049ae:	e001      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b0:	7cfb      	ldrb	r3, [r7, #19]
 80049b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80b8 	beq.w	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c2:	2300      	movs	r3, #0
 80049c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d013      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d6:	d00e      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e0:	d009      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ea:	d004      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80049ec:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80049f0:	4847      	ldr	r0, [pc, #284]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80049f2:	f7fc fc38 	bl	8001266 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a06:	2300      	movs	r3, #0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00d      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0c:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a10:	4a40      	ldr	r2, [pc, #256]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a16:	6593      	str	r3, [r2, #88]	; 0x58
 8004a18:	4b3e      	ldr	r3, [pc, #248]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a24:	2301      	movs	r3, #1
 8004a26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a28:	4b3b      	ldr	r3, [pc, #236]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a3a      	ldr	r2, [pc, #232]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a34:	f7fc ffc8 	bl	80019c8 <HAL_GetTick>
 8004a38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a3a:	e009      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3c:	f7fc ffc4 	bl	80019c8 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d902      	bls.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        ret = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	74fb      	strb	r3, [r7, #19]
        break;
 8004a4e:	e005      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a50:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ef      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      }
    }

    if(ret == HAL_OK)
 8004a5c:	7cfb      	ldrb	r3, [r7, #19]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d15c      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a62:	4b2c      	ldr	r3, [pc, #176]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01e      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d019      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a7e:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a88:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a90:	4a20      	ldr	r2, [pc, #128]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa0:	4a1c      	ldr	r2, [pc, #112]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004aaa:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d016      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fc ff84 	bl	80019c8 <HAL_GetTick>
 8004ac0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ac2:	e00b      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f7fc ff80 	bl	80019c8 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d902      	bls.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x26c>
          {
            ret = HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	74fb      	strb	r3, [r7, #19]
            break;
 8004ada:	e006      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004adc:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0ec      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x254>
          }
        }
      }

      if(ret == HAL_OK)
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10b      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x298>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afe:	4905      	ldr	r1, [pc, #20]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b06:	e00b      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	74bb      	strb	r3, [r7, #18]
 8004b0c:	e008      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004b0e:	bf00      	nop
 8004b10:	0800b11c 	.word	0x0800b11c
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	7cfb      	ldrb	r3, [r7, #19]
 8004b1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b20:	7c7b      	ldrb	r3, [r7, #17]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d105      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b26:	4ba5      	ldr	r3, [pc, #660]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	4aa4      	ldr	r2, [pc, #656]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01f      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d010      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d00c      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d008      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d004      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8004b5e:	f240 119b 	movw	r1, #411	; 0x19b
 8004b62:	4897      	ldr	r0, [pc, #604]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004b64:	f7fc fb7f 	bl	8001266 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b68:	4b94      	ldr	r3, [pc, #592]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6e:	f023 0203 	bic.w	r2, r3, #3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	4991      	ldr	r1, [pc, #580]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01f      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d010      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d00c      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d008      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d004      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004baa:	f240 11a5 	movw	r1, #421	; 0x1a5
 8004bae:	4884      	ldr	r0, [pc, #528]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004bb0:	f7fc fb59 	bl	8001266 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bb4:	4b81      	ldr	r3, [pc, #516]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	f023 020c 	bic.w	r2, r3, #12
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	497e      	ldr	r1, [pc, #504]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d022      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d013      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be6:	d00e      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfa:	d004      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8004bfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004c00:	486f      	ldr	r0, [pc, #444]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004c02:	f7fc fb30 	bl	8001266 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c06:	4b6d      	ldr	r3, [pc, #436]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	4969      	ldr	r1, [pc, #420]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d022      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d013      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c38:	d00e      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c42:	d009      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c48:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c4c:	d004      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004c4e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004c52:	485b      	ldr	r0, [pc, #364]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004c54:	f7fc fb07 	bl	8001266 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c58:	4b58      	ldr	r3, [pc, #352]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	4955      	ldr	r1, [pc, #340]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d022      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d013      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8a:	d00e      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c94:	d009      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c9e:	d004      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ca0:	f240 11e9 	movw	r1, #489	; 0x1e9
 8004ca4:	4846      	ldr	r0, [pc, #280]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004ca6:	f7fc fade 	bl	8001266 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004caa:	4b44      	ldr	r3, [pc, #272]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	4940      	ldr	r1, [pc, #256]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01d      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cdc:	d009      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce6:	d004      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004ce8:	f240 11f1 	movw	r1, #497	; 0x1f1
 8004cec:	4834      	ldr	r0, [pc, #208]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004cee:	f7fc faba 	bl	8001266 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cf2:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	492e      	ldr	r1, [pc, #184]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01d      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00e      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d24:	d009      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d2e:	d004      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d30:	f240 2109 	movw	r1, #521	; 0x209
 8004d34:	4822      	ldr	r0, [pc, #136]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004d36:	f7fc fa96 	bl	8001266 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	491c      	ldr	r1, [pc, #112]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d045      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d013      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d6c:	d00e      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d76:	d009      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004d80:	d004      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004d82:	f240 2122 	movw	r1, #546	; 0x222
 8004d86:	480e      	ldr	r0, [pc, #56]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004d88:	f7fc fa6d 	bl	8001266 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	4908      	ldr	r1, [pc, #32]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004daa:	d10b      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dac:	4b03      	ldr	r3, [pc, #12]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4a02      	ldr	r2, [pc, #8]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004db6:	60d3      	str	r3, [r2, #12]
 8004db8:	e016      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8004dba:	bf00      	nop
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	0800b11c 	.word	0x0800b11c
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f8ad 	bl	8004f34 <RCCEx_PLLSAI1_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dde:	7cfb      	ldrb	r3, [r7, #19]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x578>
        {
          /* set overall return value */
          status = ret;
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d040      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x606>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d013      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e04:	d00e      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e0e:	d009      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e14:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004e18:	d004      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004e1a:	f44f 711a 	mov.w	r1, #616	; 0x268
 8004e1e:	4843      	ldr	r0, [pc, #268]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004e20:	f7fc fa21 	bl	8001266 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e24:	4b42      	ldr	r3, [pc, #264]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	493f      	ldr	r1, [pc, #252]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e42:	d106      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e44:	4b3a      	ldr	r3, [pc, #232]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4a39      	ldr	r2, [pc, #228]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e4e:	60d3      	str	r3, [r2, #12]
 8004e50:	e011      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x606>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e5a:	d10c      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x606>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	2101      	movs	r1, #1
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f866 	bl	8004f34 <RCCEx_PLLSAI1_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e6c:	7cfb      	ldrb	r3, [r7, #19]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x606>
      {
        /* set overall return value */
        status = ret;
 8004e72:	7cfb      	ldrb	r3, [r7, #19]
 8004e74:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d02f      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x672>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00e      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e92:	d009      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e9c:	d004      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8004e9e:	f44f 7122 	mov.w	r1, #648	; 0x288
 8004ea2:	4822      	ldr	r0, [pc, #136]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004ea4:	f7fc f9df 	bl	8001266 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ea8:	4b21      	ldr	r3, [pc, #132]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb6:	491e      	ldr	r1, [pc, #120]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ec6:	d10c      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	2102      	movs	r1, #2
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f830 	bl	8004f34 <RCCEx_PLLSAI1_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x672>
      {
        /* set overall return value */
        status = ret;
 8004ede:	7cfb      	ldrb	r3, [r7, #19]
 8004ee0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d018      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d004      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8004f00:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8004f04:	4809      	ldr	r0, [pc, #36]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004f06:	f7fc f9ae 	bl	8001266 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f0a:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f10:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f18:	4905      	ldr	r1, [pc, #20]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f20:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	0800b11c 	.word	0x0800b11c
 8004f30:	40021000 	.word	0x40021000

08004f34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d010      	beq.n	8004f6c <RCCEx_PLLSAI1_Config+0x38>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d00c      	beq.n	8004f6c <RCCEx_PLLSAI1_Config+0x38>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d008      	beq.n	8004f6c <RCCEx_PLLSAI1_Config+0x38>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d004      	beq.n	8004f6c <RCCEx_PLLSAI1_Config+0x38>
 8004f62:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8004f66:	48a3      	ldr	r0, [pc, #652]	; (80051f4 <RCCEx_PLLSAI1_Config+0x2c0>)
 8004f68:	f7fc f97d 	bl	8001266 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <RCCEx_PLLSAI1_Config+0x48>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d904      	bls.n	8004f86 <RCCEx_PLLSAI1_Config+0x52>
 8004f7c:	f640 3161 	movw	r1, #2913	; 0xb61
 8004f80:	489c      	ldr	r0, [pc, #624]	; (80051f4 <RCCEx_PLLSAI1_Config+0x2c0>)
 8004f82:	f7fc f970 	bl	8001266 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b07      	cmp	r3, #7
 8004f8c:	d903      	bls.n	8004f96 <RCCEx_PLLSAI1_Config+0x62>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b56      	cmp	r3, #86	; 0x56
 8004f94:	d904      	bls.n	8004fa0 <RCCEx_PLLSAI1_Config+0x6c>
 8004f96:	f640 3162 	movw	r1, #2914	; 0xb62
 8004f9a:	4896      	ldr	r0, [pc, #600]	; (80051f4 <RCCEx_PLLSAI1_Config+0x2c0>)
 8004f9c:	f7fc f963 	bl	8001266 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <RCCEx_PLLSAI1_Config+0x90>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <RCCEx_PLLSAI1_Config+0x90>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <RCCEx_PLLSAI1_Config+0xa0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d004      	beq.n	8004fde <RCCEx_PLLSAI1_Config+0xaa>
 8004fd4:	f640 3163 	movw	r1, #2915	; 0xb63
 8004fd8:	4886      	ldr	r0, [pc, #536]	; (80051f4 <RCCEx_PLLSAI1_Config+0x2c0>)
 8004fda:	f7fc f944 	bl	8001266 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fde:	4b86      	ldr	r3, [pc, #536]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d018      	beq.n	800501c <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fea:	4b83      	ldr	r3, [pc, #524]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0203 	and.w	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d10d      	bne.n	8005016 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
       ||
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005002:	4b7d      	ldr	r3, [pc, #500]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
       ||
 8005012:	429a      	cmp	r2, r3
 8005014:	d044      	beq.n	80050a0 <RCCEx_PLLSAI1_Config+0x16c>
#endif
      )
    {
      status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
 800501a:	e041      	b.n	80050a0 <RCCEx_PLLSAI1_Config+0x16c>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d00c      	beq.n	800503e <RCCEx_PLLSAI1_Config+0x10a>
 8005024:	2b03      	cmp	r3, #3
 8005026:	d013      	beq.n	8005050 <RCCEx_PLLSAI1_Config+0x11c>
 8005028:	2b01      	cmp	r3, #1
 800502a:	d120      	bne.n	800506e <RCCEx_PLLSAI1_Config+0x13a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800502c:	4b72      	ldr	r3, [pc, #456]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d11d      	bne.n	8005074 <RCCEx_PLLSAI1_Config+0x140>
      {
        status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800503c:	e01a      	b.n	8005074 <RCCEx_PLLSAI1_Config+0x140>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800503e:	4b6e      	ldr	r3, [pc, #440]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005046:	2b00      	cmp	r3, #0
 8005048:	d116      	bne.n	8005078 <RCCEx_PLLSAI1_Config+0x144>
      {
        status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800504e:	e013      	b.n	8005078 <RCCEx_PLLSAI1_Config+0x144>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005050:	4b69      	ldr	r3, [pc, #420]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10f      	bne.n	800507c <RCCEx_PLLSAI1_Config+0x148>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800505c:	4b66      	ldr	r3, [pc, #408]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d109      	bne.n	800507c <RCCEx_PLLSAI1_Config+0x148>
        {
          status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800506c:	e006      	b.n	800507c <RCCEx_PLLSAI1_Config+0x148>
    default:
      status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
      break;
 8005072:	e004      	b.n	800507e <RCCEx_PLLSAI1_Config+0x14a>
      break;
 8005074:	bf00      	nop
 8005076:	e002      	b.n	800507e <RCCEx_PLLSAI1_Config+0x14a>
      break;
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <RCCEx_PLLSAI1_Config+0x14a>
      break;
 800507c:	bf00      	nop
    }

    if(status == HAL_OK)
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10d      	bne.n	80050a0 <RCCEx_PLLSAI1_Config+0x16c>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005084:	4b5c      	ldr	r3, [pc, #368]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6819      	ldr	r1, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	3b01      	subs	r3, #1
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	430b      	orrs	r3, r1
 800509a:	4957      	ldr	r1, [pc, #348]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 800509c:	4313      	orrs	r3, r2
 800509e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f040 80ba 	bne.w	800521c <RCCEx_PLLSAI1_Config+0x2e8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050a8:	4b53      	ldr	r3, [pc, #332]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a52      	ldr	r2, [pc, #328]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 80050ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b4:	f7fc fc88 	bl	80019c8 <HAL_GetTick>
 80050b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050ba:	e009      	b.n	80050d0 <RCCEx_PLLSAI1_Config+0x19c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050bc:	f7fc fc84 	bl	80019c8 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d902      	bls.n	80050d0 <RCCEx_PLLSAI1_Config+0x19c>
      {
        status = HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	73fb      	strb	r3, [r7, #15]
        break;
 80050ce:	e005      	b.n	80050dc <RCCEx_PLLSAI1_Config+0x1a8>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050d0:	4b49      	ldr	r3, [pc, #292]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ef      	bne.n	80050bc <RCCEx_PLLSAI1_Config+0x188>
      }
    }

    if(status == HAL_OK)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f040 809c 	bne.w	800521c <RCCEx_PLLSAI1_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d11d      	bne.n	8005126 <RCCEx_PLLSAI1_Config+0x1f2>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d903      	bls.n	80050fa <RCCEx_PLLSAI1_Config+0x1c6>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b1f      	cmp	r3, #31
 80050f8:	d904      	bls.n	8005104 <RCCEx_PLLSAI1_Config+0x1d0>
 80050fa:	f640 31b6 	movw	r1, #2998	; 0xbb6
 80050fe:	483d      	ldr	r0, [pc, #244]	; (80051f4 <RCCEx_PLLSAI1_Config+0x2c0>)
 8005100:	f7fc f8b1 	bl	8001266 <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005104:	4b3c      	ldr	r3, [pc, #240]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800510c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6892      	ldr	r2, [r2, #8]
 8005114:	0211      	lsls	r1, r2, #8
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	68d2      	ldr	r2, [r2, #12]
 800511a:	06d2      	lsls	r2, r2, #27
 800511c:	430a      	orrs	r2, r1
 800511e:	4936      	ldr	r1, [pc, #216]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005120:	4313      	orrs	r3, r2
 8005122:	610b      	str	r3, [r1, #16]
 8005124:	e051      	b.n	80051ca <RCCEx_PLLSAI1_Config+0x296>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d127      	bne.n	800517c <RCCEx_PLLSAI1_Config+0x248>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d010      	beq.n	8005156 <RCCEx_PLLSAI1_Config+0x222>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b04      	cmp	r3, #4
 800513a:	d00c      	beq.n	8005156 <RCCEx_PLLSAI1_Config+0x222>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b06      	cmp	r3, #6
 8005142:	d008      	beq.n	8005156 <RCCEx_PLLSAI1_Config+0x222>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d004      	beq.n	8005156 <RCCEx_PLLSAI1_Config+0x222>
 800514c:	f640 31da 	movw	r1, #3034	; 0xbda
 8005150:	4828      	ldr	r0, [pc, #160]	; (80051f4 <RCCEx_PLLSAI1_Config+0x2c0>)
 8005152:	f7fc f888 	bl	8001266 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005156:	4b28      	ldr	r3, [pc, #160]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800515e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6892      	ldr	r2, [r2, #8]
 8005166:	0211      	lsls	r1, r2, #8
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6912      	ldr	r2, [r2, #16]
 800516c:	0852      	lsrs	r2, r2, #1
 800516e:	3a01      	subs	r2, #1
 8005170:	0552      	lsls	r2, r2, #21
 8005172:	430a      	orrs	r2, r1
 8005174:	4920      	ldr	r1, [pc, #128]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005176:	4313      	orrs	r3, r2
 8005178:	610b      	str	r3, [r1, #16]
 800517a:	e026      	b.n	80051ca <RCCEx_PLLSAI1_Config+0x296>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d010      	beq.n	80051a6 <RCCEx_PLLSAI1_Config+0x272>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d00c      	beq.n	80051a6 <RCCEx_PLLSAI1_Config+0x272>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	2b06      	cmp	r3, #6
 8005192:	d008      	beq.n	80051a6 <RCCEx_PLLSAI1_Config+0x272>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d004      	beq.n	80051a6 <RCCEx_PLLSAI1_Config+0x272>
 800519c:	f640 31ec 	movw	r1, #3052	; 0xbec
 80051a0:	4814      	ldr	r0, [pc, #80]	; (80051f4 <RCCEx_PLLSAI1_Config+0x2c0>)
 80051a2:	f7fc f860 	bl	8001266 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051a6:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6892      	ldr	r2, [r2, #8]
 80051b6:	0211      	lsls	r1, r2, #8
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6952      	ldr	r2, [r2, #20]
 80051bc:	0852      	lsrs	r2, r2, #1
 80051be:	3a01      	subs	r2, #1
 80051c0:	0652      	lsls	r2, r2, #25
 80051c2:	430a      	orrs	r2, r1
 80051c4:	490c      	ldr	r1, [pc, #48]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <RCCEx_PLLSAI1_Config+0x2c4>)
 80051d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d6:	f7fc fbf7 	bl	80019c8 <HAL_GetTick>
 80051da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051dc:	e00e      	b.n	80051fc <RCCEx_PLLSAI1_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051de:	f7fc fbf3 	bl	80019c8 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d907      	bls.n	80051fc <RCCEx_PLLSAI1_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	73fb      	strb	r3, [r7, #15]
          break;
 80051f0:	e00a      	b.n	8005208 <RCCEx_PLLSAI1_Config+0x2d4>
 80051f2:	bf00      	nop
 80051f4:	0800b11c 	.word	0x0800b11c
 80051f8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051fc:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <RCCEx_PLLSAI1_Config+0x2f4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0ea      	beq.n	80051de <RCCEx_PLLSAI1_Config+0x2aa>
        }
      }

      if(status == HAL_OK)
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <RCCEx_PLLSAI1_Config+0x2e8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <RCCEx_PLLSAI1_Config+0x2f4>)
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	4904      	ldr	r1, [pc, #16]	; (8005228 <RCCEx_PLLSAI1_Config+0x2f4>)
 8005218:	4313      	orrs	r3, r2
 800521a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800521c:	7bfb      	ldrb	r3, [r7, #15]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40021000 	.word	0x40021000

0800522c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e1d6      	b.n	80055ec <HAL_SPI_Init+0x3c0>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a90      	ldr	r2, [pc, #576]	; (8005484 <HAL_SPI_Init+0x258>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d009      	beq.n	800525c <HAL_SPI_Init+0x30>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a8e      	ldr	r2, [pc, #568]	; (8005488 <HAL_SPI_Init+0x25c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_SPI_Init+0x30>
 8005252:	f240 1147 	movw	r1, #327	; 0x147
 8005256:	488d      	ldr	r0, [pc, #564]	; (800548c <HAL_SPI_Init+0x260>)
 8005258:	f7fc f805 	bl	8001266 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d009      	beq.n	8005278 <HAL_SPI_Init+0x4c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800526c:	d004      	beq.n	8005278 <HAL_SPI_Init+0x4c>
 800526e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005272:	4886      	ldr	r0, [pc, #536]	; (800548c <HAL_SPI_Init+0x260>)
 8005274:	f7fb fff7 	bl	8001266 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00e      	beq.n	800529e <HAL_SPI_Init+0x72>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005288:	d009      	beq.n	800529e <HAL_SPI_Init+0x72>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005292:	d004      	beq.n	800529e <HAL_SPI_Init+0x72>
 8005294:	f240 1149 	movw	r1, #329	; 0x149
 8005298:	487c      	ldr	r0, [pc, #496]	; (800548c <HAL_SPI_Init+0x260>)
 800529a:	f7fb ffe4 	bl	8001266 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052a6:	d040      	beq.n	800532a <HAL_SPI_Init+0xfe>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80052b0:	d03b      	beq.n	800532a <HAL_SPI_Init+0xfe>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80052ba:	d036      	beq.n	800532a <HAL_SPI_Init+0xfe>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052c4:	d031      	beq.n	800532a <HAL_SPI_Init+0xfe>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80052ce:	d02c      	beq.n	800532a <HAL_SPI_Init+0xfe>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80052d8:	d027      	beq.n	800532a <HAL_SPI_Init+0xfe>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80052e2:	d022      	beq.n	800532a <HAL_SPI_Init+0xfe>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ec:	d01d      	beq.n	800532a <HAL_SPI_Init+0xfe>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052f6:	d018      	beq.n	800532a <HAL_SPI_Init+0xfe>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005300:	d013      	beq.n	800532a <HAL_SPI_Init+0xfe>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800530a:	d00e      	beq.n	800532a <HAL_SPI_Init+0xfe>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005314:	d009      	beq.n	800532a <HAL_SPI_Init+0xfe>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800531e:	d004      	beq.n	800532a <HAL_SPI_Init+0xfe>
 8005320:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005324:	4859      	ldr	r0, [pc, #356]	; (800548c <HAL_SPI_Init+0x260>)
 8005326:	f7fb ff9e 	bl	8001266 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005332:	d00d      	beq.n	8005350 <HAL_SPI_Init+0x124>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d009      	beq.n	8005350 <HAL_SPI_Init+0x124>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005344:	d004      	beq.n	8005350 <HAL_SPI_Init+0x124>
 8005346:	f240 114b 	movw	r1, #331	; 0x14b
 800534a:	4850      	ldr	r0, [pc, #320]	; (800548c <HAL_SPI_Init+0x260>)
 800534c:	f7fb ff8b 	bl	8001266 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	2b08      	cmp	r3, #8
 8005356:	d008      	beq.n	800536a <HAL_SPI_Init+0x13e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <HAL_SPI_Init+0x13e>
 8005360:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005364:	4849      	ldr	r0, [pc, #292]	; (800548c <HAL_SPI_Init+0x260>)
 8005366:	f7fb ff7e 	bl	8001266 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d020      	beq.n	80053b4 <HAL_SPI_Init+0x188>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	2b08      	cmp	r3, #8
 8005378:	d01c      	beq.n	80053b4 <HAL_SPI_Init+0x188>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	2b10      	cmp	r3, #16
 8005380:	d018      	beq.n	80053b4 <HAL_SPI_Init+0x188>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	2b18      	cmp	r3, #24
 8005388:	d014      	beq.n	80053b4 <HAL_SPI_Init+0x188>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	2b20      	cmp	r3, #32
 8005390:	d010      	beq.n	80053b4 <HAL_SPI_Init+0x188>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	2b28      	cmp	r3, #40	; 0x28
 8005398:	d00c      	beq.n	80053b4 <HAL_SPI_Init+0x188>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	2b30      	cmp	r3, #48	; 0x30
 80053a0:	d008      	beq.n	80053b4 <HAL_SPI_Init+0x188>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	2b38      	cmp	r3, #56	; 0x38
 80053a8:	d004      	beq.n	80053b4 <HAL_SPI_Init+0x188>
 80053aa:	f240 114d 	movw	r1, #333	; 0x14d
 80053ae:	4837      	ldr	r0, [pc, #220]	; (800548c <HAL_SPI_Init+0x260>)
 80053b0:	f7fb ff59 	bl	8001266 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_SPI_Init+0x1a2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	2b80      	cmp	r3, #128	; 0x80
 80053c2:	d004      	beq.n	80053ce <HAL_SPI_Init+0x1a2>
 80053c4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80053c8:	4830      	ldr	r0, [pc, #192]	; (800548c <HAL_SPI_Init+0x260>)
 80053ca:	f7fb ff4c 	bl	8001266 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_SPI_Init+0x1bc>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d004      	beq.n	80053e8 <HAL_SPI_Init+0x1bc>
 80053de:	f240 114f 	movw	r1, #335	; 0x14f
 80053e2:	482a      	ldr	r0, [pc, #168]	; (800548c <HAL_SPI_Init+0x260>)
 80053e4:	f7fb ff3f 	bl	8001266 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d14f      	bne.n	8005490 <HAL_SPI_Init+0x264>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_SPI_Init+0x1de>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d004      	beq.n	800540a <HAL_SPI_Init+0x1de>
 8005400:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8005404:	4821      	ldr	r0, [pc, #132]	; (800548c <HAL_SPI_Init+0x260>)
 8005406:	f7fb ff2e 	bl	8001266 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d008      	beq.n	8005424 <HAL_SPI_Init+0x1f8>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d004      	beq.n	8005424 <HAL_SPI_Init+0x1f8>
 800541a:	f240 1153 	movw	r1, #339	; 0x153
 800541e:	481b      	ldr	r0, [pc, #108]	; (800548c <HAL_SPI_Init+0x260>)
 8005420:	f7fb ff21 	bl	8001266 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800542c:	d125      	bne.n	800547a <HAL_SPI_Init+0x24e>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d057      	beq.n	80054e6 <HAL_SPI_Init+0x2ba>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	2b08      	cmp	r3, #8
 800543c:	d053      	beq.n	80054e6 <HAL_SPI_Init+0x2ba>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	2b10      	cmp	r3, #16
 8005444:	d04f      	beq.n	80054e6 <HAL_SPI_Init+0x2ba>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	2b18      	cmp	r3, #24
 800544c:	d04b      	beq.n	80054e6 <HAL_SPI_Init+0x2ba>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	2b20      	cmp	r3, #32
 8005454:	d047      	beq.n	80054e6 <HAL_SPI_Init+0x2ba>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	2b28      	cmp	r3, #40	; 0x28
 800545c:	d043      	beq.n	80054e6 <HAL_SPI_Init+0x2ba>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	2b30      	cmp	r3, #48	; 0x30
 8005464:	d03f      	beq.n	80054e6 <HAL_SPI_Init+0x2ba>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	2b38      	cmp	r3, #56	; 0x38
 800546c:	d03b      	beq.n	80054e6 <HAL_SPI_Init+0x2ba>
 800546e:	f240 1157 	movw	r1, #343	; 0x157
 8005472:	4806      	ldr	r0, [pc, #24]	; (800548c <HAL_SPI_Init+0x260>)
 8005474:	f7fb fef7 	bl	8001266 <assert_failed>
 8005478:	e035      	b.n	80054e6 <HAL_SPI_Init+0x2ba>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	61da      	str	r2, [r3, #28]
 8005480:	e031      	b.n	80054e6 <HAL_SPI_Init+0x2ba>
 8005482:	bf00      	nop
 8005484:	40013000 	.word	0x40013000
 8005488:	40003c00 	.word	0x40003c00
 800548c:	0800b158 	.word	0x0800b158
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d020      	beq.n	80054da <HAL_SPI_Init+0x2ae>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d01c      	beq.n	80054da <HAL_SPI_Init+0x2ae>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d018      	beq.n	80054da <HAL_SPI_Init+0x2ae>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	2b18      	cmp	r3, #24
 80054ae:	d014      	beq.n	80054da <HAL_SPI_Init+0x2ae>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d010      	beq.n	80054da <HAL_SPI_Init+0x2ae>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	2b28      	cmp	r3, #40	; 0x28
 80054be:	d00c      	beq.n	80054da <HAL_SPI_Init+0x2ae>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	2b30      	cmp	r3, #48	; 0x30
 80054c6:	d008      	beq.n	80054da <HAL_SPI_Init+0x2ae>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	2b38      	cmp	r3, #56	; 0x38
 80054ce:	d004      	beq.n	80054da <HAL_SPI_Init+0x2ae>
 80054d0:	f240 1161 	movw	r1, #353	; 0x161
 80054d4:	4847      	ldr	r0, [pc, #284]	; (80055f4 <HAL_SPI_Init+0x3c8>)
 80054d6:	f7fb fec6 	bl	8001266 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d106      	bne.n	8005506 <HAL_SPI_Init+0x2da>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7fb ff23 	bl	800134c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2202      	movs	r2, #2
 800550a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005526:	d902      	bls.n	800552e <HAL_SPI_Init+0x302>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	e002      	b.n	8005534 <HAL_SPI_Init+0x308>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800552e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005532:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800553c:	d007      	beq.n	800554e <HAL_SPI_Init+0x322>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005546:	d002      	beq.n	800554e <HAL_SPI_Init+0x322>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005590:	ea42 0103 	orr.w	r1, r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	f003 0204 	and.w	r2, r3, #4
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055ca:	ea42 0103 	orr.w	r1, r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	0800b158 	.word	0x0800b158

080055f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	4613      	mov	r3, r2
 8005606:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <HAL_SPI_Transmit+0x30>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800561c:	d004      	beq.n	8005628 <HAL_SPI_Transmit+0x30>
 800561e:	f240 313e 	movw	r1, #830	; 0x33e
 8005622:	4890      	ldr	r0, [pc, #576]	; (8005864 <HAL_SPI_Transmit+0x26c>)
 8005624:	f7fb fe1f 	bl	8001266 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_SPI_Transmit+0x3e>
 8005632:	2302      	movs	r3, #2
 8005634:	e15a      	b.n	80058ec <HAL_SPI_Transmit+0x2f4>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800563e:	f7fc f9c3 	bl	80019c8 <HAL_GetTick>
 8005642:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	d002      	beq.n	800565a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8005654:	2302      	movs	r3, #2
 8005656:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005658:	e13f      	b.n	80058da <HAL_SPI_Transmit+0x2e2>
  }

  if ((pData == NULL) || (Size == 0U))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <HAL_SPI_Transmit+0x6e>
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	77fb      	strb	r3, [r7, #31]
    goto error;
 800566a:	e136      	b.n	80058da <HAL_SPI_Transmit+0x2e2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2203      	movs	r2, #3
 8005670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	88fa      	ldrh	r2, [r7, #6]
 800568a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b6:	d10f      	bne.n	80056d8 <HAL_SPI_Transmit+0xe0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d007      	beq.n	80056f6 <HAL_SPI_Transmit+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056fe:	d94b      	bls.n	8005798 <HAL_SPI_Transmit+0x1a0>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_SPI_Transmit+0x116>
 8005708:	8afb      	ldrh	r3, [r7, #22]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d13e      	bne.n	800578c <HAL_SPI_Transmit+0x194>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	881a      	ldrh	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	1c9a      	adds	r2, r3, #2
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005732:	e02b      	b.n	800578c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b02      	cmp	r3, #2
 8005740:	d112      	bne.n	8005768 <HAL_SPI_Transmit+0x170>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	881a      	ldrh	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	1c9a      	adds	r2, r3, #2
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005766:	e011      	b.n	800578c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005768:	f7fc f92e 	bl	80019c8 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d803      	bhi.n	8005780 <HAL_SPI_Transmit+0x188>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d102      	bne.n	8005786 <HAL_SPI_Transmit+0x18e>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d102      	bne.n	800578c <HAL_SPI_Transmit+0x194>
        {
          errorcode = HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	77fb      	strb	r3, [r7, #31]
          goto error;
 800578a:	e0a6      	b.n	80058da <HAL_SPI_Transmit+0x2e2>
    while (hspi->TxXferCount > 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1ce      	bne.n	8005734 <HAL_SPI_Transmit+0x13c>
 8005796:	e07e      	b.n	8005896 <HAL_SPI_Transmit+0x29e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_SPI_Transmit+0x1ae>
 80057a0:	8afb      	ldrh	r3, [r7, #22]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d172      	bne.n	800588c <HAL_SPI_Transmit+0x294>
    {
      if (hspi->TxXferCount > 1U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d912      	bls.n	80057d6 <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	881a      	ldrh	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	1c9a      	adds	r2, r3, #2
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b02      	subs	r3, #2
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057d4:	e05a      	b.n	800588c <HAL_SPI_Transmit+0x294>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	7812      	ldrb	r2, [r2, #0]
 80057e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80057fc:	e046      	b.n	800588c <HAL_SPI_Transmit+0x294>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b02      	cmp	r3, #2
 800580a:	d12d      	bne.n	8005868 <HAL_SPI_Transmit+0x270>
      {
        if (hspi->TxXferCount > 1U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d912      	bls.n	800583c <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	881a      	ldrh	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	1c9a      	adds	r2, r3, #2
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b02      	subs	r3, #2
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	87da      	strh	r2, [r3, #62]	; 0x3e
 800583a:	e027      	b.n	800588c <HAL_SPI_Transmit+0x294>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	7812      	ldrb	r2, [r2, #0]
 8005848:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005862:	e013      	b.n	800588c <HAL_SPI_Transmit+0x294>
 8005864:	0800b158 	.word	0x0800b158
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005868:	f7fc f8ae 	bl	80019c8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d803      	bhi.n	8005880 <HAL_SPI_Transmit+0x288>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d102      	bne.n	8005886 <HAL_SPI_Transmit+0x28e>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d102      	bne.n	800588c <HAL_SPI_Transmit+0x294>
        {
          errorcode = HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	77fb      	strb	r3, [r7, #31]
          goto error;
 800588a:	e026      	b.n	80058da <HAL_SPI_Transmit+0x2e2>
    while (hspi->TxXferCount > 0U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1b3      	bne.n	80057fe <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f940 	bl	8005b20 <SPI_EndRxTxTransaction>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_Transmit+0x2b4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <HAL_SPI_Transmit+0x2d2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_SPI_Transmit+0x2e0>
  {
    errorcode = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	77fb      	strb	r3, [r7, #31]
 80058d6:	e000      	b.n	80058da <HAL_SPI_Transmit+0x2e2>
  }

error:
 80058d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	4613      	mov	r3, r2
 8005902:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005904:	f7fc f860 	bl	80019c8 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	4413      	add	r3, r2
 8005912:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005914:	f7fc f858 	bl	80019c8 <HAL_GetTick>
 8005918:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800591a:	4b39      	ldr	r3, [pc, #228]	; (8005a00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	015b      	lsls	r3, r3, #5
 8005920:	0d1b      	lsrs	r3, r3, #20
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	fb02 f303 	mul.w	r3, r2, r3
 8005928:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800592a:	e054      	b.n	80059d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	d050      	beq.n	80059d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005934:	f7fc f848 	bl	80019c8 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	429a      	cmp	r2, r3
 8005942:	d902      	bls.n	800594a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d13d      	bne.n	80059c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005958:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005962:	d111      	bne.n	8005988 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596c:	d004      	beq.n	8005978 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005976:	d107      	bne.n	8005988 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005986:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005990:	d10f      	bne.n	80059b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e017      	b.n	80059f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4013      	ands	r3, r2
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	bf0c      	ite	eq
 80059e6:	2301      	moveq	r3, #1
 80059e8:	2300      	movne	r3, #0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d19b      	bne.n	800592c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3720      	adds	r7, #32
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000000 	.word	0x20000000

08005a04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a12:	f7fb ffd9 	bl	80019c8 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	4413      	add	r3, r2
 8005a20:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a22:	f7fb ffd1 	bl	80019c8 <HAL_GetTick>
 8005a26:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a28:	4b3c      	ldr	r3, [pc, #240]	; (8005b1c <SPI_WaitFifoStateUntilTimeout+0x118>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	00da      	lsls	r2, r3, #3
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	0d1b      	lsrs	r3, r3, #20
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	fb02 f303 	mul.w	r3, r2, r3
 8005a3e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a40:	e05f      	b.n	8005b02 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a48:	d106      	bne.n	8005a58 <SPI_WaitFifoStateUntilTimeout+0x54>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d103      	bne.n	8005a58 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d050      	beq.n	8005b02 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a60:	f7fb ffb2 	bl	80019c8 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	69fa      	ldr	r2, [r7, #28]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d902      	bls.n	8005a76 <SPI_WaitFifoStateUntilTimeout+0x72>
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d13d      	bne.n	8005af2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a8e:	d111      	bne.n	8005ab4 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a98:	d004      	beq.n	8005aa4 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa2:	d107      	bne.n	8005ab4 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005abc:	d10f      	bne.n	8005ade <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005adc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e010      	b.n	8005b14 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d197      	bne.n	8005a42 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3720      	adds	r7, #32
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000000 	.word	0x20000000

08005b20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff ff63 	bl	8005a04 <SPI_WaitFifoStateUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d007      	beq.n	8005b54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b48:	f043 0220 	orr.w	r2, r3, #32
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e027      	b.n	8005ba4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2180      	movs	r1, #128	; 0x80
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f7ff fec8 	bl	80058f4 <SPI_WaitFlagStateUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6e:	f043 0220 	orr.w	r2, r3, #32
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e014      	b.n	8005ba4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff ff3c 	bl	8005a04 <SPI_WaitFifoStateUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e000      	b.n	8005ba4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e0a5      	b.n	8005d0a <HAL_TIM_Base_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a54      	ldr	r2, [pc, #336]	; (8005d14 <HAL_TIM_Base_Init+0x168>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d01d      	beq.n	8005c04 <HAL_TIM_Base_Init+0x58>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd0:	d018      	beq.n	8005c04 <HAL_TIM_Base_Init+0x58>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a50      	ldr	r2, [pc, #320]	; (8005d18 <HAL_TIM_Base_Init+0x16c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d013      	beq.n	8005c04 <HAL_TIM_Base_Init+0x58>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a4e      	ldr	r2, [pc, #312]	; (8005d1c <HAL_TIM_Base_Init+0x170>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00e      	beq.n	8005c04 <HAL_TIM_Base_Init+0x58>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a4d      	ldr	r2, [pc, #308]	; (8005d20 <HAL_TIM_Base_Init+0x174>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d009      	beq.n	8005c04 <HAL_TIM_Base_Init+0x58>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a4b      	ldr	r2, [pc, #300]	; (8005d24 <HAL_TIM_Base_Init+0x178>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <HAL_TIM_Base_Init+0x58>
 8005bfa:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005bfe:	484a      	ldr	r0, [pc, #296]	; (8005d28 <HAL_TIM_Base_Init+0x17c>)
 8005c00:	f7fb fb31 	bl	8001266 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d014      	beq.n	8005c36 <HAL_TIM_Base_Init+0x8a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d010      	beq.n	8005c36 <HAL_TIM_Base_Init+0x8a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d00c      	beq.n	8005c36 <HAL_TIM_Base_Init+0x8a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b40      	cmp	r3, #64	; 0x40
 8005c22:	d008      	beq.n	8005c36 <HAL_TIM_Base_Init+0x8a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b60      	cmp	r3, #96	; 0x60
 8005c2a:	d004      	beq.n	8005c36 <HAL_TIM_Base_Init+0x8a>
 8005c2c:	f240 1117 	movw	r1, #279	; 0x117
 8005c30:	483d      	ldr	r0, [pc, #244]	; (8005d28 <HAL_TIM_Base_Init+0x17c>)
 8005c32:	f7fb fb18 	bl	8001266 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00e      	beq.n	8005c5c <HAL_TIM_Base_Init+0xb0>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c46:	d009      	beq.n	8005c5c <HAL_TIM_Base_Init+0xb0>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c50:	d004      	beq.n	8005c5c <HAL_TIM_Base_Init+0xb0>
 8005c52:	f44f 718c 	mov.w	r1, #280	; 0x118
 8005c56:	4834      	ldr	r0, [pc, #208]	; (8005d28 <HAL_TIM_Base_Init+0x17c>)
 8005c58:	f7fb fb05 	bl	8001266 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <HAL_TIM_Base_Init+0xca>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	2b80      	cmp	r3, #128	; 0x80
 8005c6a:	d004      	beq.n	8005c76 <HAL_TIM_Base_Init+0xca>
 8005c6c:	f240 1119 	movw	r1, #281	; 0x119
 8005c70:	482d      	ldr	r0, [pc, #180]	; (8005d28 <HAL_TIM_Base_Init+0x17c>)
 8005c72:	f7fb faf8 	bl	8001266 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_TIM_Base_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fb fbec 	bl	8001468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	f000 ff4e 	bl	8006b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40001000 	.word	0x40001000
 8005d1c:	40001400 	.word	0x40001400
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40014400 	.word	0x40014400
 8005d28:	0800b190 	.word	0x0800b190

08005d2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e0a5      	b.n	8005e8a <HAL_TIM_PWM_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a54      	ldr	r2, [pc, #336]	; (8005e94 <HAL_TIM_PWM_Init+0x168>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d01d      	beq.n	8005d84 <HAL_TIM_PWM_Init+0x58>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d50:	d018      	beq.n	8005d84 <HAL_TIM_PWM_Init+0x58>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a50      	ldr	r2, [pc, #320]	; (8005e98 <HAL_TIM_PWM_Init+0x16c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d013      	beq.n	8005d84 <HAL_TIM_PWM_Init+0x58>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a4e      	ldr	r2, [pc, #312]	; (8005e9c <HAL_TIM_PWM_Init+0x170>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00e      	beq.n	8005d84 <HAL_TIM_PWM_Init+0x58>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a4d      	ldr	r2, [pc, #308]	; (8005ea0 <HAL_TIM_PWM_Init+0x174>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d009      	beq.n	8005d84 <HAL_TIM_PWM_Init+0x58>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a4b      	ldr	r2, [pc, #300]	; (8005ea4 <HAL_TIM_PWM_Init+0x178>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <HAL_TIM_PWM_Init+0x58>
 8005d7a:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 8005d7e:	484a      	ldr	r0, [pc, #296]	; (8005ea8 <HAL_TIM_PWM_Init+0x17c>)
 8005d80:	f7fb fa71 	bl	8001266 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d014      	beq.n	8005db6 <HAL_TIM_PWM_Init+0x8a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b10      	cmp	r3, #16
 8005d92:	d010      	beq.n	8005db6 <HAL_TIM_PWM_Init+0x8a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	d00c      	beq.n	8005db6 <HAL_TIM_PWM_Init+0x8a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d008      	beq.n	8005db6 <HAL_TIM_PWM_Init+0x8a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b60      	cmp	r3, #96	; 0x60
 8005daa:	d004      	beq.n	8005db6 <HAL_TIM_PWM_Init+0x8a>
 8005dac:	f240 5111 	movw	r1, #1297	; 0x511
 8005db0:	483d      	ldr	r0, [pc, #244]	; (8005ea8 <HAL_TIM_PWM_Init+0x17c>)
 8005db2:	f7fb fa58 	bl	8001266 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00e      	beq.n	8005ddc <HAL_TIM_PWM_Init+0xb0>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc6:	d009      	beq.n	8005ddc <HAL_TIM_PWM_Init+0xb0>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_PWM_Init+0xb0>
 8005dd2:	f240 5112 	movw	r1, #1298	; 0x512
 8005dd6:	4834      	ldr	r0, [pc, #208]	; (8005ea8 <HAL_TIM_PWM_Init+0x17c>)
 8005dd8:	f7fb fa45 	bl	8001266 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_TIM_PWM_Init+0xca>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	2b80      	cmp	r3, #128	; 0x80
 8005dea:	d004      	beq.n	8005df6 <HAL_TIM_PWM_Init+0xca>
 8005dec:	f240 5113 	movw	r1, #1299	; 0x513
 8005df0:	482d      	ldr	r0, [pc, #180]	; (8005ea8 <HAL_TIM_PWM_Init+0x17c>)
 8005df2:	f7fb fa38 	bl	8001266 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_TIM_PWM_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f84e 	bl	8005eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f000 fe8e 	bl	8006b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40001000 	.word	0x40001000
 8005e9c:	40001400 	.word	0x40001400
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	0800b190 	.word	0x0800b190

08005eac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a87      	ldr	r2, [pc, #540]	; (80060ec <HAL_TIM_PWM_Start+0x22c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d111      	bne.n	8005ef8 <HAL_TIM_PWM_Start+0x38>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d037      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d034      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d031      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b0c      	cmp	r3, #12
 8005eea:	d02e      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b10      	cmp	r3, #16
 8005ef0:	d02b      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b14      	cmp	r3, #20
 8005ef6:	d028      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f00:	d10b      	bne.n	8005f1a <HAL_TIM_PWM_Start+0x5a>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d020      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d01d      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d01a      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b0c      	cmp	r3, #12
 8005f18:	d017      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a74      	ldr	r2, [pc, #464]	; (80060f0 <HAL_TIM_PWM_Start+0x230>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d105      	bne.n	8005f30 <HAL_TIM_PWM_Start+0x70>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00f      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d00c      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a6f      	ldr	r2, [pc, #444]	; (80060f4 <HAL_TIM_PWM_Start+0x234>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d102      	bne.n	8005f40 <HAL_TIM_PWM_Start+0x80>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x8a>
 8005f40:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8005f44:	486c      	ldr	r0, [pc, #432]	; (80060f8 <HAL_TIM_PWM_Start+0x238>)
 8005f46:	f7fb f98e 	bl	8001266 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <HAL_TIM_PWM_Start+0xa4>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	bf14      	ite	ne
 8005f5c:	2301      	movne	r3, #1
 8005f5e:	2300      	moveq	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	e03c      	b.n	8005fde <HAL_TIM_PWM_Start+0x11e>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d109      	bne.n	8005f7e <HAL_TIM_PWM_Start+0xbe>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	bf14      	ite	ne
 8005f76:	2301      	movne	r3, #1
 8005f78:	2300      	moveq	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	e02f      	b.n	8005fde <HAL_TIM_PWM_Start+0x11e>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d109      	bne.n	8005f98 <HAL_TIM_PWM_Start+0xd8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	bf14      	ite	ne
 8005f90:	2301      	movne	r3, #1
 8005f92:	2300      	moveq	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e022      	b.n	8005fde <HAL_TIM_PWM_Start+0x11e>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b0c      	cmp	r3, #12
 8005f9c:	d109      	bne.n	8005fb2 <HAL_TIM_PWM_Start+0xf2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	bf14      	ite	ne
 8005faa:	2301      	movne	r3, #1
 8005fac:	2300      	moveq	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	e015      	b.n	8005fde <HAL_TIM_PWM_Start+0x11e>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d109      	bne.n	8005fcc <HAL_TIM_PWM_Start+0x10c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	bf14      	ite	ne
 8005fc4:	2301      	movne	r3, #1
 8005fc6:	2300      	moveq	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	e008      	b.n	8005fde <HAL_TIM_PWM_Start+0x11e>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	bf14      	ite	ne
 8005fd8:	2301      	movne	r3, #1
 8005fda:	2300      	moveq	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <HAL_TIM_PWM_Start+0x126>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e07e      	b.n	80060e4 <HAL_TIM_PWM_Start+0x224>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d104      	bne.n	8005ff6 <HAL_TIM_PWM_Start+0x136>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ff4:	e023      	b.n	800603e <HAL_TIM_PWM_Start+0x17e>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d104      	bne.n	8006006 <HAL_TIM_PWM_Start+0x146>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006004:	e01b      	b.n	800603e <HAL_TIM_PWM_Start+0x17e>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b08      	cmp	r3, #8
 800600a:	d104      	bne.n	8006016 <HAL_TIM_PWM_Start+0x156>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006014:	e013      	b.n	800603e <HAL_TIM_PWM_Start+0x17e>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b0c      	cmp	r3, #12
 800601a:	d104      	bne.n	8006026 <HAL_TIM_PWM_Start+0x166>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006024:	e00b      	b.n	800603e <HAL_TIM_PWM_Start+0x17e>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b10      	cmp	r3, #16
 800602a:	d104      	bne.n	8006036 <HAL_TIM_PWM_Start+0x176>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006034:	e003      	b.n	800603e <HAL_TIM_PWM_Start+0x17e>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2201      	movs	r2, #1
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f001 f982 	bl	8007350 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a26      	ldr	r2, [pc, #152]	; (80060ec <HAL_TIM_PWM_Start+0x22c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d009      	beq.n	800606a <HAL_TIM_PWM_Start+0x1aa>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a25      	ldr	r2, [pc, #148]	; (80060f0 <HAL_TIM_PWM_Start+0x230>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d004      	beq.n	800606a <HAL_TIM_PWM_Start+0x1aa>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a23      	ldr	r2, [pc, #140]	; (80060f4 <HAL_TIM_PWM_Start+0x234>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d101      	bne.n	800606e <HAL_TIM_PWM_Start+0x1ae>
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <HAL_TIM_PWM_Start+0x1b0>
 800606e:	2300      	movs	r3, #0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <HAL_TIM_PWM_Start+0x1c4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006082:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a18      	ldr	r2, [pc, #96]	; (80060ec <HAL_TIM_PWM_Start+0x22c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d009      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x1e2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d004      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x1e2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a14      	ldr	r2, [pc, #80]	; (80060f0 <HAL_TIM_PWM_Start+0x230>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d115      	bne.n	80060ce <HAL_TIM_PWM_Start+0x20e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	4b14      	ldr	r3, [pc, #80]	; (80060fc <HAL_TIM_PWM_Start+0x23c>)
 80060aa:	4013      	ands	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b06      	cmp	r3, #6
 80060b2:	d015      	beq.n	80060e0 <HAL_TIM_PWM_Start+0x220>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ba:	d011      	beq.n	80060e0 <HAL_TIM_PWM_Start+0x220>
    {
      __HAL_TIM_ENABLE(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060cc:	e008      	b.n	80060e0 <HAL_TIM_PWM_Start+0x220>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0201 	orr.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e000      	b.n	80060e2 <HAL_TIM_PWM_Start+0x222>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40012c00 	.word	0x40012c00
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40014400 	.word	0x40014400
 80060f8:	0800b190 	.word	0x0800b190
 80060fc:	00010007 	.word	0x00010007

08006100 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a5d      	ldr	r2, [pc, #372]	; (8006284 <HAL_TIM_PWM_Stop+0x184>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d111      	bne.n	8006138 <HAL_TIM_PWM_Stop+0x38>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d037      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b04      	cmp	r3, #4
 800611e:	d034      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b08      	cmp	r3, #8
 8006124:	d031      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b0c      	cmp	r3, #12
 800612a:	d02e      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b10      	cmp	r3, #16
 8006130:	d02b      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b14      	cmp	r3, #20
 8006136:	d028      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006140:	d10b      	bne.n	800615a <HAL_TIM_PWM_Stop+0x5a>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d020      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b04      	cmp	r3, #4
 800614c:	d01d      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b08      	cmp	r3, #8
 8006152:	d01a      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b0c      	cmp	r3, #12
 8006158:	d017      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a4a      	ldr	r2, [pc, #296]	; (8006288 <HAL_TIM_PWM_Stop+0x188>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d105      	bne.n	8006170 <HAL_TIM_PWM_Stop+0x70>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00f      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b04      	cmp	r3, #4
 800616e:	d00c      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a45      	ldr	r2, [pc, #276]	; (800628c <HAL_TIM_PWM_Stop+0x18c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d102      	bne.n	8006180 <HAL_TIM_PWM_Stop+0x80>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8a>
 8006180:	f240 51ce 	movw	r1, #1486	; 0x5ce
 8006184:	4842      	ldr	r0, [pc, #264]	; (8006290 <HAL_TIM_PWM_Stop+0x190>)
 8006186:	f7fb f86e 	bl	8001266 <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2200      	movs	r2, #0
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	4618      	mov	r0, r3
 8006194:	f001 f8dc 	bl	8007350 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a39      	ldr	r2, [pc, #228]	; (8006284 <HAL_TIM_PWM_Stop+0x184>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d009      	beq.n	80061b6 <HAL_TIM_PWM_Stop+0xb6>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a38      	ldr	r2, [pc, #224]	; (8006288 <HAL_TIM_PWM_Stop+0x188>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d004      	beq.n	80061b6 <HAL_TIM_PWM_Stop+0xb6>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a36      	ldr	r2, [pc, #216]	; (800628c <HAL_TIM_PWM_Stop+0x18c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d101      	bne.n	80061ba <HAL_TIM_PWM_Stop+0xba>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <HAL_TIM_PWM_Stop+0xbc>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d017      	beq.n	80061f0 <HAL_TIM_PWM_Stop+0xf0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6a1a      	ldr	r2, [r3, #32]
 80061c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80061ca:	4013      	ands	r3, r2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10f      	bne.n	80061f0 <HAL_TIM_PWM_Stop+0xf0>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6a1a      	ldr	r2, [r3, #32]
 80061d6:	f240 4344 	movw	r3, #1092	; 0x444
 80061da:	4013      	ands	r3, r2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d107      	bne.n	80061f0 <HAL_TIM_PWM_Stop+0xf0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6a1a      	ldr	r2, [r3, #32]
 80061f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10f      	bne.n	8006220 <HAL_TIM_PWM_Stop+0x120>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6a1a      	ldr	r2, [r3, #32]
 8006206:	f240 4344 	movw	r3, #1092	; 0x444
 800620a:	4013      	ands	r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d107      	bne.n	8006220 <HAL_TIM_PWM_Stop+0x120>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <HAL_TIM_PWM_Stop+0x130>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800622e:	e023      	b.n	8006278 <HAL_TIM_PWM_Stop+0x178>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b04      	cmp	r3, #4
 8006234:	d104      	bne.n	8006240 <HAL_TIM_PWM_Stop+0x140>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800623e:	e01b      	b.n	8006278 <HAL_TIM_PWM_Stop+0x178>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b08      	cmp	r3, #8
 8006244:	d104      	bne.n	8006250 <HAL_TIM_PWM_Stop+0x150>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800624e:	e013      	b.n	8006278 <HAL_TIM_PWM_Stop+0x178>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b0c      	cmp	r3, #12
 8006254:	d104      	bne.n	8006260 <HAL_TIM_PWM_Stop+0x160>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800625e:	e00b      	b.n	8006278 <HAL_TIM_PWM_Stop+0x178>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b10      	cmp	r3, #16
 8006264:	d104      	bne.n	8006270 <HAL_TIM_PWM_Stop+0x170>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800626e:	e003      	b.n	8006278 <HAL_TIM_PWM_Stop+0x178>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40012c00 	.word	0x40012c00
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	0800b190 	.word	0x0800b190

08006294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d016      	beq.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x40>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d013      	beq.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d010      	beq.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x40>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	d00d      	beq.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x40>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b10      	cmp	r3, #16
 80062bc:	d00a      	beq.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x40>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b14      	cmp	r3, #20
 80062c2:	d007      	beq.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x40>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b3c      	cmp	r3, #60	; 0x3c
 80062c8:	d004      	beq.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x40>
 80062ca:	f241 0132 	movw	r1, #4146	; 0x1032
 80062ce:	488c      	ldr	r0, [pc, #560]	; (8006500 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80062d0:	f7fa ffc9 	bl	8001266 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b60      	cmp	r3, #96	; 0x60
 80062da:	d01c      	beq.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x82>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b70      	cmp	r3, #112	; 0x70
 80062e2:	d018      	beq.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x82>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a86      	ldr	r2, [pc, #536]	; (8006504 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d013      	beq.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x82>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a85      	ldr	r2, [pc, #532]	; (8006508 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00e      	beq.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x82>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a83      	ldr	r2, [pc, #524]	; (800650c <HAL_TIM_PWM_ConfigChannel+0x278>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d009      	beq.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a82      	ldr	r2, [pc, #520]	; (8006510 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x82>
 800630c:	f241 0133 	movw	r1, #4147	; 0x1033
 8006310:	487b      	ldr	r0, [pc, #492]	; (8006500 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8006312:	f7fa ffa8 	bl	8001266 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d008      	beq.n	8006330 <HAL_TIM_PWM_ConfigChannel+0x9c>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d004      	beq.n	8006330 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8006326:	f241 0134 	movw	r1, #4148	; 0x1034
 800632a:	4875      	ldr	r0, [pc, #468]	; (8006500 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800632c:	f7fa ff9b 	bl	8001266 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_TIM_PWM_ConfigChannel+0xb6>
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	2b04      	cmp	r3, #4
 800633e:	d004      	beq.n	800634a <HAL_TIM_PWM_ConfigChannel+0xb6>
 8006340:	f241 0135 	movw	r1, #4149	; 0x1035
 8006344:	486e      	ldr	r0, [pc, #440]	; (8006500 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8006346:	f7fa ff8e 	bl	8001266 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_TIM_PWM_ConfigChannel+0xc4>
 8006354:	2302      	movs	r3, #2
 8006356:	e16e      	b.n	8006636 <HAL_TIM_PWM_ConfigChannel+0x3a2>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b14      	cmp	r3, #20
 8006364:	f200 8161 	bhi.w	800662a <HAL_TIM_PWM_ConfigChannel+0x396>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <HAL_TIM_PWM_ConfigChannel+0xdc>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	080063c5 	.word	0x080063c5
 8006374:	0800662b 	.word	0x0800662b
 8006378:	0800662b 	.word	0x0800662b
 800637c:	0800662b 	.word	0x0800662b
 8006380:	08006437 	.word	0x08006437
 8006384:	0800662b 	.word	0x0800662b
 8006388:	0800662b 	.word	0x0800662b
 800638c:	0800662b 	.word	0x0800662b
 8006390:	080064a1 	.word	0x080064a1
 8006394:	0800662b 	.word	0x0800662b
 8006398:	0800662b 	.word	0x0800662b
 800639c:	0800662b 	.word	0x0800662b
 80063a0:	08006521 	.word	0x08006521
 80063a4:	0800662b 	.word	0x0800662b
 80063a8:	0800662b 	.word	0x0800662b
 80063ac:	0800662b 	.word	0x0800662b
 80063b0:	08006581 	.word	0x08006581
 80063b4:	0800662b 	.word	0x0800662b
 80063b8:	0800662b 	.word	0x0800662b
 80063bc:	0800662b 	.word	0x0800662b
 80063c0:	080065d5 	.word	0x080065d5
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a52      	ldr	r2, [pc, #328]	; (8006514 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <HAL_TIM_PWM_ConfigChannel+0x162>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d6:	d00e      	beq.n	80063f6 <HAL_TIM_PWM_ConfigChannel+0x162>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a4e      	ldr	r2, [pc, #312]	; (8006518 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d009      	beq.n	80063f6 <HAL_TIM_PWM_ConfigChannel+0x162>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a4d      	ldr	r2, [pc, #308]	; (800651c <HAL_TIM_PWM_ConfigChannel+0x288>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d004      	beq.n	80063f6 <HAL_TIM_PWM_ConfigChannel+0x162>
 80063ec:	f241 013f 	movw	r1, #4159	; 0x103f
 80063f0:	4843      	ldr	r0, [pc, #268]	; (8006500 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80063f2:	f7fa ff38 	bl	8001266 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fc05 	bl	8006c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699a      	ldr	r2, [r3, #24]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0208 	orr.w	r2, r2, #8
 8006410:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	699a      	ldr	r2, [r3, #24]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0204 	bic.w	r2, r2, #4
 8006420:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6999      	ldr	r1, [r3, #24]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	691a      	ldr	r2, [r3, #16]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	619a      	str	r2, [r3, #24]
      break;
 8006434:	e0fa      	b.n	800662c <HAL_TIM_PWM_ConfigChannel+0x398>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a36      	ldr	r2, [pc, #216]	; (8006514 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00e      	beq.n	800645e <HAL_TIM_PWM_ConfigChannel+0x1ca>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006448:	d009      	beq.n	800645e <HAL_TIM_PWM_ConfigChannel+0x1ca>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a32      	ldr	r2, [pc, #200]	; (8006518 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d004      	beq.n	800645e <HAL_TIM_PWM_ConfigChannel+0x1ca>
 8006454:	f241 0150 	movw	r1, #4176	; 0x1050
 8006458:	4829      	ldr	r0, [pc, #164]	; (8006500 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800645a:	f7fa ff04 	bl	8001266 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fc77 	bl	8006d58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699a      	ldr	r2, [r3, #24]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006478:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006488:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6999      	ldr	r1, [r3, #24]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	021a      	lsls	r2, r3, #8
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	619a      	str	r2, [r3, #24]
      break;
 800649e:	e0c5      	b.n	800662c <HAL_TIM_PWM_ConfigChannel+0x398>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a1b      	ldr	r2, [pc, #108]	; (8006514 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d009      	beq.n	80064be <HAL_TIM_PWM_ConfigChannel+0x22a>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b2:	d004      	beq.n	80064be <HAL_TIM_PWM_ConfigChannel+0x22a>
 80064b4:	f241 0161 	movw	r1, #4193	; 0x1061
 80064b8:	4811      	ldr	r0, [pc, #68]	; (8006500 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80064ba:	f7fa fed4 	bl	8001266 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fce9 	bl	8006e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f042 0208 	orr.w	r2, r2, #8
 80064d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69da      	ldr	r2, [r3, #28]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0204 	bic.w	r2, r2, #4
 80064e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69d9      	ldr	r1, [r3, #28]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	61da      	str	r2, [r3, #28]
      break;
 80064fc:	e096      	b.n	800662c <HAL_TIM_PWM_ConfigChannel+0x398>
 80064fe:	bf00      	nop
 8006500:	0800b190 	.word	0x0800b190
 8006504:	00010040 	.word	0x00010040
 8006508:	00010050 	.word	0x00010050
 800650c:	00010060 	.word	0x00010060
 8006510:	00010070 	.word	0x00010070
 8006514:	40012c00 	.word	0x40012c00
 8006518:	40014000 	.word	0x40014000
 800651c:	40014400 	.word	0x40014400
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a46      	ldr	r2, [pc, #280]	; (8006640 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d009      	beq.n	800653e <HAL_TIM_PWM_ConfigChannel+0x2aa>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006532:	d004      	beq.n	800653e <HAL_TIM_PWM_ConfigChannel+0x2aa>
 8006534:	f241 0172 	movw	r1, #4210	; 0x1072
 8006538:	4842      	ldr	r0, [pc, #264]	; (8006644 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 800653a:	f7fa fe94 	bl	8001266 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	4618      	mov	r0, r3
 8006546:	f000 fd4b 	bl	8006fe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69da      	ldr	r2, [r3, #28]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69da      	ldr	r2, [r3, #28]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69d9      	ldr	r1, [r3, #28]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	021a      	lsls	r2, r3, #8
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	61da      	str	r2, [r3, #28]
      break;
 800657e:	e055      	b.n	800662c <HAL_TIM_PWM_ConfigChannel+0x398>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a2e      	ldr	r2, [pc, #184]	; (8006640 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d004      	beq.n	8006594 <HAL_TIM_PWM_ConfigChannel+0x300>
 800658a:	f241 0183 	movw	r1, #4227	; 0x1083
 800658e:	482d      	ldr	r0, [pc, #180]	; (8006644 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8006590:	f7fa fe69 	bl	8001266 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fd8c 	bl	80070b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0208 	orr.w	r2, r2, #8
 80065ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0204 	bic.w	r2, r2, #4
 80065be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	691a      	ldr	r2, [r3, #16]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065d2:	e02b      	b.n	800662c <HAL_TIM_PWM_ConfigChannel+0x398>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a19      	ldr	r2, [pc, #100]	; (8006640 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <HAL_TIM_PWM_ConfigChannel+0x354>
 80065de:	f241 0194 	movw	r1, #4244	; 0x1094
 80065e2:	4818      	ldr	r0, [pc, #96]	; (8006644 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 80065e4:	f7fa fe3f 	bl	8001266 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68b9      	ldr	r1, [r7, #8]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fdba 	bl	8007168 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	021a      	lsls	r2, r3, #8
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006628:	e000      	b.n	800662c <HAL_TIM_PWM_ConfigChannel+0x398>
    }

    default:
      break;
 800662a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40012c00 	.word	0x40012c00
 8006644:	0800b190 	.word	0x0800b190

08006648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_TIM_ConfigClockSource+0x18>
 800665c:	2302      	movs	r3, #2
 800665e:	e267      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x4e8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006678:	d029      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x86>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006682:	d024      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x86>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d020      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x86>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b10      	cmp	r3, #16
 8006692:	d01c      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x86>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b20      	cmp	r3, #32
 800669a:	d018      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x86>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b30      	cmp	r3, #48	; 0x30
 80066a2:	d014      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x86>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d010      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x86>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b50      	cmp	r3, #80	; 0x50
 80066b2:	d00c      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x86>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b60      	cmp	r3, #96	; 0x60
 80066ba:	d008      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x86>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b70      	cmp	r3, #112	; 0x70
 80066c2:	d004      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x86>
 80066c4:	f241 4199 	movw	r1, #5273	; 0x1499
 80066c8:	4895      	ldr	r0, [pc, #596]	; (8006920 <HAL_TIM_ConfigClockSource+0x2d8>)
 80066ca:	f7fa fdcc 	bl	8001266 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066e8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	f000 81ac 	beq.w	8006a54 <HAL_TIM_ConfigClockSource+0x40c>
 80066fc:	2b40      	cmp	r3, #64	; 0x40
 80066fe:	d80f      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0xd8>
 8006700:	2b10      	cmp	r3, #16
 8006702:	f000 81ee 	beq.w	8006ae2 <HAL_TIM_ConfigClockSource+0x49a>
 8006706:	2b10      	cmp	r3, #16
 8006708:	d803      	bhi.n	8006712 <HAL_TIM_ConfigClockSource+0xca>
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 81e9 	beq.w	8006ae2 <HAL_TIM_ConfigClockSource+0x49a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006710:	e205      	b.n	8006b1e <HAL_TIM_ConfigClockSource+0x4d6>
  switch (sClockSourceConfig->ClockSource)
 8006712:	2b20      	cmp	r3, #32
 8006714:	f000 81e5 	beq.w	8006ae2 <HAL_TIM_ConfigClockSource+0x49a>
 8006718:	2b30      	cmp	r3, #48	; 0x30
 800671a:	f000 81e2 	beq.w	8006ae2 <HAL_TIM_ConfigClockSource+0x49a>
      break;
 800671e:	e1fe      	b.n	8006b1e <HAL_TIM_ConfigClockSource+0x4d6>
  switch (sClockSourceConfig->ClockSource)
 8006720:	2b70      	cmp	r3, #112	; 0x70
 8006722:	d03a      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x152>
 8006724:	2b70      	cmp	r3, #112	; 0x70
 8006726:	d806      	bhi.n	8006736 <HAL_TIM_ConfigClockSource+0xee>
 8006728:	2b50      	cmp	r3, #80	; 0x50
 800672a:	f000 8105 	beq.w	8006938 <HAL_TIM_ConfigClockSource+0x2f0>
 800672e:	2b60      	cmp	r3, #96	; 0x60
 8006730:	f000 8149 	beq.w	80069c6 <HAL_TIM_ConfigClockSource+0x37e>
      break;
 8006734:	e1f3      	b.n	8006b1e <HAL_TIM_ConfigClockSource+0x4d6>
  switch (sClockSourceConfig->ClockSource)
 8006736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673a:	d004      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0xfe>
 800673c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006740:	f000 8091 	beq.w	8006866 <HAL_TIM_ConfigClockSource+0x21e>
      break;
 8006744:	e1eb      	b.n	8006b1e <HAL_TIM_ConfigClockSource+0x4d6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a76      	ldr	r2, [pc, #472]	; (8006924 <HAL_TIM_ConfigClockSource+0x2dc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	f000 81e5 	beq.w	8006b1c <HAL_TIM_ConfigClockSource+0x4d4>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675a:	f000 81df 	beq.w	8006b1c <HAL_TIM_ConfigClockSource+0x4d4>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a71      	ldr	r2, [pc, #452]	; (8006928 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	f000 81d9 	beq.w	8006b1c <HAL_TIM_ConfigClockSource+0x4d4>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a6f      	ldr	r2, [pc, #444]	; (800692c <HAL_TIM_ConfigClockSource+0x2e4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	f000 81d3 	beq.w	8006b1c <HAL_TIM_ConfigClockSource+0x4d4>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a6d      	ldr	r2, [pc, #436]	; (8006930 <HAL_TIM_ConfigClockSource+0x2e8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	f000 81cd 	beq.w	8006b1c <HAL_TIM_ConfigClockSource+0x4d4>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a6b      	ldr	r2, [pc, #428]	; (8006934 <HAL_TIM_ConfigClockSource+0x2ec>)
 8006788:	4293      	cmp	r3, r2
 800678a:	f000 81c7 	beq.w	8006b1c <HAL_TIM_ConfigClockSource+0x4d4>
 800678e:	f241 41a5 	movw	r1, #5285	; 0x14a5
 8006792:	4863      	ldr	r0, [pc, #396]	; (8006920 <HAL_TIM_ConfigClockSource+0x2d8>)
 8006794:	f7fa fd67 	bl	8001266 <assert_failed>
      break;
 8006798:	e1c0      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x4d4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a61      	ldr	r2, [pc, #388]	; (8006924 <HAL_TIM_ConfigClockSource+0x2dc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00e      	beq.n	80067c2 <HAL_TIM_ConfigClockSource+0x17a>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ac:	d009      	beq.n	80067c2 <HAL_TIM_ConfigClockSource+0x17a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a5f      	ldr	r2, [pc, #380]	; (8006930 <HAL_TIM_ConfigClockSource+0x2e8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_TIM_ConfigClockSource+0x17a>
 80067b8:	f241 41ac 	movw	r1, #5292	; 0x14ac
 80067bc:	4858      	ldr	r0, [pc, #352]	; (8006920 <HAL_TIM_ConfigClockSource+0x2d8>)
 80067be:	f7fa fd52 	bl	8001266 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d013      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d2:	d00e      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067dc:	d009      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067e6:	d004      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80067e8:	f241 41af 	movw	r1, #5295	; 0x14af
 80067ec:	484c      	ldr	r0, [pc, #304]	; (8006920 <HAL_TIM_ConfigClockSource+0x2d8>)
 80067ee:	f7fa fd3a 	bl	8001266 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fa:	d014      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x1de>
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d010      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x1de>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00c      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x1de>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d008      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x1de>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2b0a      	cmp	r3, #10
 800681a:	d004      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x1de>
 800681c:	f241 41b0 	movw	r1, #5296	; 0x14b0
 8006820:	483f      	ldr	r0, [pc, #252]	; (8006920 <HAL_TIM_ConfigClockSource+0x2d8>)
 8006822:	f7fa fd20 	bl	8001266 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	2b0f      	cmp	r3, #15
 800682c:	d904      	bls.n	8006838 <HAL_TIM_ConfigClockSource+0x1f0>
 800682e:	f241 41b1 	movw	r1, #5297	; 0x14b1
 8006832:	483b      	ldr	r0, [pc, #236]	; (8006920 <HAL_TIM_ConfigClockSource+0x2d8>)
 8006834:	f7fa fd17 	bl	8001266 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	6899      	ldr	r1, [r3, #8]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f000 fd62 	bl	8007310 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800685a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	609a      	str	r2, [r3, #8]
      break;
 8006864:	e15b      	b.n	8006b1e <HAL_TIM_ConfigClockSource+0x4d6>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a2e      	ldr	r2, [pc, #184]	; (8006924 <HAL_TIM_ConfigClockSource+0x2dc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d009      	beq.n	8006884 <HAL_TIM_ConfigClockSource+0x23c>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006878:	d004      	beq.n	8006884 <HAL_TIM_ConfigClockSource+0x23c>
 800687a:	f241 41c4 	movw	r1, #5316	; 0x14c4
 800687e:	4828      	ldr	r0, [pc, #160]	; (8006920 <HAL_TIM_ConfigClockSource+0x2d8>)
 8006880:	f7fa fcf1 	bl	8001266 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d013      	beq.n	80068b4 <HAL_TIM_ConfigClockSource+0x26c>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006894:	d00e      	beq.n	80068b4 <HAL_TIM_ConfigClockSource+0x26c>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689e:	d009      	beq.n	80068b4 <HAL_TIM_ConfigClockSource+0x26c>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068a8:	d004      	beq.n	80068b4 <HAL_TIM_ConfigClockSource+0x26c>
 80068aa:	f241 41c7 	movw	r1, #5319	; 0x14c7
 80068ae:	481c      	ldr	r0, [pc, #112]	; (8006920 <HAL_TIM_ConfigClockSource+0x2d8>)
 80068b0:	f7fa fcd9 	bl	8001266 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068bc:	d014      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0x2a0>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d010      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0x2a0>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00c      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0x2a0>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d008      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0x2a0>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b0a      	cmp	r3, #10
 80068dc:	d004      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0x2a0>
 80068de:	f241 41c8 	movw	r1, #5320	; 0x14c8
 80068e2:	480f      	ldr	r0, [pc, #60]	; (8006920 <HAL_TIM_ConfigClockSource+0x2d8>)
 80068e4:	f7fa fcbf 	bl	8001266 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	2b0f      	cmp	r3, #15
 80068ee:	d904      	bls.n	80068fa <HAL_TIM_ConfigClockSource+0x2b2>
 80068f0:	f241 41c9 	movw	r1, #5321	; 0x14c9
 80068f4:	480a      	ldr	r0, [pc, #40]	; (8006920 <HAL_TIM_ConfigClockSource+0x2d8>)
 80068f6:	f7fa fcb6 	bl	8001266 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	6899      	ldr	r1, [r3, #8]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f000 fd01 	bl	8007310 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800691c:	609a      	str	r2, [r3, #8]
      break;
 800691e:	e0fe      	b.n	8006b1e <HAL_TIM_ConfigClockSource+0x4d6>
 8006920:	0800b190 	.word	0x0800b190
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40001000 	.word	0x40001000
 800692c:	40001400 	.word	0x40001400
 8006930:	40014000 	.word	0x40014000
 8006934:	40014400 	.word	0x40014400
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a7e      	ldr	r2, [pc, #504]	; (8006b38 <HAL_TIM_ConfigClockSource+0x4f0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00e      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0x318>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694a:	d009      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0x318>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a7a      	ldr	r2, [pc, #488]	; (8006b3c <HAL_TIM_ConfigClockSource+0x4f4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d004      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0x318>
 8006956:	f241 41d8 	movw	r1, #5336	; 0x14d8
 800695a:	4879      	ldr	r0, [pc, #484]	; (8006b40 <HAL_TIM_ConfigClockSource+0x4f8>)
 800695c:	f7fa fc83 	bl	8001266 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006968:	d014      	beq.n	8006994 <HAL_TIM_ConfigClockSource+0x34c>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d010      	beq.n	8006994 <HAL_TIM_ConfigClockSource+0x34c>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00c      	beq.n	8006994 <HAL_TIM_ConfigClockSource+0x34c>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d008      	beq.n	8006994 <HAL_TIM_ConfigClockSource+0x34c>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2b0a      	cmp	r3, #10
 8006988:	d004      	beq.n	8006994 <HAL_TIM_ConfigClockSource+0x34c>
 800698a:	f241 41db 	movw	r1, #5339	; 0x14db
 800698e:	486c      	ldr	r0, [pc, #432]	; (8006b40 <HAL_TIM_ConfigClockSource+0x4f8>)
 8006990:	f7fa fc69 	bl	8001266 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	2b0f      	cmp	r3, #15
 800699a:	d904      	bls.n	80069a6 <HAL_TIM_ConfigClockSource+0x35e>
 800699c:	f241 41dc 	movw	r1, #5340	; 0x14dc
 80069a0:	4867      	ldr	r0, [pc, #412]	; (8006b40 <HAL_TIM_ConfigClockSource+0x4f8>)
 80069a2:	f7fa fc60 	bl	8001266 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	6859      	ldr	r1, [r3, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f000 fc32 	bl	800721c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2150      	movs	r1, #80	; 0x50
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fc8b 	bl	80072da <TIM_ITRx_SetConfig>
      break;
 80069c4:	e0ab      	b.n	8006b1e <HAL_TIM_ConfigClockSource+0x4d6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a5b      	ldr	r2, [pc, #364]	; (8006b38 <HAL_TIM_ConfigClockSource+0x4f0>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00e      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x3a6>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d8:	d009      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x3a6>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a57      	ldr	r2, [pc, #348]	; (8006b3c <HAL_TIM_ConfigClockSource+0x4f4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d004      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x3a6>
 80069e4:	f241 41e8 	movw	r1, #5352	; 0x14e8
 80069e8:	4855      	ldr	r0, [pc, #340]	; (8006b40 <HAL_TIM_ConfigClockSource+0x4f8>)
 80069ea:	f7fa fc3c 	bl	8001266 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f6:	d014      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x3da>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d010      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x3da>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00c      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x3da>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d008      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x3da>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2b0a      	cmp	r3, #10
 8006a16:	d004      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x3da>
 8006a18:	f241 41eb 	movw	r1, #5355	; 0x14eb
 8006a1c:	4848      	ldr	r0, [pc, #288]	; (8006b40 <HAL_TIM_ConfigClockSource+0x4f8>)
 8006a1e:	f7fa fc22 	bl	8001266 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	2b0f      	cmp	r3, #15
 8006a28:	d904      	bls.n	8006a34 <HAL_TIM_ConfigClockSource+0x3ec>
 8006a2a:	f241 41ec 	movw	r1, #5356	; 0x14ec
 8006a2e:	4844      	ldr	r0, [pc, #272]	; (8006b40 <HAL_TIM_ConfigClockSource+0x4f8>)
 8006a30:	f7fa fc19 	bl	8001266 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	6859      	ldr	r1, [r3, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	461a      	mov	r2, r3
 8006a42:	f000 fc1a 	bl	800727a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2160      	movs	r1, #96	; 0x60
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 fc44 	bl	80072da <TIM_ITRx_SetConfig>
      break;
 8006a52:	e064      	b.n	8006b1e <HAL_TIM_ConfigClockSource+0x4d6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a37      	ldr	r2, [pc, #220]	; (8006b38 <HAL_TIM_ConfigClockSource+0x4f0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00e      	beq.n	8006a7c <HAL_TIM_ConfigClockSource+0x434>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a66:	d009      	beq.n	8006a7c <HAL_TIM_ConfigClockSource+0x434>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a33      	ldr	r2, [pc, #204]	; (8006b3c <HAL_TIM_ConfigClockSource+0x4f4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d004      	beq.n	8006a7c <HAL_TIM_ConfigClockSource+0x434>
 8006a72:	f241 41f8 	movw	r1, #5368	; 0x14f8
 8006a76:	4832      	ldr	r0, [pc, #200]	; (8006b40 <HAL_TIM_ConfigClockSource+0x4f8>)
 8006a78:	f7fa fbf5 	bl	8001266 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a84:	d014      	beq.n	8006ab0 <HAL_TIM_ConfigClockSource+0x468>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d010      	beq.n	8006ab0 <HAL_TIM_ConfigClockSource+0x468>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00c      	beq.n	8006ab0 <HAL_TIM_ConfigClockSource+0x468>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d008      	beq.n	8006ab0 <HAL_TIM_ConfigClockSource+0x468>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b0a      	cmp	r3, #10
 8006aa4:	d004      	beq.n	8006ab0 <HAL_TIM_ConfigClockSource+0x468>
 8006aa6:	f241 41fb 	movw	r1, #5371	; 0x14fb
 8006aaa:	4825      	ldr	r0, [pc, #148]	; (8006b40 <HAL_TIM_ConfigClockSource+0x4f8>)
 8006aac:	f7fa fbdb 	bl	8001266 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2b0f      	cmp	r3, #15
 8006ab6:	d904      	bls.n	8006ac2 <HAL_TIM_ConfigClockSource+0x47a>
 8006ab8:	f241 41fc 	movw	r1, #5372	; 0x14fc
 8006abc:	4820      	ldr	r0, [pc, #128]	; (8006b40 <HAL_TIM_ConfigClockSource+0x4f8>)
 8006abe:	f7fa fbd2 	bl	8001266 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6859      	ldr	r1, [r3, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f000 fba4 	bl	800721c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2140      	movs	r1, #64	; 0x40
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fbfd 	bl	80072da <TIM_ITRx_SetConfig>
      break;
 8006ae0:	e01d      	b.n	8006b1e <HAL_TIM_ConfigClockSource+0x4d6>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a14      	ldr	r2, [pc, #80]	; (8006b38 <HAL_TIM_ConfigClockSource+0x4f0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00e      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0x4c2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af4:	d009      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0x4c2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a10      	ldr	r2, [pc, #64]	; (8006b3c <HAL_TIM_ConfigClockSource+0x4f4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0x4c2>
 8006b00:	f241 510b 	movw	r1, #5387	; 0x150b
 8006b04:	480e      	ldr	r0, [pc, #56]	; (8006b40 <HAL_TIM_ConfigClockSource+0x4f8>)
 8006b06:	f7fa fbae 	bl	8001266 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f000 fbe0 	bl	80072da <TIM_ITRx_SetConfig>
        break;
 8006b1a:	e000      	b.n	8006b1e <HAL_TIM_ConfigClockSource+0x4d6>
      break;
 8006b1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40012c00 	.word	0x40012c00
 8006b3c:	40014000 	.word	0x40014000
 8006b40:	0800b190 	.word	0x0800b190

08006b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a2a      	ldr	r2, [pc, #168]	; (8006c00 <TIM_Base_SetConfig+0xbc>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_Base_SetConfig+0x20>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b62:	d108      	bne.n	8006b76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a21      	ldr	r2, [pc, #132]	; (8006c00 <TIM_Base_SetConfig+0xbc>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_Base_SetConfig+0x52>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b84:	d007      	beq.n	8006b96 <TIM_Base_SetConfig+0x52>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a1e      	ldr	r2, [pc, #120]	; (8006c04 <TIM_Base_SetConfig+0xc0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_Base_SetConfig+0x52>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a1d      	ldr	r2, [pc, #116]	; (8006c08 <TIM_Base_SetConfig+0xc4>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a0c      	ldr	r2, [pc, #48]	; (8006c00 <TIM_Base_SetConfig+0xbc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d007      	beq.n	8006be4 <TIM_Base_SetConfig+0xa0>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a0b      	ldr	r2, [pc, #44]	; (8006c04 <TIM_Base_SetConfig+0xc0>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d003      	beq.n	8006be4 <TIM_Base_SetConfig+0xa0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a0a      	ldr	r2, [pc, #40]	; (8006c08 <TIM_Base_SetConfig+0xc4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d103      	bne.n	8006bec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	615a      	str	r2, [r3, #20]
}
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40012c00 	.word	0x40012c00
 8006c04:	40014000 	.word	0x40014000
 8006c08:	40014400 	.word	0x40014400

08006c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f023 0201 	bic.w	r2, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0303 	bic.w	r3, r3, #3
 8006c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f023 0302 	bic.w	r3, r3, #2
 8006c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a38      	ldr	r2, [pc, #224]	; (8006d48 <TIM_OC1_SetConfig+0x13c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d007      	beq.n	8006c7c <TIM_OC1_SetConfig+0x70>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a37      	ldr	r2, [pc, #220]	; (8006d4c <TIM_OC1_SetConfig+0x140>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d003      	beq.n	8006c7c <TIM_OC1_SetConfig+0x70>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a36      	ldr	r2, [pc, #216]	; (8006d50 <TIM_OC1_SetConfig+0x144>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d119      	bne.n	8006cb0 <TIM_OC1_SetConfig+0xa4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <TIM_OC1_SetConfig+0x8a>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d004      	beq.n	8006c96 <TIM_OC1_SetConfig+0x8a>
 8006c8c:	f641 2189 	movw	r1, #6793	; 0x1a89
 8006c90:	4830      	ldr	r0, [pc, #192]	; (8006d54 <TIM_OC1_SetConfig+0x148>)
 8006c92:	f7fa fae8 	bl	8001266 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f023 0308 	bic.w	r3, r3, #8
 8006c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0304 	bic.w	r3, r3, #4
 8006cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a25      	ldr	r2, [pc, #148]	; (8006d48 <TIM_OC1_SetConfig+0x13c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <TIM_OC1_SetConfig+0xbc>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a24      	ldr	r2, [pc, #144]	; (8006d4c <TIM_OC1_SetConfig+0x140>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_OC1_SetConfig+0xbc>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a23      	ldr	r2, [pc, #140]	; (8006d50 <TIM_OC1_SetConfig+0x144>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d12d      	bne.n	8006d24 <TIM_OC1_SetConfig+0x118>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd0:	d008      	beq.n	8006ce4 <TIM_OC1_SetConfig+0xd8>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d004      	beq.n	8006ce4 <TIM_OC1_SetConfig+0xd8>
 8006cda:	f641 2196 	movw	r1, #6806	; 0x1a96
 8006cde:	481d      	ldr	r0, [pc, #116]	; (8006d54 <TIM_OC1_SetConfig+0x148>)
 8006ce0:	f7fa fac1 	bl	8001266 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cec:	d008      	beq.n	8006d00 <TIM_OC1_SetConfig+0xf4>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d004      	beq.n	8006d00 <TIM_OC1_SetConfig+0xf4>
 8006cf6:	f641 2197 	movw	r1, #6807	; 0x1a97
 8006cfa:	4816      	ldr	r0, [pc, #88]	; (8006d54 <TIM_OC1_SetConfig+0x148>)
 8006cfc:	f7fa fab3 	bl	8001266 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	621a      	str	r2, [r3, #32]
}
 8006d3e:	bf00      	nop
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	40012c00 	.word	0x40012c00
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	40014400 	.word	0x40014400
 8006d54:	0800b190 	.word	0x0800b190

08006d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	f023 0210 	bic.w	r2, r3, #16
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	021b      	lsls	r3, r3, #8
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f023 0320 	bic.w	r3, r3, #32
 8006da6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a35      	ldr	r2, [pc, #212]	; (8006e8c <TIM_OC2_SetConfig+0x134>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d11a      	bne.n	8006df2 <TIM_OC2_SetConfig+0x9a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d008      	beq.n	8006dd6 <TIM_OC2_SetConfig+0x7e>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d004      	beq.n	8006dd6 <TIM_OC2_SetConfig+0x7e>
 8006dcc:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 8006dd0:	482f      	ldr	r0, [pc, #188]	; (8006e90 <TIM_OC2_SetConfig+0x138>)
 8006dd2:	f7fa fa48 	bl	8001266 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a25      	ldr	r2, [pc, #148]	; (8006e8c <TIM_OC2_SetConfig+0x134>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d007      	beq.n	8006e0a <TIM_OC2_SetConfig+0xb2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a25      	ldr	r2, [pc, #148]	; (8006e94 <TIM_OC2_SetConfig+0x13c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d003      	beq.n	8006e0a <TIM_OC2_SetConfig+0xb2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a24      	ldr	r2, [pc, #144]	; (8006e98 <TIM_OC2_SetConfig+0x140>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d12f      	bne.n	8006e6a <TIM_OC2_SetConfig+0x112>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e12:	d008      	beq.n	8006e26 <TIM_OC2_SetConfig+0xce>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d004      	beq.n	8006e26 <TIM_OC2_SetConfig+0xce>
 8006e1c:	f641 21e2 	movw	r1, #6882	; 0x1ae2
 8006e20:	481b      	ldr	r0, [pc, #108]	; (8006e90 <TIM_OC2_SetConfig+0x138>)
 8006e22:	f7fa fa20 	bl	8001266 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e2e:	d008      	beq.n	8006e42 <TIM_OC2_SetConfig+0xea>
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d004      	beq.n	8006e42 <TIM_OC2_SetConfig+0xea>
 8006e38:	f641 21e3 	movw	r1, #6883	; 0x1ae3
 8006e3c:	4814      	ldr	r0, [pc, #80]	; (8006e90 <TIM_OC2_SetConfig+0x138>)
 8006e3e:	f7fa fa12 	bl	8001266 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	621a      	str	r2, [r3, #32]
}
 8006e84:	bf00      	nop
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	0800b190 	.word	0x0800b190
 8006e94:	40014000 	.word	0x40014000
 8006e98:	40014400 	.word	0x40014400

08006e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0303 	bic.w	r3, r3, #3
 8006ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	021b      	lsls	r3, r3, #8
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a35      	ldr	r2, [pc, #212]	; (8006fd0 <TIM_OC3_SetConfig+0x134>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d11a      	bne.n	8006f34 <TIM_OC3_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <TIM_OC3_SetConfig+0x7c>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	d004      	beq.n	8006f18 <TIM_OC3_SetConfig+0x7c>
 8006f0e:	f641 311f 	movw	r1, #6943	; 0x1b1f
 8006f12:	4830      	ldr	r0, [pc, #192]	; (8006fd4 <TIM_OC3_SetConfig+0x138>)
 8006f14:	f7fa f9a7 	bl	8001266 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a26      	ldr	r2, [pc, #152]	; (8006fd0 <TIM_OC3_SetConfig+0x134>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d007      	beq.n	8006f4c <TIM_OC3_SetConfig+0xb0>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a26      	ldr	r2, [pc, #152]	; (8006fd8 <TIM_OC3_SetConfig+0x13c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_OC3_SetConfig+0xb0>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a25      	ldr	r2, [pc, #148]	; (8006fdc <TIM_OC3_SetConfig+0x140>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d12f      	bne.n	8006fac <TIM_OC3_SetConfig+0x110>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f54:	d008      	beq.n	8006f68 <TIM_OC3_SetConfig+0xcc>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <TIM_OC3_SetConfig+0xcc>
 8006f5e:	f641 312c 	movw	r1, #6956	; 0x1b2c
 8006f62:	481c      	ldr	r0, [pc, #112]	; (8006fd4 <TIM_OC3_SetConfig+0x138>)
 8006f64:	f7fa f97f 	bl	8001266 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f70:	d008      	beq.n	8006f84 <TIM_OC3_SetConfig+0xe8>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d004      	beq.n	8006f84 <TIM_OC3_SetConfig+0xe8>
 8006f7a:	f641 312d 	movw	r1, #6957	; 0x1b2d
 8006f7e:	4815      	ldr	r0, [pc, #84]	; (8006fd4 <TIM_OC3_SetConfig+0x138>)
 8006f80:	f7fa f971 	bl	8001266 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	40012c00 	.word	0x40012c00
 8006fd4:	0800b190 	.word	0x0800b190
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40014400 	.word	0x40014400

08006fe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800700e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800702e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	031b      	lsls	r3, r3, #12
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a1a      	ldr	r2, [pc, #104]	; (80070a8 <TIM_OC4_SetConfig+0xc8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d007      	beq.n	8007054 <TIM_OC4_SetConfig+0x74>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a19      	ldr	r2, [pc, #100]	; (80070ac <TIM_OC4_SetConfig+0xcc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_OC4_SetConfig+0x74>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <TIM_OC4_SetConfig+0xd0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d117      	bne.n	8007084 <TIM_OC4_SetConfig+0xa4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705c:	d008      	beq.n	8007070 <TIM_OC4_SetConfig+0x90>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d004      	beq.n	8007070 <TIM_OC4_SetConfig+0x90>
 8007066:	f641 316b 	movw	r1, #7019	; 0x1b6b
 800706a:	4812      	ldr	r0, [pc, #72]	; (80070b4 <TIM_OC4_SetConfig+0xd4>)
 800706c:	f7fa f8fb 	bl	8001266 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007076:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	019b      	lsls	r3, r3, #6
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	40012c00 	.word	0x40012c00
 80070ac:	40014000 	.word	0x40014000
 80070b0:	40014400 	.word	0x40014400
 80070b4:	0800b190 	.word	0x0800b190

080070b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a13      	ldr	r2, [pc, #76]	; (800715c <TIM_OC5_SetConfig+0xa4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d007      	beq.n	8007122 <TIM_OC5_SetConfig+0x6a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a12      	ldr	r2, [pc, #72]	; (8007160 <TIM_OC5_SetConfig+0xa8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d003      	beq.n	8007122 <TIM_OC5_SetConfig+0x6a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a11      	ldr	r2, [pc, #68]	; (8007164 <TIM_OC5_SetConfig+0xac>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d109      	bne.n	8007136 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007128:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	4313      	orrs	r3, r2
 8007134:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	621a      	str	r2, [r3, #32]
}
 8007150:	bf00      	nop
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	40012c00 	.word	0x40012c00
 8007160:	40014000 	.word	0x40014000
 8007164:	40014400 	.word	0x40014400

08007168 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	051b      	lsls	r3, r3, #20
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a14      	ldr	r2, [pc, #80]	; (8007210 <TIM_OC6_SetConfig+0xa8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d007      	beq.n	80071d4 <TIM_OC6_SetConfig+0x6c>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a13      	ldr	r2, [pc, #76]	; (8007214 <TIM_OC6_SetConfig+0xac>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d003      	beq.n	80071d4 <TIM_OC6_SetConfig+0x6c>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a12      	ldr	r2, [pc, #72]	; (8007218 <TIM_OC6_SetConfig+0xb0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d109      	bne.n	80071e8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	029b      	lsls	r3, r3, #10
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40012c00 	.word	0x40012c00
 8007214:	40014000 	.word	0x40014000
 8007218:	40014400 	.word	0x40014400

0800721c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f023 0201 	bic.w	r2, r3, #1
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f023 030a 	bic.w	r3, r3, #10
 8007258:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	4313      	orrs	r3, r2
 8007260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	621a      	str	r2, [r3, #32]
}
 800726e:	bf00      	nop
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800727a:	b480      	push	{r7}
 800727c:	b087      	sub	sp, #28
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	f023 0210 	bic.w	r2, r3, #16
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	031b      	lsls	r3, r3, #12
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	4313      	orrs	r3, r2
 80072c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	621a      	str	r2, [r3, #32]
}
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072da:	b480      	push	{r7}
 80072dc:	b085      	sub	sp, #20
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f043 0307 	orr.w	r3, r3, #7
 80072fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	609a      	str	r2, [r3, #8]
}
 8007304:	bf00      	nop
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800732a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	021a      	lsls	r2, r3, #8
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	431a      	orrs	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4313      	orrs	r3, r2
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	609a      	str	r2, [r3, #8]
}
 8007344:	bf00      	nop
 8007346:	371c      	adds	r7, #28
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4a25      	ldr	r2, [pc, #148]	; (80073f4 <TIM_CCxChannelCmd+0xa4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d010      	beq.n	8007386 <TIM_CCxChannelCmd+0x36>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736a:	d00c      	beq.n	8007386 <TIM_CCxChannelCmd+0x36>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4a22      	ldr	r2, [pc, #136]	; (80073f8 <TIM_CCxChannelCmd+0xa8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d008      	beq.n	8007386 <TIM_CCxChannelCmd+0x36>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4a21      	ldr	r2, [pc, #132]	; (80073fc <TIM_CCxChannelCmd+0xac>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d004      	beq.n	8007386 <TIM_CCxChannelCmd+0x36>
 800737c:	f44f 51ee 	mov.w	r1, #7616	; 0x1dc0
 8007380:	481f      	ldr	r0, [pc, #124]	; (8007400 <TIM_CCxChannelCmd+0xb0>)
 8007382:	f7f9 ff70 	bl	8001266 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d016      	beq.n	80073ba <TIM_CCxChannelCmd+0x6a>
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b04      	cmp	r3, #4
 8007390:	d013      	beq.n	80073ba <TIM_CCxChannelCmd+0x6a>
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b08      	cmp	r3, #8
 8007396:	d010      	beq.n	80073ba <TIM_CCxChannelCmd+0x6a>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b0c      	cmp	r3, #12
 800739c:	d00d      	beq.n	80073ba <TIM_CCxChannelCmd+0x6a>
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d00a      	beq.n	80073ba <TIM_CCxChannelCmd+0x6a>
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b14      	cmp	r3, #20
 80073a8:	d007      	beq.n	80073ba <TIM_CCxChannelCmd+0x6a>
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b3c      	cmp	r3, #60	; 0x3c
 80073ae:	d004      	beq.n	80073ba <TIM_CCxChannelCmd+0x6a>
 80073b0:	f641 51c1 	movw	r1, #7617	; 0x1dc1
 80073b4:	4812      	ldr	r0, [pc, #72]	; (8007400 <TIM_CCxChannelCmd+0xb0>)
 80073b6:	f7f9 ff56 	bl	8001266 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f003 031f 	and.w	r3, r3, #31
 80073c0:	2201      	movs	r2, #1
 80073c2:	fa02 f303 	lsl.w	r3, r2, r3
 80073c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a1a      	ldr	r2, [r3, #32]
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	43db      	mvns	r3, r3
 80073d0:	401a      	ands	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1a      	ldr	r2, [r3, #32]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	fa01 f303 	lsl.w	r3, r1, r3
 80073e6:	431a      	orrs	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	621a      	str	r2, [r3, #32]
}
 80073ec:	bf00      	nop
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	40012c00 	.word	0x40012c00
 80073f8:	40014000 	.word	0x40014000
 80073fc:	40014400 	.word	0x40014400
 8007400:	0800b190 	.word	0x0800b190

08007404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a81      	ldr	r2, [pc, #516]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d018      	beq.n	800744a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007420:	d013      	beq.n	800744a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a7d      	ldr	r2, [pc, #500]	; (800761c <HAL_TIMEx_MasterConfigSynchronization+0x218>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00e      	beq.n	800744a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a7b      	ldr	r2, [pc, #492]	; (8007620 <HAL_TIMEx_MasterConfigSynchronization+0x21c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d009      	beq.n	800744a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a7a      	ldr	r2, [pc, #488]	; (8007624 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d004      	beq.n	800744a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007440:	f240 715b 	movw	r1, #1883	; 0x75b
 8007444:	4878      	ldr	r0, [pc, #480]	; (8007628 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8007446:	f7f9 ff0e 	bl	8001266 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d020      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b10      	cmp	r3, #16
 8007458:	d01c      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b20      	cmp	r3, #32
 8007460:	d018      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b30      	cmp	r3, #48	; 0x30
 8007468:	d014      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b40      	cmp	r3, #64	; 0x40
 8007470:	d010      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b50      	cmp	r3, #80	; 0x50
 8007478:	d00c      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b60      	cmp	r3, #96	; 0x60
 8007480:	d008      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b70      	cmp	r3, #112	; 0x70
 8007488:	d004      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800748a:	f240 715c 	movw	r1, #1884	; 0x75c
 800748e:	4866      	ldr	r0, [pc, #408]	; (8007628 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8007490:	f7f9 fee9 	bl	8001266 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	2b80      	cmp	r3, #128	; 0x80
 800749a:	d008      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d004      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80074a4:	f240 715d 	movw	r1, #1885	; 0x75d
 80074a8:	485f      	ldr	r0, [pc, #380]	; (8007628 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 80074aa:	f7f9 fedc 	bl	8001266 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e0a8      	b.n	800760e <HAL_TIMEx_MasterConfigSynchronization+0x20a>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a4d      	ldr	r2, [pc, #308]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d161      	bne.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d054      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074f6:	d04f      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007500:	d04a      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800750a:	d045      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007514:	d040      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800751e:	d03b      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007528:	d036      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007532:	d031      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800753c:	d02c      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007546:	d027      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8007550:	d022      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800755a:	d01d      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8007564:	d018      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800756e:	d013      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8007578:	d00e      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8007582:	d009      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800758c:	d004      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800758e:	f240 716f 	movw	r1, #1903	; 0x76f
 8007592:	4825      	ldr	r0, [pc, #148]	; (8007628 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8007594:	f7f9 fe67 	bl	8001266 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800759e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a13      	ldr	r2, [pc, #76]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d009      	beq.n	80075e2 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d6:	d004      	beq.n	80075e2 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a11      	ldr	r2, [pc, #68]	; (8007624 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d10c      	bne.n	80075fc <HAL_TIMEx_MasterConfigSynchronization+0x1f8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	40012c00 	.word	0x40012c00
 800761c:	40001000 	.word	0x40001000
 8007620:	40001400 	.word	0x40001400
 8007624:	40014000 	.word	0x40014000
 8007628:	0800b1c8 	.word	0x0800b1c8

0800762c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e06d      	b.n	800771a <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d014      	beq.n	8007670 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a36      	ldr	r2, [pc, #216]	; (8007724 <HAL_UART_Init+0xf8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d023      	beq.n	8007698 <HAL_UART_Init+0x6c>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a34      	ldr	r2, [pc, #208]	; (8007728 <HAL_UART_Init+0xfc>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d01e      	beq.n	8007698 <HAL_UART_Init+0x6c>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a33      	ldr	r2, [pc, #204]	; (800772c <HAL_UART_Init+0x100>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d019      	beq.n	8007698 <HAL_UART_Init+0x6c>
 8007664:	f240 1143 	movw	r1, #323	; 0x143
 8007668:	4831      	ldr	r0, [pc, #196]	; (8007730 <HAL_UART_Init+0x104>)
 800766a:	f7f9 fdfc 	bl	8001266 <assert_failed>
 800766e:	e013      	b.n	8007698 <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a2b      	ldr	r2, [pc, #172]	; (8007724 <HAL_UART_Init+0xf8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d00e      	beq.n	8007698 <HAL_UART_Init+0x6c>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a2a      	ldr	r2, [pc, #168]	; (8007728 <HAL_UART_Init+0xfc>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d009      	beq.n	8007698 <HAL_UART_Init+0x6c>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a28      	ldr	r2, [pc, #160]	; (800772c <HAL_UART_Init+0x100>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d004      	beq.n	8007698 <HAL_UART_Init+0x6c>
 800768e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007692:	4827      	ldr	r0, [pc, #156]	; (8007730 <HAL_UART_Init+0x104>)
 8007694:	f7f9 fde7 	bl	8001266 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7f9 ff2f 	bl	800150c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2224      	movs	r2, #36	; 0x24
 80076b2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0201 	bic.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fbc3 	bl	8007e50 <UART_SetConfig>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d101      	bne.n	80076d4 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e022      	b.n	800771a <HAL_UART_Init+0xee>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <HAL_UART_Init+0xb6>
  {
    UART_AdvFeatureConfig(huart);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fe69 	bl	80083b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007700:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f042 0201 	orr.w	r2, r2, #1
 8007710:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 ff94 	bl	8008640 <UART_CheckIdleState>
 8007718:	4603      	mov	r3, r0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	40013800 	.word	0x40013800
 8007728:	40004400 	.word	0x40004400
 800772c:	40008000 	.word	0x40008000
 8007730:	0800b204 	.word	0x0800b204

08007734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	; 0x28
 8007738:	af02      	add	r7, sp, #8
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	4613      	mov	r3, r2
 8007742:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007748:	2b20      	cmp	r3, #32
 800774a:	f040 8081 	bne.w	8007850 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <HAL_UART_Transmit+0x26>
 8007754:	88fb      	ldrh	r3, [r7, #6]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e079      	b.n	8007852 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007764:	2b01      	cmp	r3, #1
 8007766:	d101      	bne.n	800776c <HAL_UART_Transmit+0x38>
 8007768:	2302      	movs	r3, #2
 800776a:	e072      	b.n	8007852 <HAL_UART_Transmit+0x11e>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2221      	movs	r2, #33	; 0x21
 800777e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007780:	f7fa f922 	bl	80019c8 <HAL_GetTick>
 8007784:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	88fa      	ldrh	r2, [r7, #6]
 800778a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	88fa      	ldrh	r2, [r7, #6]
 8007792:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800779e:	d108      	bne.n	80077b2 <HAL_UART_Transmit+0x7e>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d104      	bne.n	80077b2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	61bb      	str	r3, [r7, #24]
 80077b0:	e003      	b.n	80077ba <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80077c2:	e02d      	b.n	8007820 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2200      	movs	r2, #0
 80077cc:	2180      	movs	r1, #128	; 0x80
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 ff7b 	bl	80086ca <UART_WaitOnFlagUntilTimeout>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e039      	b.n	8007852 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10b      	bne.n	80077fc <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	881a      	ldrh	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077f0:	b292      	uxth	r2, r2
 80077f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	3302      	adds	r3, #2
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	e008      	b.n	800780e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	781a      	ldrb	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	b292      	uxth	r2, r2
 8007806:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	3301      	adds	r3, #1
 800780c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007814:	b29b      	uxth	r3, r3
 8007816:	3b01      	subs	r3, #1
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1cb      	bne.n	80077c4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2200      	movs	r2, #0
 8007834:	2140      	movs	r1, #64	; 0x40
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 ff47 	bl	80086ca <UART_WaitOnFlagUntilTimeout>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e005      	b.n	8007852 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2220      	movs	r2, #32
 800784a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	e000      	b.n	8007852 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007850:	2302      	movs	r3, #2
  }
}
 8007852:	4618      	mov	r0, r3
 8007854:	3720      	adds	r7, #32
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800786e:	2b20      	cmp	r3, #32
 8007870:	d16c      	bne.n	800794c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_UART_Receive_DMA+0x22>
 8007878:	88fb      	ldrh	r3, [r7, #6]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e065      	b.n	800794e <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007888:	2b01      	cmp	r3, #1
 800788a:	d101      	bne.n	8007890 <HAL_UART_Receive_DMA+0x34>
 800788c:	2302      	movs	r3, #2
 800788e:	e05e      	b.n	800794e <HAL_UART_Receive_DMA+0xf2>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	88fa      	ldrh	r2, [r7, #6]
 80078a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2222      	movs	r2, #34	; 0x22
 80078b0:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d02a      	beq.n	8007910 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078be:	4a26      	ldr	r2, [pc, #152]	; (8007958 <HAL_UART_Receive_DMA+0xfc>)
 80078c0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078c6:	4a25      	ldr	r2, [pc, #148]	; (800795c <HAL_UART_Receive_DMA+0x100>)
 80078c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ce:	4a24      	ldr	r2, [pc, #144]	; (8007960 <HAL_UART_Receive_DMA+0x104>)
 80078d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d6:	2200      	movs	r2, #0
 80078d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3324      	adds	r3, #36	; 0x24
 80078e4:	4619      	mov	r1, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ea:	461a      	mov	r2, r3
 80078ec:	88fb      	ldrh	r3, [r7, #6]
 80078ee:	f7fa fb91 	bl	8002014 <HAL_DMA_Start_IT>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00b      	beq.n	8007910 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2210      	movs	r2, #16
 80078fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2220      	movs	r2, #32
 800790a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e01e      	b.n	800794e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007926:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0201 	orr.w	r2, r2, #1
 8007936:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007946:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	e000      	b.n	800794e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800794c:	2302      	movs	r3, #2
  }
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	0800882b 	.word	0x0800882b
 800795c:	08008893 	.word	0x08008893
 8007960:	080088af 	.word	0x080088af

08007964 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007970:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007976:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <HAL_UART_DMAPause+0x22>
 8007982:	2302      	movs	r3, #2
 8007984:	e03c      	b.n	8007a00 <HAL_UART_DMAPause+0x9c>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007998:	2b80      	cmp	r3, #128	; 0x80
 800799a:	d10a      	bne.n	80079b2 <HAL_UART_DMAPause+0x4e>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b21      	cmp	r3, #33	; 0x21
 80079a0:	d107      	bne.n	80079b2 <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079b0:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079bc:	2b40      	cmp	r3, #64	; 0x40
 80079be:	d11a      	bne.n	80079f6 <HAL_UART_DMAPause+0x92>
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2b22      	cmp	r3, #34	; 0x22
 80079c4:	d117      	bne.n	80079f6 <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079d4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0201 	bic.w	r2, r2, #1
 80079e4:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f4:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_UART_DMAResume+0x16>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e034      	b.n	8007a8c <HAL_UART_DMAResume+0x80>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a2e:	2b21      	cmp	r3, #33	; 0x21
 8007a30:	d107      	bne.n	8007a42 <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a40:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a46:	2b22      	cmp	r3, #34	; 0x22
 8007a48:	d11b      	bne.n	8007a82 <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2208      	movs	r2, #8
 8007a50:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a60:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0201 	orr.w	r2, r2, #1
 8007a70:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a80:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aa4:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aaa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab6:	2b80      	cmp	r3, #128	; 0x80
 8007ab8:	d126      	bne.n	8007b08 <HAL_UART_DMAStop+0x70>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b21      	cmp	r3, #33	; 0x21
 8007abe:	d123      	bne.n	8007b08 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ace:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d014      	beq.n	8007b02 <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fa fb07 	bl	80020f0 <HAL_DMA_Abort>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fa fc2d 	bl	800234c <HAL_DMA_GetError>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b20      	cmp	r3, #32
 8007af6:	d104      	bne.n	8007b02 <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2210      	movs	r2, #16
 8007afc:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e031      	b.n	8007b66 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fe5c 	bl	80087c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b12:	2b40      	cmp	r3, #64	; 0x40
 8007b14:	d126      	bne.n	8007b64 <HAL_UART_DMAStop+0xcc>
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b22      	cmp	r3, #34	; 0x22
 8007b1a:	d123      	bne.n	8007b64 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b2a:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d014      	beq.n	8007b5e <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fa fad9 	bl	80020f0 <HAL_DMA_Abort>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00c      	beq.n	8007b5e <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fa fbff 	bl	800234c <HAL_DMA_GetError>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d104      	bne.n	8007b5e <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2210      	movs	r2, #16
 8007b58:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e003      	b.n	8007b66 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fe43 	bl	80087ea <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b96:	4013      	ands	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d113      	bne.n	8007bc8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00e      	beq.n	8007bc8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	f003 0320 	and.w	r3, r3, #32
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d009      	beq.n	8007bc8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 8114 	beq.w	8007de6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	4798      	blx	r3
      }
      return;
 8007bc6:	e10e      	b.n	8007de6 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 80d6 	beq.w	8007d7c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d105      	bne.n	8007be6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	4b86      	ldr	r3, [pc, #536]	; (8007df8 <HAL_UART_IRQHandler+0x288>)
 8007bde:	4013      	ands	r3, r2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 80cb 	beq.w	8007d7c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00e      	beq.n	8007c0e <HAL_UART_IRQHandler+0x9e>
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d009      	beq.n	8007c0e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c06:	f043 0201 	orr.w	r2, r3, #1
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00e      	beq.n	8007c36 <HAL_UART_IRQHandler+0xc6>
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d009      	beq.n	8007c36 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2202      	movs	r2, #2
 8007c28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c2e:	f043 0204 	orr.w	r2, r3, #4
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00e      	beq.n	8007c5e <HAL_UART_IRQHandler+0xee>
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2204      	movs	r2, #4
 8007c50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c56:	f043 0202 	orr.w	r2, r3, #2
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d013      	beq.n	8007c90 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	f003 0320 	and.w	r3, r3, #32
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d104      	bne.n	8007c7c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d009      	beq.n	8007c90 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2208      	movs	r2, #8
 8007c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c88:	f043 0208 	orr.w	r2, r3, #8
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00f      	beq.n	8007cba <HAL_UART_IRQHandler+0x14a>
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb2:	f043 0220 	orr.w	r2, r3, #32
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 8093 	beq.w	8007dea <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00c      	beq.n	8007ce8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d007      	beq.n	8007ce8 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf8:	2b40      	cmp	r3, #64	; 0x40
 8007cfa:	d004      	beq.n	8007d06 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d031      	beq.n	8007d6a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fd6f 	bl	80087ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d16:	2b40      	cmp	r3, #64	; 0x40
 8007d18:	d123      	bne.n	8007d62 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d28:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d013      	beq.n	8007d5a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d36:	4a31      	ldr	r2, [pc, #196]	; (8007dfc <HAL_UART_IRQHandler+0x28c>)
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fa fa14 	bl	800216c <HAL_DMA_Abort_IT>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d016      	beq.n	8007d78 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007d54:	4610      	mov	r0, r2
 8007d56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d58:	e00e      	b.n	8007d78 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f86e 	bl	8007e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d60:	e00a      	b.n	8007d78 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f86a 	bl	8007e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d68:	e006      	b.n	8007d78 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f866 	bl	8007e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007d76:	e038      	b.n	8007dea <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d78:	bf00      	nop
    return;
 8007d7a:	e036      	b.n	8007dea <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00d      	beq.n	8007da2 <HAL_UART_IRQHandler+0x232>
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d008      	beq.n	8007da2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fdf2 	bl	8008984 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007da0:	e026      	b.n	8007df0 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00d      	beq.n	8007dc8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d008      	beq.n	8007dc8 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d017      	beq.n	8007dee <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
    }
    return;
 8007dc6:	e012      	b.n	8007dee <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00e      	beq.n	8007df0 <HAL_UART_IRQHandler+0x280>
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d009      	beq.n	8007df0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fdb8 	bl	8008952 <UART_EndTransmit_IT>
    return;
 8007de2:	bf00      	nop
 8007de4:	e004      	b.n	8007df0 <HAL_UART_IRQHandler+0x280>
      return;
 8007de6:	bf00      	nop
 8007de8:	e002      	b.n	8007df0 <HAL_UART_IRQHandler+0x280>
    return;
 8007dea:	bf00      	nop
 8007dec:	e000      	b.n	8007df0 <HAL_UART_IRQHandler+0x280>
    return;
 8007dee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007df0:	3720      	adds	r7, #32
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	04000120 	.word	0x04000120
 8007dfc:	08008927 	.word	0x08008927

08007e00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e50:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007e54:	b088      	sub	sp, #32
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	76bb      	strb	r3, [r7, #26]
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	4aab      	ldr	r2, [pc, #684]	; (8008110 <UART_SetConfig+0x2c0>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d904      	bls.n	8007e72 <UART_SetConfig+0x22>
 8007e68:	f640 31b1 	movw	r1, #2993	; 0xbb1
 8007e6c:	48a9      	ldr	r0, [pc, #676]	; (8008114 <UART_SetConfig+0x2c4>)
 8007e6e:	f7f9 f9fa 	bl	8001266 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e7a:	d00d      	beq.n	8007e98 <UART_SetConfig+0x48>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d009      	beq.n	8007e98 <UART_SetConfig+0x48>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8c:	d004      	beq.n	8007e98 <UART_SetConfig+0x48>
 8007e8e:	f640 31b2 	movw	r1, #2994	; 0xbb2
 8007e92:	48a0      	ldr	r0, [pc, #640]	; (8008114 <UART_SetConfig+0x2c4>)
 8007e94:	f7f9 f9e7 	bl	8001266 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a9e      	ldr	r2, [pc, #632]	; (8008118 <UART_SetConfig+0x2c8>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d10e      	bne.n	8007ec0 <UART_SetConfig+0x70>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d030      	beq.n	8007f0c <UART_SetConfig+0xbc>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eb2:	d02b      	beq.n	8007f0c <UART_SetConfig+0xbc>
 8007eb4:	f640 31b5 	movw	r1, #2997	; 0xbb5
 8007eb8:	4896      	ldr	r0, [pc, #600]	; (8008114 <UART_SetConfig+0x2c4>)
 8007eba:	f7f9 f9d4 	bl	8001266 <assert_failed>
 8007ebe:	e025      	b.n	8007f0c <UART_SetConfig+0xbc>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec8:	d012      	beq.n	8007ef0 <UART_SetConfig+0xa0>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <UART_SetConfig+0xa0>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007eda:	d009      	beq.n	8007ef0 <UART_SetConfig+0xa0>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee4:	d004      	beq.n	8007ef0 <UART_SetConfig+0xa0>
 8007ee6:	f640 31b9 	movw	r1, #3001	; 0xbb9
 8007eea:	488a      	ldr	r0, [pc, #552]	; (8008114 <UART_SetConfig+0x2c4>)
 8007eec:	f7f9 f9bb 	bl	8001266 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a1b      	ldr	r3, [r3, #32]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d009      	beq.n	8007f0c <UART_SetConfig+0xbc>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f00:	d004      	beq.n	8007f0c <UART_SetConfig+0xbc>
 8007f02:	f640 31ba 	movw	r1, #3002	; 0xbba
 8007f06:	4883      	ldr	r0, [pc, #524]	; (8008114 <UART_SetConfig+0x2c4>)
 8007f08:	f7f9 f9ad 	bl	8001266 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00e      	beq.n	8007f32 <UART_SetConfig+0xe2>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1c:	d009      	beq.n	8007f32 <UART_SetConfig+0xe2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f26:	d004      	beq.n	8007f32 <UART_SetConfig+0xe2>
 8007f28:	f640 31bd 	movw	r1, #3005	; 0xbbd
 8007f2c:	4879      	ldr	r0, [pc, #484]	; (8008114 <UART_SetConfig+0x2c4>)
 8007f2e:	f7f9 f99a 	bl	8001266 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f023 030c 	bic.w	r3, r3, #12
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d103      	bne.n	8007f46 <UART_SetConfig+0xf6>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d104      	bne.n	8007f50 <UART_SetConfig+0x100>
 8007f46:	f640 31be 	movw	r1, #3006	; 0xbbe
 8007f4a:	4872      	ldr	r0, [pc, #456]	; (8008114 <UART_SetConfig+0x2c4>)
 8007f4c:	f7f9 f98b 	bl	8001266 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d013      	beq.n	8007f80 <UART_SetConfig+0x130>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f60:	d00e      	beq.n	8007f80 <UART_SetConfig+0x130>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f6a:	d009      	beq.n	8007f80 <UART_SetConfig+0x130>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f74:	d004      	beq.n	8007f80 <UART_SetConfig+0x130>
 8007f76:	f640 31bf 	movw	r1, #3007	; 0xbbf
 8007f7a:	4866      	ldr	r0, [pc, #408]	; (8008114 <UART_SetConfig+0x2c4>)
 8007f7c:	f7f9 f973 	bl	8001266 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d009      	beq.n	8007f9c <UART_SetConfig+0x14c>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	69db      	ldr	r3, [r3, #28]
 8007f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f90:	d004      	beq.n	8007f9c <UART_SetConfig+0x14c>
 8007f92:	f44f 613c 	mov.w	r1, #3008	; 0xbc0
 8007f96:	485f      	ldr	r0, [pc, #380]	; (8008114 <UART_SetConfig+0x2c4>)
 8007f98:	f7f9 f965 	bl	8001266 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	431a      	orrs	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	4b58      	ldr	r3, [pc, #352]	; (800811c <UART_SetConfig+0x2cc>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	6812      	ldr	r2, [r2, #0]
 8007fc2:	69f9      	ldr	r1, [r7, #28]
 8007fc4:	430b      	orrs	r3, r1
 8007fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a4b      	ldr	r2, [pc, #300]	; (8008118 <UART_SetConfig+0x2c8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d004      	beq.n	8007ff8 <UART_SetConfig+0x1a8>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	430a      	orrs	r2, r1
 800800a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a43      	ldr	r2, [pc, #268]	; (8008120 <UART_SetConfig+0x2d0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d122      	bne.n	800805c <UART_SetConfig+0x20c>
 8008016:	4b43      	ldr	r3, [pc, #268]	; (8008124 <UART_SetConfig+0x2d4>)
 8008018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800801c:	f003 0303 	and.w	r3, r3, #3
 8008020:	2b03      	cmp	r3, #3
 8008022:	d817      	bhi.n	8008054 <UART_SetConfig+0x204>
 8008024:	a201      	add	r2, pc, #4	; (adr r2, 800802c <UART_SetConfig+0x1dc>)
 8008026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802a:	bf00      	nop
 800802c:	0800803d 	.word	0x0800803d
 8008030:	08008049 	.word	0x08008049
 8008034:	08008043 	.word	0x08008043
 8008038:	0800804f 	.word	0x0800804f
 800803c:	2301      	movs	r3, #1
 800803e:	76fb      	strb	r3, [r7, #27]
 8008040:	e080      	b.n	8008144 <UART_SetConfig+0x2f4>
 8008042:	2302      	movs	r3, #2
 8008044:	76fb      	strb	r3, [r7, #27]
 8008046:	e07d      	b.n	8008144 <UART_SetConfig+0x2f4>
 8008048:	2304      	movs	r3, #4
 800804a:	76fb      	strb	r3, [r7, #27]
 800804c:	e07a      	b.n	8008144 <UART_SetConfig+0x2f4>
 800804e:	2308      	movs	r3, #8
 8008050:	76fb      	strb	r3, [r7, #27]
 8008052:	e077      	b.n	8008144 <UART_SetConfig+0x2f4>
 8008054:	2310      	movs	r3, #16
 8008056:	76fb      	strb	r3, [r7, #27]
 8008058:	bf00      	nop
 800805a:	e073      	b.n	8008144 <UART_SetConfig+0x2f4>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a31      	ldr	r2, [pc, #196]	; (8008128 <UART_SetConfig+0x2d8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d134      	bne.n	80080d0 <UART_SetConfig+0x280>
 8008066:	4b2f      	ldr	r3, [pc, #188]	; (8008124 <UART_SetConfig+0x2d4>)
 8008068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800806c:	f003 030c 	and.w	r3, r3, #12
 8008070:	2b0c      	cmp	r3, #12
 8008072:	d829      	bhi.n	80080c8 <UART_SetConfig+0x278>
 8008074:	a201      	add	r2, pc, #4	; (adr r2, 800807c <UART_SetConfig+0x22c>)
 8008076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807a:	bf00      	nop
 800807c:	080080b1 	.word	0x080080b1
 8008080:	080080c9 	.word	0x080080c9
 8008084:	080080c9 	.word	0x080080c9
 8008088:	080080c9 	.word	0x080080c9
 800808c:	080080bd 	.word	0x080080bd
 8008090:	080080c9 	.word	0x080080c9
 8008094:	080080c9 	.word	0x080080c9
 8008098:	080080c9 	.word	0x080080c9
 800809c:	080080b7 	.word	0x080080b7
 80080a0:	080080c9 	.word	0x080080c9
 80080a4:	080080c9 	.word	0x080080c9
 80080a8:	080080c9 	.word	0x080080c9
 80080ac:	080080c3 	.word	0x080080c3
 80080b0:	2300      	movs	r3, #0
 80080b2:	76fb      	strb	r3, [r7, #27]
 80080b4:	e046      	b.n	8008144 <UART_SetConfig+0x2f4>
 80080b6:	2302      	movs	r3, #2
 80080b8:	76fb      	strb	r3, [r7, #27]
 80080ba:	e043      	b.n	8008144 <UART_SetConfig+0x2f4>
 80080bc:	2304      	movs	r3, #4
 80080be:	76fb      	strb	r3, [r7, #27]
 80080c0:	e040      	b.n	8008144 <UART_SetConfig+0x2f4>
 80080c2:	2308      	movs	r3, #8
 80080c4:	76fb      	strb	r3, [r7, #27]
 80080c6:	e03d      	b.n	8008144 <UART_SetConfig+0x2f4>
 80080c8:	2310      	movs	r3, #16
 80080ca:	76fb      	strb	r3, [r7, #27]
 80080cc:	bf00      	nop
 80080ce:	e039      	b.n	8008144 <UART_SetConfig+0x2f4>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a10      	ldr	r2, [pc, #64]	; (8008118 <UART_SetConfig+0x2c8>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d132      	bne.n	8008140 <UART_SetConfig+0x2f0>
 80080da:	4b12      	ldr	r3, [pc, #72]	; (8008124 <UART_SetConfig+0x2d4>)
 80080dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080e8:	d020      	beq.n	800812c <UART_SetConfig+0x2dc>
 80080ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080ee:	d802      	bhi.n	80080f6 <UART_SetConfig+0x2a6>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d007      	beq.n	8008104 <UART_SetConfig+0x2b4>
 80080f4:	e020      	b.n	8008138 <UART_SetConfig+0x2e8>
 80080f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080fa:	d006      	beq.n	800810a <UART_SetConfig+0x2ba>
 80080fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008100:	d017      	beq.n	8008132 <UART_SetConfig+0x2e2>
 8008102:	e019      	b.n	8008138 <UART_SetConfig+0x2e8>
 8008104:	2300      	movs	r3, #0
 8008106:	76fb      	strb	r3, [r7, #27]
 8008108:	e01c      	b.n	8008144 <UART_SetConfig+0x2f4>
 800810a:	2302      	movs	r3, #2
 800810c:	76fb      	strb	r3, [r7, #27]
 800810e:	e019      	b.n	8008144 <UART_SetConfig+0x2f4>
 8008110:	00989680 	.word	0x00989680
 8008114:	0800b204 	.word	0x0800b204
 8008118:	40008000 	.word	0x40008000
 800811c:	efff69f3 	.word	0xefff69f3
 8008120:	40013800 	.word	0x40013800
 8008124:	40021000 	.word	0x40021000
 8008128:	40004400 	.word	0x40004400
 800812c:	2304      	movs	r3, #4
 800812e:	76fb      	strb	r3, [r7, #27]
 8008130:	e008      	b.n	8008144 <UART_SetConfig+0x2f4>
 8008132:	2308      	movs	r3, #8
 8008134:	76fb      	strb	r3, [r7, #27]
 8008136:	e005      	b.n	8008144 <UART_SetConfig+0x2f4>
 8008138:	2310      	movs	r3, #16
 800813a:	76fb      	strb	r3, [r7, #27]
 800813c:	bf00      	nop
 800813e:	e001      	b.n	8008144 <UART_SetConfig+0x2f4>
 8008140:	2310      	movs	r3, #16
 8008142:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a98      	ldr	r2, [pc, #608]	; (80083ac <UART_SetConfig+0x55c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d174      	bne.n	8008238 <UART_SetConfig+0x3e8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800814e:	7efb      	ldrb	r3, [r7, #27]
 8008150:	2b08      	cmp	r3, #8
 8008152:	d824      	bhi.n	800819e <UART_SetConfig+0x34e>
 8008154:	a201      	add	r2, pc, #4	; (adr r2, 800815c <UART_SetConfig+0x30c>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	08008181 	.word	0x08008181
 8008160:	0800819f 	.word	0x0800819f
 8008164:	08008189 	.word	0x08008189
 8008168:	0800819f 	.word	0x0800819f
 800816c:	0800818f 	.word	0x0800818f
 8008170:	0800819f 	.word	0x0800819f
 8008174:	0800819f 	.word	0x0800819f
 8008178:	0800819f 	.word	0x0800819f
 800817c:	08008197 	.word	0x08008197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008180:	f7fc faea 	bl	8004758 <HAL_RCC_GetPCLK1Freq>
 8008184:	6178      	str	r0, [r7, #20]
        break;
 8008186:	e00f      	b.n	80081a8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008188:	4b89      	ldr	r3, [pc, #548]	; (80083b0 <UART_SetConfig+0x560>)
 800818a:	617b      	str	r3, [r7, #20]
        break;
 800818c:	e00c      	b.n	80081a8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800818e:	f7fc fa4d 	bl	800462c <HAL_RCC_GetSysClockFreq>
 8008192:	6178      	str	r0, [r7, #20]
        break;
 8008194:	e008      	b.n	80081a8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800819a:	617b      	str	r3, [r7, #20]
        break;
 800819c:	e004      	b.n	80081a8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	76bb      	strb	r3, [r7, #26]
        break;
 80081a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 80f2 	beq.w	8008394 <UART_SetConfig+0x544>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	4613      	mov	r3, r2
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	4413      	add	r3, r2
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d305      	bcc.n	80081cc <UART_SetConfig+0x37c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d902      	bls.n	80081d2 <UART_SetConfig+0x382>
      {
        ret = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	76bb      	strb	r3, [r7, #26]
 80081d0:	e0e0      	b.n	8008394 <UART_SetConfig+0x544>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	4619      	mov	r1, r3
 80081d6:	f04f 0200 	mov.w	r2, #0
 80081da:	f04f 0300 	mov.w	r3, #0
 80081de:	f04f 0400 	mov.w	r4, #0
 80081e2:	0214      	lsls	r4, r2, #8
 80081e4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80081e8:	020b      	lsls	r3, r1, #8
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6852      	ldr	r2, [r2, #4]
 80081ee:	0852      	lsrs	r2, r2, #1
 80081f0:	4611      	mov	r1, r2
 80081f2:	f04f 0200 	mov.w	r2, #0
 80081f6:	eb13 0b01 	adds.w	fp, r3, r1
 80081fa:	eb44 0c02 	adc.w	ip, r4, r2
 80081fe:	4658      	mov	r0, fp
 8008200:	4661      	mov	r1, ip
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f04f 0400 	mov.w	r4, #0
 800820a:	461a      	mov	r2, r3
 800820c:	4623      	mov	r3, r4
 800820e:	f7f8 f82f 	bl	8000270 <__aeabi_uldivmod>
 8008212:	4603      	mov	r3, r0
 8008214:	460c      	mov	r4, r1
 8008216:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800821e:	d308      	bcc.n	8008232 <UART_SetConfig+0x3e2>
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008226:	d204      	bcs.n	8008232 <UART_SetConfig+0x3e2>
        {
          huart->Instance->BRR = usartdiv;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	60da      	str	r2, [r3, #12]
 8008230:	e0b0      	b.n	8008394 <UART_SetConfig+0x544>
        }
        else
        {
          ret = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	76bb      	strb	r3, [r7, #26]
 8008236:	e0ad      	b.n	8008394 <UART_SetConfig+0x544>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008240:	d15c      	bne.n	80082fc <UART_SetConfig+0x4ac>
  {
    switch (clocksource)
 8008242:	7efb      	ldrb	r3, [r7, #27]
 8008244:	2b08      	cmp	r3, #8
 8008246:	d828      	bhi.n	800829a <UART_SetConfig+0x44a>
 8008248:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <UART_SetConfig+0x400>)
 800824a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824e:	bf00      	nop
 8008250:	08008275 	.word	0x08008275
 8008254:	0800827d 	.word	0x0800827d
 8008258:	08008285 	.word	0x08008285
 800825c:	0800829b 	.word	0x0800829b
 8008260:	0800828b 	.word	0x0800828b
 8008264:	0800829b 	.word	0x0800829b
 8008268:	0800829b 	.word	0x0800829b
 800826c:	0800829b 	.word	0x0800829b
 8008270:	08008293 	.word	0x08008293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008274:	f7fc fa70 	bl	8004758 <HAL_RCC_GetPCLK1Freq>
 8008278:	6178      	str	r0, [r7, #20]
        break;
 800827a:	e013      	b.n	80082a4 <UART_SetConfig+0x454>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800827c:	f7fc fa82 	bl	8004784 <HAL_RCC_GetPCLK2Freq>
 8008280:	6178      	str	r0, [r7, #20]
        break;
 8008282:	e00f      	b.n	80082a4 <UART_SetConfig+0x454>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008284:	4b4a      	ldr	r3, [pc, #296]	; (80083b0 <UART_SetConfig+0x560>)
 8008286:	617b      	str	r3, [r7, #20]
        break;
 8008288:	e00c      	b.n	80082a4 <UART_SetConfig+0x454>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800828a:	f7fc f9cf 	bl	800462c <HAL_RCC_GetSysClockFreq>
 800828e:	6178      	str	r0, [r7, #20]
        break;
 8008290:	e008      	b.n	80082a4 <UART_SetConfig+0x454>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008296:	617b      	str	r3, [r7, #20]
        break;
 8008298:	e004      	b.n	80082a4 <UART_SetConfig+0x454>
      default:
        pclk = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	76bb      	strb	r3, [r7, #26]
        break;
 80082a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d074      	beq.n	8008394 <UART_SetConfig+0x544>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	005a      	lsls	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	085b      	lsrs	r3, r3, #1
 80082b4:	441a      	add	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80082be:	b29b      	uxth	r3, r3
 80082c0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2b0f      	cmp	r3, #15
 80082c6:	d916      	bls.n	80082f6 <UART_SetConfig+0x4a6>
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ce:	d212      	bcs.n	80082f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	f023 030f 	bic.w	r3, r3, #15
 80082d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	085b      	lsrs	r3, r3, #1
 80082de:	b29b      	uxth	r3, r3
 80082e0:	f003 0307 	and.w	r3, r3, #7
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	89fb      	ldrh	r3, [r7, #14]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	89fa      	ldrh	r2, [r7, #14]
 80082f2:	60da      	str	r2, [r3, #12]
 80082f4:	e04e      	b.n	8008394 <UART_SetConfig+0x544>
      }
      else
      {
        ret = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	76bb      	strb	r3, [r7, #26]
 80082fa:	e04b      	b.n	8008394 <UART_SetConfig+0x544>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082fc:	7efb      	ldrb	r3, [r7, #27]
 80082fe:	2b08      	cmp	r3, #8
 8008300:	d827      	bhi.n	8008352 <UART_SetConfig+0x502>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <UART_SetConfig+0x4b8>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	0800832d 	.word	0x0800832d
 800830c:	08008335 	.word	0x08008335
 8008310:	0800833d 	.word	0x0800833d
 8008314:	08008353 	.word	0x08008353
 8008318:	08008343 	.word	0x08008343
 800831c:	08008353 	.word	0x08008353
 8008320:	08008353 	.word	0x08008353
 8008324:	08008353 	.word	0x08008353
 8008328:	0800834b 	.word	0x0800834b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800832c:	f7fc fa14 	bl	8004758 <HAL_RCC_GetPCLK1Freq>
 8008330:	6178      	str	r0, [r7, #20]
        break;
 8008332:	e013      	b.n	800835c <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008334:	f7fc fa26 	bl	8004784 <HAL_RCC_GetPCLK2Freq>
 8008338:	6178      	str	r0, [r7, #20]
        break;
 800833a:	e00f      	b.n	800835c <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800833c:	4b1c      	ldr	r3, [pc, #112]	; (80083b0 <UART_SetConfig+0x560>)
 800833e:	617b      	str	r3, [r7, #20]
        break;
 8008340:	e00c      	b.n	800835c <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008342:	f7fc f973 	bl	800462c <HAL_RCC_GetSysClockFreq>
 8008346:	6178      	str	r0, [r7, #20]
        break;
 8008348:	e008      	b.n	800835c <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800834a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800834e:	617b      	str	r3, [r7, #20]
        break;
 8008350:	e004      	b.n	800835c <UART_SetConfig+0x50c>
      default:
        pclk = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	76bb      	strb	r3, [r7, #26]
        break;
 800835a:	bf00      	nop
    }

    if (pclk != 0U)
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d018      	beq.n	8008394 <UART_SetConfig+0x544>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	085a      	lsrs	r2, r3, #1
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	441a      	add	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	fbb2 f3f3 	udiv	r3, r2, r3
 8008374:	b29b      	uxth	r3, r3
 8008376:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	2b0f      	cmp	r3, #15
 800837c:	d908      	bls.n	8008390 <UART_SetConfig+0x540>
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008384:	d204      	bcs.n	8008390 <UART_SetConfig+0x540>
      {
        huart->Instance->BRR = usartdiv;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	60da      	str	r2, [r3, #12]
 800838e:	e001      	b.n	8008394 <UART_SetConfig+0x544>
      }
      else
      {
        ret = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80083a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3720      	adds	r7, #32
 80083a6:	46bd      	mov	sp, r7
 80083a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80083ac:	40008000 	.word	0x40008000
 80083b0:	00f42400 	.word	0x00f42400

080083b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	2bff      	cmp	r3, #255	; 0xff
 80083c2:	d904      	bls.n	80083ce <UART_AdvFeatureConfig+0x1a>
 80083c4:	f640 41a8 	movw	r1, #3240	; 0xca8
 80083c8:	489a      	ldr	r0, [pc, #616]	; (8008634 <UART_AdvFeatureConfig+0x280>)
 80083ca:	f7f8 ff4c 	bl	8001266 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d018      	beq.n	800840c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <UART_AdvFeatureConfig+0x42>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083ea:	d004      	beq.n	80083f6 <UART_AdvFeatureConfig+0x42>
 80083ec:	f640 41ad 	movw	r1, #3245	; 0xcad
 80083f0:	4890      	ldr	r0, [pc, #576]	; (8008634 <UART_AdvFeatureConfig+0x280>)
 80083f2:	f7f8 ff38 	bl	8001266 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d018      	beq.n	800844a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	2b00      	cmp	r3, #0
 800841e:	d009      	beq.n	8008434 <UART_AdvFeatureConfig+0x80>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008428:	d004      	beq.n	8008434 <UART_AdvFeatureConfig+0x80>
 800842a:	f640 41b4 	movw	r1, #3252	; 0xcb4
 800842e:	4881      	ldr	r0, [pc, #516]	; (8008634 <UART_AdvFeatureConfig+0x280>)
 8008430:	f7f8 ff19 	bl	8001266 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	f003 0304 	and.w	r3, r3, #4
 8008452:	2b00      	cmp	r3, #0
 8008454:	d018      	beq.n	8008488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	2b00      	cmp	r3, #0
 800845c:	d009      	beq.n	8008472 <UART_AdvFeatureConfig+0xbe>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008462:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008466:	d004      	beq.n	8008472 <UART_AdvFeatureConfig+0xbe>
 8008468:	f640 41bb 	movw	r1, #3259	; 0xcbb
 800846c:	4871      	ldr	r0, [pc, #452]	; (8008634 <UART_AdvFeatureConfig+0x280>)
 800846e:	f7f8 fefa 	bl	8001266 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	f003 0308 	and.w	r3, r3, #8
 8008490:	2b00      	cmp	r3, #0
 8008492:	d018      	beq.n	80084c6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008498:	2b00      	cmp	r3, #0
 800849a:	d009      	beq.n	80084b0 <UART_AdvFeatureConfig+0xfc>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a4:	d004      	beq.n	80084b0 <UART_AdvFeatureConfig+0xfc>
 80084a6:	f640 41c2 	movw	r1, #3266	; 0xcc2
 80084aa:	4862      	ldr	r0, [pc, #392]	; (8008634 <UART_AdvFeatureConfig+0x280>)
 80084ac:	f7f8 fedb 	bl	8001266 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	f003 0310 	and.w	r3, r3, #16
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d018      	beq.n	8008504 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <UART_AdvFeatureConfig+0x13a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e2:	d004      	beq.n	80084ee <UART_AdvFeatureConfig+0x13a>
 80084e4:	f640 41c9 	movw	r1, #3273	; 0xcc9
 80084e8:	4852      	ldr	r0, [pc, #328]	; (8008634 <UART_AdvFeatureConfig+0x280>)
 80084ea:	f7f8 febc 	bl	8001266 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	430a      	orrs	r2, r1
 8008502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	f003 0320 	and.w	r3, r3, #32
 800850c:	2b00      	cmp	r3, #0
 800850e:	d018      	beq.n	8008542 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d009      	beq.n	800852c <UART_AdvFeatureConfig+0x178>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008520:	d004      	beq.n	800852c <UART_AdvFeatureConfig+0x178>
 8008522:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
 8008526:	4843      	ldr	r0, [pc, #268]	; (8008634 <UART_AdvFeatureConfig+0x280>)
 8008528:	f7f8 fe9d 	bl	8001266 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d04f      	beq.n	80085ee <UART_AdvFeatureConfig+0x23a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a39      	ldr	r2, [pc, #228]	; (8008638 <UART_AdvFeatureConfig+0x284>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d009      	beq.n	800856c <UART_AdvFeatureConfig+0x1b8>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a37      	ldr	r2, [pc, #220]	; (800863c <UART_AdvFeatureConfig+0x288>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d004      	beq.n	800856c <UART_AdvFeatureConfig+0x1b8>
 8008562:	f640 41d7 	movw	r1, #3287	; 0xcd7
 8008566:	4833      	ldr	r0, [pc, #204]	; (8008634 <UART_AdvFeatureConfig+0x280>)
 8008568:	f7f8 fe7d 	bl	8001266 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008570:	2b00      	cmp	r3, #0
 8008572:	d009      	beq.n	8008588 <UART_AdvFeatureConfig+0x1d4>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800857c:	d004      	beq.n	8008588 <UART_AdvFeatureConfig+0x1d4>
 800857e:	f640 41d8 	movw	r1, #3288	; 0xcd8
 8008582:	482c      	ldr	r0, [pc, #176]	; (8008634 <UART_AdvFeatureConfig+0x280>)
 8008584:	f7f8 fe6f 	bl	8001266 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085a6:	d122      	bne.n	80085ee <UART_AdvFeatureConfig+0x23a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d013      	beq.n	80085d8 <UART_AdvFeatureConfig+0x224>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085b8:	d00e      	beq.n	80085d8 <UART_AdvFeatureConfig+0x224>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085c2:	d009      	beq.n	80085d8 <UART_AdvFeatureConfig+0x224>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085cc:	d004      	beq.n	80085d8 <UART_AdvFeatureConfig+0x224>
 80085ce:	f640 41dd 	movw	r1, #3293	; 0xcdd
 80085d2:	4818      	ldr	r0, [pc, #96]	; (8008634 <UART_AdvFeatureConfig+0x280>)
 80085d4:	f7f8 fe47 	bl	8001266 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d018      	beq.n	800862c <UART_AdvFeatureConfig+0x278>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <UART_AdvFeatureConfig+0x262>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008606:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800860a:	d004      	beq.n	8008616 <UART_AdvFeatureConfig+0x262>
 800860c:	f640 41e5 	movw	r1, #3301	; 0xce5
 8008610:	4808      	ldr	r0, [pc, #32]	; (8008634 <UART_AdvFeatureConfig+0x280>)
 8008612:	f7f8 fe28 	bl	8001266 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	605a      	str	r2, [r3, #4]
  }
}
 800862c:	bf00      	nop
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	0800b204 	.word	0x0800b204
 8008638:	40013800 	.word	0x40013800
 800863c:	40004400 	.word	0x40004400

08008640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af02      	add	r7, sp, #8
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800864e:	f7f9 f9bb 	bl	80019c8 <HAL_GetTick>
 8008652:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b08      	cmp	r3, #8
 8008660:	d10e      	bne.n	8008680 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008662:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f82a 	bl	80086ca <UART_WaitOnFlagUntilTimeout>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e020      	b.n	80086c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0304 	and.w	r3, r3, #4
 800868a:	2b04      	cmp	r3, #4
 800868c:	d10e      	bne.n	80086ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800868e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f814 	bl	80086ca <UART_WaitOnFlagUntilTimeout>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e00a      	b.n	80086c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2220      	movs	r2, #32
 80086b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2220      	movs	r2, #32
 80086b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	60b9      	str	r1, [r7, #8]
 80086d4:	603b      	str	r3, [r7, #0]
 80086d6:	4613      	mov	r3, r2
 80086d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086da:	e05d      	b.n	8008798 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e2:	d059      	beq.n	8008798 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086e4:	f7f9 f970 	bl	80019c8 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d302      	bcc.n	80086fa <UART_WaitOnFlagUntilTimeout+0x30>
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d11b      	bne.n	8008732 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008708:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 0201 	bic.w	r2, r2, #1
 8008718:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2220      	movs	r2, #32
 800871e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2220      	movs	r2, #32
 8008724:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e042      	b.n	80087b8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0304 	and.w	r3, r3, #4
 800873c:	2b00      	cmp	r3, #0
 800873e:	d02b      	beq.n	8008798 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800874a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800874e:	d123      	bne.n	8008798 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008758:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008768:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0201 	bic.w	r2, r2, #1
 8008778:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2220      	movs	r2, #32
 800877e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2220      	movs	r2, #32
 8008784:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e00f      	b.n	80087b8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69da      	ldr	r2, [r3, #28]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4013      	ands	r3, r2
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	bf0c      	ite	eq
 80087a8:	2301      	moveq	r3, #1
 80087aa:	2300      	movne	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	461a      	mov	r2, r3
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d092      	beq.n	80086dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80087d6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008800:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0201 	bic.w	r2, r2, #1
 8008810:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2220      	movs	r2, #32
 8008816:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008836:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0320 	and.w	r3, r3, #32
 8008842:	2b00      	cmp	r3, #0
 8008844:	d11e      	bne.n	8008884 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800885c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f022 0201 	bic.w	r2, r2, #1
 800886c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800887c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2220      	movs	r2, #32
 8008882:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7ff fac5 	bl	8007e14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800888a:	bf00      	nop
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff fac1 	bl	8007e28 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088c0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d2:	2b80      	cmp	r3, #128	; 0x80
 80088d4:	d109      	bne.n	80088ea <UART_DMAError+0x3c>
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	2b21      	cmp	r3, #33	; 0x21
 80088da:	d106      	bne.n	80088ea <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80088e4:	6978      	ldr	r0, [r7, #20]
 80088e6:	f7ff ff6b 	bl	80087c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f4:	2b40      	cmp	r3, #64	; 0x40
 80088f6:	d109      	bne.n	800890c <UART_DMAError+0x5e>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b22      	cmp	r3, #34	; 0x22
 80088fc:	d106      	bne.n	800890c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2200      	movs	r2, #0
 8008902:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008906:	6978      	ldr	r0, [r7, #20]
 8008908:	f7ff ff6f 	bl	80087ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008910:	f043 0210 	orr.w	r2, r3, #16
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008918:	6978      	ldr	r0, [r7, #20]
 800891a:	f7ff fa8f 	bl	8007e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800891e:	bf00      	nop
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b084      	sub	sp, #16
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f7ff fa79 	bl	8007e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800894a:	bf00      	nop
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008968:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2220      	movs	r2, #32
 800896e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7ff fa42 	bl	8007e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800897c:	bf00      	nop
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_DWT_Delay_us>:
/**
 * @brief This function provides a delay (in microseconds)
 * @param microseconds: delay in microseconds
 */
__STATIC_INLINE void HAL_DWT_Delay_us(volatile uint32_t microseconds)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 80089a0:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <HAL_DWT_Delay_us+0x3c>)
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	60fb      	str	r3, [r7, #12]
 /* Go to number of cycles for system */
 microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80089a6:	f7fb fecb 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 80089aa:	4602      	mov	r2, r0
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <HAL_DWT_Delay_us+0x40>)
 80089ae:	fba3 2302 	umull	r2, r3, r3, r2
 80089b2:	0c9b      	lsrs	r3, r3, #18
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	fb02 f303 	mul.w	r3, r2, r3
 80089ba:	607b      	str	r3, [r7, #4]
 /* Delay till end */
 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80089bc:	bf00      	nop
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <HAL_DWT_Delay_us+0x3c>)
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	1ad2      	subs	r2, r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d3f8      	bcc.n	80089be <HAL_DWT_Delay_us+0x26>
}
 80089cc:	bf00      	nop
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	e0001000 	.word	0xe0001000
 80089d8:	431bde83 	.word	0x431bde83

080089dc <HAL_GPIO_EXTI_Callback>:
 * 			(3) External Interrupt Mode with rising edge trigger detection enabled
 * 			for OLED_GPIO_FR_Pin (PB0).<br>
 * 			(4) NVIC for EXTI line[0] interrupts enabled.<br>
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==OLED_FR_Pin)
 80089e6:	88fb      	ldrh	r3, [r7, #6]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d10a      	bne.n	8008a02 <HAL_GPIO_EXTI_Callback+0x26>
	{
		// FR signal synchronized
		// Copy frame buffer to GDDRAM on-the-spot of this interrupt callback if there is pending data to flush
		if(fb_flush_pending_get()){
 80089ec:	f000 fd32 	bl	8009454 <fb_flush_pending_get>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00b      	beq.n	8008a0e <HAL_GPIO_EXTI_Callback+0x32>
			fb_spi_transfer(fb_flush_area);
 80089f6:	4b08      	ldr	r3, [pc, #32]	; (8008a18 <HAL_GPIO_EXTI_Callback+0x3c>)
 80089f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80089fc:	f000 fc72 	bl	80092e4 <fb_spi_transfer>
	{
		//Set flag for ssd7317_get_gesture() on a valid touch event.
		//Polling ssd7317_get_gesture() is required in non-RTOS environment.
		touch_event_set();
	}
}
 8008a00:	e005      	b.n	8008a0e <HAL_GPIO_EXTI_Callback+0x32>
	else if (GPIO_Pin==TCH_IRQ_Pin)
 8008a02:	88fb      	ldrh	r3, [r7, #6]
 8008a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a08:	d101      	bne.n	8008a0e <HAL_GPIO_EXTI_Callback+0x32>
		touch_event_set();
 8008a0a:	f000 ff27 	bl	800985c <touch_event_set>
}
 8008a0e:	bf00      	nop
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	20000170 	.word	0x20000170

08008a1c <ssd7317_init>:
 *				#endif
 * 				ssd7317_init();	//OLED display On after this function
 * 			}
 * @endcode
 */
void ssd7317_init(void){
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
	/*(1)Configure GPIO pins for display and touch interfaces*/
	MX_GPIO_Init();
 8008a22:	f000 f8db 	bl	8008bdc <MX_GPIO_Init>
	/*(2)Enable DMA for SPI*/
#ifdef USE_SPI_DMA
	MX_DMA_Init();
#endif
	/*(3)Initialize SPI interface for the display part*/
	MX_SPI1_Init();
 8008a26:	f000 f95d 	bl	8008ce4 <MX_SPI1_Init>
	/*(4)Initialize I2C interface for touch*/
	MX_I2C1_Init();
 8008a2a:	f000 f999 	bl	8008d60 <MX_I2C1_Init>

	/*(6)Send initialization commands through SPI according to data sheet except 0xaf*/
	spi_write_command((const uint8_t*)SSD7317_INIT_TBL, sizeof(SSD7317_INIT_TBL));
 8008a2e:	212b      	movs	r1, #43	; 0x2b
 8008a30:	4816      	ldr	r0, [pc, #88]	; (8008a8c <ssd7317_init+0x70>)
 8008a32:	f000 f9d5 	bl	8008de0 <spi_write_command>

	/*(7) Hw reset for touch screen*/
	HAL_GPIO_WritePin(TCH_TRES_GPIO_Port, TCH_TRES_Pin, GPIO_PIN_RESET);
 8008a36:	2200      	movs	r2, #0
 8008a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a40:	f7f9 fee6 	bl	8002810 <HAL_GPIO_WritePin>
	/*TRES set low for 1ms*/
	HAL_Delay(1);
 8008a44:	2001      	movs	r0, #1
 8008a46:	f7f8 ffcb 	bl	80019e0 <HAL_Delay>
	/*TRES pin set high for normal operation*/
	HAL_GPIO_WritePin(TCH_TRES_GPIO_Port, TCH_TRES_Pin, GPIO_PIN_SET);
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a54:	f7f9 fedc 	bl	8002810 <HAL_GPIO_WritePin>

	/*(8)Clear frame buffer and copy full screen to GDDRAM by non-DMA.
	 * No sync with FR should be implemented because SSD7317 not switched on yet -> no FR signal
	 * */
	rect_t screen = {0,0,OLED_HOR_RES-1,OLED_VER_RES-1};
 8008a58:	4a0d      	ldr	r2, [pc, #52]	; (8008a90 <ssd7317_init+0x74>)
 8008a5a:	463b      	mov	r3, r7
 8008a5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a60:	e883 0003 	stmia.w	r3, {r0, r1}
	fb_clear(screen, BLACK);
 8008a64:	2200      	movs	r2, #0
 8008a66:	463b      	mov	r3, r7
 8008a68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a6c:	f000 fbfc 	bl	8009268 <fb_clear>
	spi_write_data((const uint8_t *)&frame_buffer[0], (sizeof(frame_buffer)/sizeof(color_t)));
 8008a70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008a74:	4807      	ldr	r0, [pc, #28]	; (8008a94 <ssd7317_init+0x78>)
 8008a76:	f000 f9d7 	bl	8008e28 <spi_write_data>

	/*(9)Display ON for OLED (12V VCC on and send over command 0xaf)*/
	ssd7317_display_on();
 8008a7a:	f000 f80d 	bl	8008a98 <ssd7317_display_on>

	/*(10)Initialization for the touch controller*/
	touch_init();
 8008a7e:	f000 fdd1 	bl	8009624 <touch_init>
}
 8008a82:	bf00      	nop
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	0800c804 	.word	0x0800c804
 8008a90:	0800b240 	.word	0x0800b240
 8008a94:	20000494 	.word	0x20000494

08008a98 <ssd7317_display_on>:
/**
 *@brief
 *\b	Description:<br>
 *		Enable 12V VCC and then switch OLED On with command 0xAF.
 */
void ssd7317_display_on(void){
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
	const uint8_t cmd[1]={0xaf};
 8008a9e:	23af      	movs	r3, #175	; 0xaf
 8008aa0:	713b      	strb	r3, [r7, #4]

	/*Software delay 1ms for VCC ramp up*/
	HAL_Delay(1);
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	f7f8 ff9c 	bl	80019e0 <HAL_Delay>

	/*Send display ON command*/
	spi_write_command((const uint8_t*)cmd, 1);
 8008aa8:	1d3b      	adds	r3, r7, #4
 8008aaa:	2101      	movs	r1, #1
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 f997 	bl	8008de0 <spi_write_command>
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <ssd7317_display_clear>:
 * 				ssd7317_init();	//OLED display On after this function
 * 				ssd7317_display_clear(BLACK);
 * 			}
 * @endcode
 */
void ssd7317_display_clear(color_t color){
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	71fb      	strb	r3, [r7, #7]

	rect_t screen = {0,0,OLED_HOR_RES-1, OLED_VER_RES-1};
 8008ac6:	4a0d      	ldr	r2, [pc, #52]	; (8008afc <ssd7317_display_clear+0x40>)
 8008ac8:	f107 0308 	add.w	r3, r7, #8
 8008acc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ad0:	e883 0003 	stmia.w	r3, {r0, r1}

	fb_clear(screen, color);
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f107 0308 	add.w	r3, r7, #8
 8008adc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ae0:	f000 fbc2 	bl	8009268 <fb_clear>

	fb_flush_suspend();
 8008ae4:	f000 fc8a 	bl	80093fc <fb_flush_suspend>
	fb_flush_pending_set(screen);
 8008ae8:	f107 0308 	add.w	r3, r7, #8
 8008aec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008af0:	f000 fc6a 	bl	80093c8 <fb_flush_pending_set>
}
 8008af4:	bf00      	nop
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	0800b240 	.word	0x0800b240

08008b00 <ssd7317_fill_area>:
 *
 * \b Pre-requisite:<br>
 * 		x2>=x1 & y2>=y1<br>
 */
void ssd7317_fill_area(rect_t area, const color_t* color, bool negative)
{
 8008b00:	b590      	push	{r4, r7, lr}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	f107 0408 	add.w	r4, r7, #8
 8008b0a:	e884 0003 	stmia.w	r4, {r0, r1}
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	70fb      	strb	r3, [r7, #3]
	fb_fill_area(area,color,negative);
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	f107 0108 	add.w	r1, r7, #8
 8008b1a:	c903      	ldmia	r1, {r0, r1}
 8008b1c:	f000 fa0e 	bl	8008f3c <fb_fill_area>

	fb_flush_suspend();	//wait until previous SPI flushes finished
 8008b20:	f000 fc6c 	bl	80093fc <fb_flush_suspend>
	fb_flush_pending_set(area); //set flag to indicate frame buffer flush pending and wait for a FR pulse
 8008b24:	f107 0308 	add.w	r3, r7, #8
 8008b28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b2c:	f000 fc4c 	bl	80093c8 <fb_flush_pending_set>
}
 8008b30:	bf00      	nop
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd90      	pop	{r4, r7, pc}

08008b38 <ssd7317_fill_color>:
 * 			Function to fill a region in the frame buffer with a single color and update the GDDRAM on FR signal.<br>
 * @param 	area is the area to fill with (x1,y1) the top left and (x2,y2) the lower right corner (inclusive)
 * @param 	color is BLACK or WHITE
 */
void ssd7317_fill_color(rect_t area, color_t color)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	f107 0308 	add.w	r3, r7, #8
 8008b42:	e883 0003 	stmia.w	r3, {r0, r1}
 8008b46:	4613      	mov	r3, r2
 8008b48:	71fb      	strb	r3, [r7, #7]
	for(int16_t y = area.y1; y < area.y2+1; y++){
 8008b4a:	897b      	ldrh	r3, [r7, #10]
 8008b4c:	82fb      	strh	r3, [r7, #22]
 8008b4e:	e01d      	b.n	8008b8c <ssd7317_fill_color+0x54>
		for(int16_t x = area.x1; x < area.x2+1; x++)
 8008b50:	893b      	ldrh	r3, [r7, #8]
 8008b52:	82bb      	strh	r3, [r7, #20]
 8008b54:	e00d      	b.n	8008b72 <ssd7317_fill_color+0x3a>
			fb_set_pixel(x,y,color);
 8008b56:	79fa      	ldrb	r2, [r7, #7]
 8008b58:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8008b5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 f985 	bl	8008e70 <fb_set_pixel>
		for(int16_t x = area.x1; x < area.x2+1; x++)
 8008b66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	82bb      	strh	r3, [r7, #20]
 8008b72:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008b76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	dbea      	blt.n	8008b56 <ssd7317_fill_color+0x1e>
	for(int16_t y = area.y1; y < area.y2+1; y++){
 8008b80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	3301      	adds	r3, #1
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	82fb      	strh	r3, [r7, #22]
 8008b8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008b90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b94:	3301      	adds	r3, #1
 8008b96:	429a      	cmp	r2, r3
 8008b98:	dbda      	blt.n	8008b50 <ssd7317_fill_color+0x18>
	}

	fb_flush_suspend();
 8008b9a:	f000 fc2f 	bl	80093fc <fb_flush_suspend>
	fb_flush_pending_set(area);
 8008b9e:	f107 0308 	add.w	r3, r7, #8
 8008ba2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ba6:	f000 fc0f 	bl	80093c8 <fb_flush_pending_set>
}
 8008baa:	bf00      	nop
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <min>:
* Private functions
*******************************************************************************/
/**
 * @brief Function to return minimum value
 */
static inline uint16_t min(uint16_t a, uint16_t b){
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	4603      	mov	r3, r0
 8008bba:	460a      	mov	r2, r1
 8008bbc:	80fb      	strh	r3, [r7, #6]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	80bb      	strh	r3, [r7, #4]
	if(a>b)
 8008bc2:	88fa      	ldrh	r2, [r7, #6]
 8008bc4:	88bb      	ldrh	r3, [r7, #4]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d901      	bls.n	8008bce <min+0x1c>
		return b;
 8008bca:	88bb      	ldrh	r3, [r7, #4]
 8008bcc:	e000      	b.n	8008bd0 <min+0x1e>
	return a;
 8008bce:	88fb      	ldrh	r3, [r7, #6]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <MX_GPIO_Init>:
  * 		Direct copy from STM32CubeIDE Code Generation utility.
  * @param 	None
  * @return None
  */
static void MX_GPIO_Init(void)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008be2:	f107 030c 	add.w	r3, r7, #12
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	605a      	str	r2, [r3, #4]
 8008bec:	609a      	str	r2, [r3, #8]
 8008bee:	60da      	str	r2, [r3, #12]
 8008bf0:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bf2:	4b38      	ldr	r3, [pc, #224]	; (8008cd4 <MX_GPIO_Init+0xf8>)
 8008bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf6:	4a37      	ldr	r2, [pc, #220]	; (8008cd4 <MX_GPIO_Init+0xf8>)
 8008bf8:	f043 0301 	orr.w	r3, r3, #1
 8008bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008bfe:	4b35      	ldr	r3, [pc, #212]	; (8008cd4 <MX_GPIO_Init+0xf8>)
 8008c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	60bb      	str	r3, [r7, #8]
 8008c08:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c0a:	4b32      	ldr	r3, [pc, #200]	; (8008cd4 <MX_GPIO_Init+0xf8>)
 8008c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c0e:	4a31      	ldr	r2, [pc, #196]	; (8008cd4 <MX_GPIO_Init+0xf8>)
 8008c10:	f043 0302 	orr.w	r3, r3, #2
 8008c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c16:	4b2f      	ldr	r3, [pc, #188]	; (8008cd4 <MX_GPIO_Init+0xf8>)
 8008c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	607b      	str	r3, [r7, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, TCH_TRES_Pin, GPIO_PIN_SET);
 8008c22:	2201      	movs	r2, #1
 8008c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008c2c:	f7f9 fdf0 	bl	8002810 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8008c30:	2200      	movs	r2, #0
 8008c32:	2102      	movs	r1, #2
 8008c34:	4828      	ldr	r0, [pc, #160]	; (8008cd8 <MX_GPIO_Init+0xfc>)
 8008c36:	f7f9 fdeb 	bl	8002810 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : OLED_FR_Pin */
	  GPIO_InitStruct.Pin = OLED_FR_Pin;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008c3e:	4b27      	ldr	r3, [pc, #156]	; (8008cdc <MX_GPIO_Init+0x100>)
 8008c40:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c42:	2301      	movs	r3, #1
 8008c44:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(OLED_FR_GPIO_Port, &GPIO_InitStruct);
 8008c46:	f107 030c 	add.w	r3, r7, #12
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4822      	ldr	r0, [pc, #136]	; (8008cd8 <MX_GPIO_Init+0xfc>)
 8008c4e:	f7f9 fbb9 	bl	80023c4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : OLED_DC_Pin */
	  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8008c52:	2302      	movs	r3, #2
 8008c54:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c56:	2301      	movs	r3, #1
 8008c58:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008c5e:	2302      	movs	r3, #2
 8008c60:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8008c62:	f107 030c 	add.w	r3, r7, #12
 8008c66:	4619      	mov	r1, r3
 8008c68:	481b      	ldr	r0, [pc, #108]	; (8008cd8 <MX_GPIO_Init+0xfc>)
 8008c6a:	f7f9 fbab 	bl	80023c4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : TCH_TRES_Pin */
	  GPIO_InitStruct.Pin = TCH_TRES_Pin;
 8008c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c72:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c74:	2301      	movs	r3, #1
 8008c76:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(TCH_TRES_GPIO_Port, &GPIO_InitStruct);
 8008c80:	f107 030c 	add.w	r3, r7, #12
 8008c84:	4619      	mov	r1, r3
 8008c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008c8a:	f7f9 fb9b 	bl	80023c4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : TCH_IRQ_Pin */
	  GPIO_InitStruct.Pin = TCH_IRQ_Pin;
 8008c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c92:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008c94:	4b12      	ldr	r3, [pc, #72]	; (8008ce0 <MX_GPIO_Init+0x104>)
 8008c96:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(TCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8008c9c:	f107 030c 	add.w	r3, r7, #12
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ca6:	f7f9 fb8d 	bl	80023c4 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8008caa:	2200      	movs	r2, #0
 8008cac:	2100      	movs	r1, #0
 8008cae:	2006      	movs	r0, #6
 8008cb0:	f7f8 ffa8 	bl	8001c04 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008cb4:	2006      	movs	r0, #6
 8008cb6:	f7f8 ffd1 	bl	8001c5c <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	2028      	movs	r0, #40	; 0x28
 8008cc0:	f7f8 ffa0 	bl	8001c04 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008cc4:	2028      	movs	r0, #40	; 0x28
 8008cc6:	f7f8 ffc9 	bl	8001c5c <HAL_NVIC_EnableIRQ>
}
 8008cca:	bf00      	nop
 8008ccc:	3720      	adds	r7, #32
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	40021000 	.word	0x40021000
 8008cd8:	48000400 	.word	0x48000400
 8008cdc:	10110000 	.word	0x10110000
 8008ce0:	10210000 	.word	0x10210000

08008ce4 <MX_SPI1_Init>:
  * 		Direct copy from STM32CubeIDE Code Generation utility.
  * @param 	None
  * @return None
  */
static void MX_SPI1_Init(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8008ce8:	4b1b      	ldr	r3, [pc, #108]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008cea:	4a1c      	ldr	r2, [pc, #112]	; (8008d5c <MX_SPI1_Init+0x78>)
 8008cec:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8008cee:	4b1a      	ldr	r3, [pc, #104]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008cf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008cf4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8008cf6:	4b18      	ldr	r3, [pc, #96]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008cf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008cfc:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008cfe:	4b16      	ldr	r3, [pc, #88]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008d00:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008d04:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d06:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008d0c:	4b12      	ldr	r3, [pc, #72]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8008d12:	4b11      	ldr	r3, [pc, #68]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008d14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008d18:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008d20:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8008d32:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008d34:	2207      	movs	r2, #7
 8008d36:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008d38:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008d3e:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008d40:	2208      	movs	r2, #8
 8008d42:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008d44:	4804      	ldr	r0, [pc, #16]	; (8008d58 <MX_SPI1_Init+0x74>)
 8008d46:	f7fc fa71 	bl	800522c <HAL_SPI_Init>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <MX_SPI1_Init+0x70>
	{
		Error_Handler();
 8008d50:	f7f8 fa82 	bl	8001258 <Error_Handler>
	}
}
 8008d54:	bf00      	nop
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	200000c0 	.word	0x200000c0
 8008d5c:	40013000 	.word	0x40013000

08008d60 <MX_I2C1_Init>:
  * 		Direct copy from STM32CubeIDE Code Generation utility.
  * @param 	None
  * @return None
  */
static void MX_I2C1_Init(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8008d64:	4b1b      	ldr	r3, [pc, #108]	; (8008dd4 <MX_I2C1_Init+0x74>)
 8008d66:	4a1c      	ldr	r2, [pc, #112]	; (8008dd8 <MX_I2C1_Init+0x78>)
 8008d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8008d6a:	4b1a      	ldr	r3, [pc, #104]	; (8008dd4 <MX_I2C1_Init+0x74>)
 8008d6c:	4a1b      	ldr	r2, [pc, #108]	; (8008ddc <MX_I2C1_Init+0x7c>)
 8008d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008d70:	4b18      	ldr	r3, [pc, #96]	; (8008dd4 <MX_I2C1_Init+0x74>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008d76:	4b17      	ldr	r3, [pc, #92]	; (8008dd4 <MX_I2C1_Init+0x74>)
 8008d78:	2201      	movs	r2, #1
 8008d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008d7c:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <MX_I2C1_Init+0x74>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008d82:	4b14      	ldr	r3, [pc, #80]	; (8008dd4 <MX_I2C1_Init+0x74>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008d88:	4b12      	ldr	r3, [pc, #72]	; (8008dd4 <MX_I2C1_Init+0x74>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008d8e:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <MX_I2C1_Init+0x74>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008d94:	4b0f      	ldr	r3, [pc, #60]	; (8008dd4 <MX_I2C1_Init+0x74>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008d9a:	480e      	ldr	r0, [pc, #56]	; (8008dd4 <MX_I2C1_Init+0x74>)
 8008d9c:	f7f9 fd80 	bl	80028a0 <HAL_I2C_Init>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <MX_I2C1_Init+0x4a>
  {
	  Error_Handler();
 8008da6:	f7f8 fa57 	bl	8001258 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008daa:	2100      	movs	r1, #0
 8008dac:	4809      	ldr	r0, [pc, #36]	; (8008dd4 <MX_I2C1_Init+0x74>)
 8008dae:	f7fa fc07 	bl	80035c0 <HAL_I2CEx_ConfigAnalogFilter>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <MX_I2C1_Init+0x5c>
  {
	  Error_Handler();
 8008db8:	f7f8 fa4e 	bl	8001258 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <MX_I2C1_Init+0x74>)
 8008dc0:	f7fa fc66 	bl	8003690 <HAL_I2CEx_ConfigDigitalFilter>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <MX_I2C1_Init+0x6e>
  {
	  Error_Handler();
 8008dca:	f7f8 fa45 	bl	8001258 <Error_Handler>
  }
}
 8008dce:	bf00      	nop
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000124 	.word	0x20000124
 8008dd8:	40005400 	.word	0x40005400
 8008ddc:	00707cbb 	.word	0x00707cbb

08008de0 <spi_write_command>:
  * @brief 	SPI command write (non-DMA).
  * @param 	*command points to the command array to send.
  * @param	len is the data length in byte.
  * @return None
  */
void spi_write_command(const uint8_t *command, uint16_t len){
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	460b      	mov	r3, r1
 8008dea:	807b      	strh	r3, [r7, #2]

	/*DC pin set low for command send*/
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8008dec:	2200      	movs	r2, #0
 8008dee:	2102      	movs	r1, #2
 8008df0:	480b      	ldr	r0, [pc, #44]	; (8008e20 <spi_write_command+0x40>)
 8008df2:	f7f9 fd0d 	bl	8002810 <HAL_GPIO_WritePin>

	/*SPI send with non-DMA method = blocking transfer*/
	HAL_StatusTypeDef err = HAL_SPI_Transmit(&hspi1, (uint8_t *)command, len, 10);
 8008df6:	887a      	ldrh	r2, [r7, #2]
 8008df8:	230a      	movs	r3, #10
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	4809      	ldr	r0, [pc, #36]	; (8008e24 <spi_write_command+0x44>)
 8008dfe:	f7fc fbfb 	bl	80055f8 <HAL_SPI_Transmit>
 8008e02:	4603      	mov	r3, r0
 8008e04:	73fb      	strb	r3, [r7, #15]

	switch(err){
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d002      	beq.n	8008e12 <spi_write_command+0x32>
 8008e0c:	2b03      	cmp	r3, #3
 8008e0e:	d000      	beq.n	8008e12 <spi_write_command+0x32>
		case HAL_TIMEOUT:
		case HAL_ERROR:
			Error_Handler();
		break;
		default:
		break;
 8008e10:	e002      	b.n	8008e18 <spi_write_command+0x38>
			Error_Handler();
 8008e12:	f7f8 fa21 	bl	8001258 <Error_Handler>
		break;
 8008e16:	bf00      	nop
	}
}
 8008e18:	bf00      	nop
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	48000400 	.word	0x48000400
 8008e24:	200000c0 	.word	0x200000c0

08008e28 <spi_write_data>:
  * @brief 	SPI data write (non-DMA).
  * @param 	*data points to the data array to send.
  * @param	len is the data length in byte.
  * @return None
  */
void spi_write_data(const uint8_t *data, uint16_t len){
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	807b      	strh	r3, [r7, #2]

	/*DC pin set high for data send in next SPI transfer*/
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8008e34:	2201      	movs	r2, #1
 8008e36:	2102      	movs	r1, #2
 8008e38:	480b      	ldr	r0, [pc, #44]	; (8008e68 <spi_write_data+0x40>)
 8008e3a:	f7f9 fce9 	bl	8002810 <HAL_GPIO_WritePin>

	/*SPI send (non-DMA) = blocking function*/
	HAL_StatusTypeDef err = HAL_SPI_Transmit(&hspi1, (uint8_t *)data, len, 10);
 8008e3e:	887a      	ldrh	r2, [r7, #2]
 8008e40:	230a      	movs	r3, #10
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	4809      	ldr	r0, [pc, #36]	; (8008e6c <spi_write_data+0x44>)
 8008e46:	f7fc fbd7 	bl	80055f8 <HAL_SPI_Transmit>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73fb      	strb	r3, [r7, #15]

	switch(err){
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d002      	beq.n	8008e5a <spi_write_data+0x32>
 8008e54:	2b03      	cmp	r3, #3
 8008e56:	d000      	beq.n	8008e5a <spi_write_data+0x32>
		case HAL_TIMEOUT:
		case HAL_ERROR:
			Error_Handler();
		break;
		default:
		break;
 8008e58:	e002      	b.n	8008e60 <spi_write_data+0x38>
			Error_Handler();
 8008e5a:	f7f8 f9fd 	bl	8001258 <Error_Handler>
		break;
 8008e5e:	bf00      	nop
	}
}
 8008e60:	bf00      	nop
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	48000400 	.word	0x48000400
 8008e6c:	200000c0 	.word	0x200000c0

08008e70 <fb_set_pixel>:
 * @param x is the x-coordinate
 * @param y is the y-coordinate
 * @param color is WHITE/BLACK
 */
static void fb_set_pixel(int16_t x, int16_t y, color_t color)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	80fb      	strh	r3, [r7, #6]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	80bb      	strh	r3, [r7, #4]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	70fb      	strb	r3, [r7, #3]
	if(color==WHITE)
 8008e82:	78fb      	ldrb	r3, [r7, #3]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d127      	bne.n	8008ed8 <fb_set_pixel+0x68>
		frame_buffer[BUFIDX(x,y)] |= PIXIDX(x);
 8008e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e8c:	10db      	asrs	r3, r3, #3
 8008e8e:	b21b      	sxth	r3, r3
 8008e90:	4619      	mov	r1, r3
 8008e92:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008e96:	4613      	mov	r3, r2
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	4a25      	ldr	r2, [pc, #148]	; (8008f38 <fb_set_pixel+0xc8>)
 8008ea2:	5cd3      	ldrb	r3, [r2, r3]
 8008ea4:	b25a      	sxtb	r2, r3
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	f003 0307 	and.w	r3, r3, #7
 8008eac:	2101      	movs	r1, #1
 8008eae:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb2:	b25b      	sxtb	r3, r3
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	b259      	sxtb	r1, r3
 8008eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ebc:	10db      	asrs	r3, r3, #3
 8008ebe:	b21b      	sxth	r3, r3
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	4413      	add	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4403      	add	r3, r0
 8008ed0:	b2c9      	uxtb	r1, r1
 8008ed2:	4a19      	ldr	r2, [pc, #100]	; (8008f38 <fb_set_pixel+0xc8>)
 8008ed4:	54d1      	strb	r1, [r2, r3]
	else
		frame_buffer[BUFIDX(x,y)] &= ~PIXIDX(x);
}
 8008ed6:	e028      	b.n	8008f2a <fb_set_pixel+0xba>
		frame_buffer[BUFIDX(x,y)] &= ~PIXIDX(x);
 8008ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008edc:	10db      	asrs	r3, r3, #3
 8008ede:	b21b      	sxth	r3, r3
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	4a11      	ldr	r2, [pc, #68]	; (8008f38 <fb_set_pixel+0xc8>)
 8008ef2:	5cd3      	ldrb	r3, [r2, r3]
 8008ef4:	b25a      	sxtb	r2, r3
 8008ef6:	88fb      	ldrh	r3, [r7, #6]
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	2101      	movs	r1, #1
 8008efe:	fa01 f303 	lsl.w	r3, r1, r3
 8008f02:	b25b      	sxtb	r3, r3
 8008f04:	43db      	mvns	r3, r3
 8008f06:	b25b      	sxtb	r3, r3
 8008f08:	4013      	ands	r3, r2
 8008f0a:	b259      	sxtb	r1, r3
 8008f0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f10:	10db      	asrs	r3, r3, #3
 8008f12:	b21b      	sxth	r3, r3
 8008f14:	4618      	mov	r0, r3
 8008f16:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	005b      	lsls	r3, r3, #1
 8008f1e:	4413      	add	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4403      	add	r3, r0
 8008f24:	b2c9      	uxtb	r1, r1
 8008f26:	4a04      	ldr	r2, [pc, #16]	; (8008f38 <fb_set_pixel+0xc8>)
 8008f28:	54d1      	strb	r1, [r2, r3]
}
 8008f2a:	bf00      	nop
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	20000494 	.word	0x20000494

08008f3c <fb_fill_area>:
 *		  No SPI transfer is called yet. Only frame buffer operation invoked.
 * @param area is the area to fill with (x1,y1) the top left and (x2,y2) the lower right corner (inclusive)
 * @param color is a pointer to the pattern in non-volatile media i.e. MCU's Flash
 */
static void fb_fill_area(rect_t area, const color_t* color, bool negative)
{
 8008f3c:	b590      	push	{r4, r7, lr}
 8008f3e:	b089      	sub	sp, #36	; 0x24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	f107 0408 	add.w	r4, r7, #8
 8008f46:	e884 0003 	stmia.w	r4, {r0, r1}
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	70fb      	strb	r3, [r7, #3]
				frame_buffer[page]|= color[index++];
			}
		}
	}
	*/
	uint16_t width_in_byte = ((area.x2-area.x1+1) +7)>>3;
 8008f4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008f52:	461a      	mov	r2, r3
 8008f54:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	10db      	asrs	r3, r3, #3
 8008f5e:	833b      	strh	r3, [r7, #24]
	uint8_t  pixel, bit_position;
	color_t _color;

	for(uint16_t y=0; y<(area.y2-area.y1+1); y++){
 8008f60:	2300      	movs	r3, #0
 8008f62:	83bb      	strh	r3, [r7, #28]
 8008f64:	e053      	b.n	800900e <fb_fill_area+0xd2>
		for(uint16_t x=0; x<(area.x2-area.x1+1); x++){
 8008f66:	2300      	movs	r3, #0
 8008f68:	837b      	strh	r3, [r7, #26]
 8008f6a:	e043      	b.n	8008ff4 <fb_fill_area+0xb8>
			pixel = color[(y*width_in_byte) + BUFIDX(x,0)];
 8008f6c:	8bbb      	ldrh	r3, [r7, #28]
 8008f6e:	8b3a      	ldrh	r2, [r7, #24]
 8008f70:	fb02 f303 	mul.w	r3, r2, r3
 8008f74:	8b7a      	ldrh	r2, [r7, #26]
 8008f76:	08d2      	lsrs	r2, r2, #3
 8008f78:	b292      	uxth	r2, r2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	75fb      	strb	r3, [r7, #23]
			//pixel = BIT_REVERSE(pixel); //if there is no software setup to flip the bit, uncomment this line
			bit_position = x%8;
 8008f86:	8b7b      	ldrh	r3, [r7, #26]
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	75bb      	strb	r3, [r7, #22]
			pixel = pixel>>bit_position; //right shift to the lowest bit for comparison
 8008f90:	7dfa      	ldrb	r2, [r7, #23]
 8008f92:	7dbb      	ldrb	r3, [r7, #22]
 8008f94:	fa42 f303 	asr.w	r3, r2, r3
 8008f98:	75fb      	strb	r3, [r7, #23]

			//Image inverse can be implemented by swapping WHITE and BLACK
			if(negative){
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00a      	beq.n	8008fb6 <fb_fill_area+0x7a>
				(pixel&0x01)?(_color=BLACK):(_color=WHITE);
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <fb_fill_area+0x74>
 8008faa:	2300      	movs	r3, #0
 8008fac:	77fb      	strb	r3, [r7, #31]
 8008fae:	e00c      	b.n	8008fca <fb_fill_area+0x8e>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	77fb      	strb	r3, [r7, #31]
 8008fb4:	e009      	b.n	8008fca <fb_fill_area+0x8e>
			}else{
				(pixel&0x01)?(_color=WHITE):(_color=BLACK);
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <fb_fill_area+0x8a>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	77fb      	strb	r3, [r7, #31]
 8008fc4:	e001      	b.n	8008fca <fb_fill_area+0x8e>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	77fb      	strb	r3, [r7, #31]
			}
				fb_set_pixel(area.x1+x, area.y1+y, _color);
 8008fca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	8b7b      	ldrh	r3, [r7, #26]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	b218      	sxth	r0, r3
 8008fd8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	8bbb      	ldrh	r3, [r7, #28]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	b21b      	sxth	r3, r3
 8008fe6:	7ffa      	ldrb	r2, [r7, #31]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	f7ff ff41 	bl	8008e70 <fb_set_pixel>
		for(uint16_t x=0; x<(area.x2-area.x1+1); x++){
 8008fee:	8b7b      	ldrh	r3, [r7, #26]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	837b      	strh	r3, [r7, #26]
 8008ff4:	8b7a      	ldrh	r2, [r7, #26]
 8008ff6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009000:	1acb      	subs	r3, r1, r3
 8009002:	3301      	adds	r3, #1
 8009004:	429a      	cmp	r2, r3
 8009006:	dbb1      	blt.n	8008f6c <fb_fill_area+0x30>
	for(uint16_t y=0; y<(area.y2-area.y1+1); y++){
 8009008:	8bbb      	ldrh	r3, [r7, #28]
 800900a:	3301      	adds	r3, #1
 800900c:	83bb      	strh	r3, [r7, #28]
 800900e:	8bba      	ldrh	r2, [r7, #28]
 8009010:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009014:	4619      	mov	r1, r3
 8009016:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800901a:	1acb      	subs	r3, r1, r3
 800901c:	3301      	adds	r3, #1
 800901e:	429a      	cmp	r2, r3
 8009020:	dba1      	blt.n	8008f66 <fb_fill_area+0x2a>
		}
	}
}
 8009022:	bf00      	nop
 8009024:	3724      	adds	r7, #36	; 0x24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd90      	pop	{r4, r7, pc}
	...

0800902c <ssd7317_scroll_area>:
 * @param	area (in pixels) in frame buffer to copy from.
 * @param	win is the window (in pixels) on screen for scrolling.
 * @param	dir is the swipe direction, either SWIPE_UP(SWIPE_RL) or SWIPE_DOWN(SWIPE_LR).
 */
void ssd7317_scroll_area(rect_t area, rect_t win, finger_t dir)
{
 800902c:	b590      	push	{r4, r7, lr}
 800902e:	b08b      	sub	sp, #44	; 0x2c
 8009030:	af00      	add	r7, sp, #0
 8009032:	f107 0408 	add.w	r4, r7, #8
 8009036:	e884 0003 	stmia.w	r4, {r0, r1}
 800903a:	4639      	mov	r1, r7
 800903c:	e881 000c 	stmia.w	r1, {r2, r3}
	if((dir.gesture!=SWIPE_DOWN) && (dir.gesture!=SWIPE_UP))
 8009040:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009044:	2b06      	cmp	r3, #6
 8009046:	d009      	beq.n	800905c <ssd7317_scroll_area+0x30>
 8009048:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800904c:	2b07      	cmp	r3, #7
 800904e:	d005      	beq.n	800905c <ssd7317_scroll_area+0x30>
	{
		assert_failed((uint8_t *)__FILE__, __LINE__);
 8009050:	f240 3106 	movw	r1, #774	; 0x306
 8009054:	4880      	ldr	r0, [pc, #512]	; (8009258 <ssd7317_scroll_area+0x22c>)
 8009056:	f7f8 f906 	bl	8001266 <assert_failed>
		return;
 800905a:	e0fa      	b.n	8009252 <ssd7317_scroll_area+0x226>
	
	//scrolling window in pixels
	rect_t scroll;

	//bound the area to physical screen size and take the minimum of content width(framebuffer width) v.s. (OLED_HOR_RES-1)
	scroll.y1 = win.y1;
 800905c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009060:	837b      	strh	r3, [r7, #26]
	scroll.y2 = min(win.y2, OLED_VER_RES-1);
 8009062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009066:	b29b      	uxth	r3, r3
 8009068:	217f      	movs	r1, #127	; 0x7f
 800906a:	4618      	mov	r0, r3
 800906c:	f7ff fda1 	bl	8008bb2 <min>
 8009070:	4603      	mov	r3, r0
 8009072:	b21b      	sxth	r3, r3
 8009074:	83fb      	strh	r3, [r7, #30]
	scroll.x1 = win.x1;
 8009076:	f9b7 3000 	ldrsh.w	r3, [r7]
 800907a:	833b      	strh	r3, [r7, #24]
	//take the min of window width v.s. framebuffer width
	uint16_t w = min((win.x2-win.x1+1),(area.x2-area.x1+1));
 800907c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009080:	b29a      	uxth	r2, r3
 8009082:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009086:	b29b      	uxth	r3, r3
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	b29b      	uxth	r3, r3
 800908c:	3301      	adds	r3, #1
 800908e:	b298      	uxth	r0, r3
 8009090:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009094:	b29a      	uxth	r2, r3
 8009096:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800909a:	b29b      	uxth	r3, r3
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	b29b      	uxth	r3, r3
 80090a0:	3301      	adds	r3, #1
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	4619      	mov	r1, r3
 80090a6:	f7ff fd84 	bl	8008bb2 <min>
 80090aa:	4603      	mov	r3, r0
 80090ac:	84bb      	strh	r3, [r7, #36]	; 0x24
	scroll.x2 = min((win.x1+w-1),OLED_HOR_RES-1);
 80090ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090b6:	4413      	add	r3, r2
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	3b01      	subs	r3, #1
 80090bc:	b29b      	uxth	r3, r3
 80090be:	215f      	movs	r1, #95	; 0x5f
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7ff fd76 	bl	8008bb2 <min>
 80090c6:	4603      	mov	r3, r0
 80090c8:	b21b      	sxth	r3, r3
 80090ca:	83bb      	strh	r3, [r7, #28]

	if((scroll.y1>=scroll.y2) || (scroll.x1>=scroll.x2)){
 80090cc:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80090d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	da05      	bge.n	80090e4 <ssd7317_scroll_area+0xb8>
 80090d8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80090dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	db05      	blt.n	80090f0 <ssd7317_scroll_area+0xc4>
		assert_failed((uint8_t *)__FILE__, __LINE__);
 80090e4:	f240 3116 	movw	r1, #790	; 0x316
 80090e8:	485b      	ldr	r0, [pc, #364]	; (8009258 <ssd7317_scroll_area+0x22c>)
 80090ea:	f7f8 f8bc 	bl	8001266 <assert_failed>
		return;
 80090ee:	e0b0      	b.n	8009252 <ssd7317_scroll_area+0x226>
	}

	uint8_t cmd[8];

	cmd[0] = 0x21;	//Set column address
 80090f0:	2321      	movs	r3, #33	; 0x21
 80090f2:	743b      	strb	r3, [r7, #16]
	if(dir.gesture==SWIPE_DOWN){
 80090f4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80090f8:	2b06      	cmp	r3, #6
 80090fa:	d106      	bne.n	800910a <ssd7317_scroll_area+0xde>
		cmd[1]=cmd[2]=scroll.y1;
 80090fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	74bb      	strb	r3, [r7, #18]
 8009104:	7cbb      	ldrb	r3, [r7, #18]
 8009106:	747b      	strb	r3, [r7, #17]
 8009108:	e005      	b.n	8009116 <ssd7317_scroll_area+0xea>
	}else{
		cmd[1]=cmd[2]=scroll.y2;
 800910a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	74bb      	strb	r3, [r7, #18]
 8009112:	7cbb      	ldrb	r3, [r7, #18]
 8009114:	747b      	strb	r3, [r7, #17]
	}
	cmd[3] = 0x22;	//Set page address
 8009116:	2322      	movs	r3, #34	; 0x22
 8009118:	74fb      	strb	r3, [r7, #19]
	cmd[4] = BUFIDX(scroll.x1,0);
 800911a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800911e:	10db      	asrs	r3, r3, #3
 8009120:	b21b      	sxth	r3, r3
 8009122:	b2db      	uxtb	r3, r3
 8009124:	753b      	strb	r3, [r7, #20]
	cmd[5] = BUFIDX(scroll.x2,0);
 8009126:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800912a:	10db      	asrs	r3, r3, #3
 800912c:	b21b      	sxth	r3, r3
 800912e:	b2db      	uxtb	r3, r3
 8009130:	757b      	strb	r3, [r7, #21]
	spi_write_command((const uint8_t *)&cmd, 6);
 8009132:	f107 0310 	add.w	r3, r7, #16
 8009136:	2106      	movs	r1, #6
 8009138:	4618      	mov	r0, r3
 800913a:	f7ff fe51 	bl	8008de0 <spi_write_command>

	//length of pages across the COM direction to copy from framebuffer to screen
	uint16_t len = BUFIDX(scroll.x2,0)-BUFIDX(scroll.x1,0)+1;
 800913e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009142:	10db      	asrs	r3, r3, #3
 8009144:	b21b      	sxth	r3, r3
 8009146:	b29a      	uxth	r2, r3
 8009148:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800914c:	10db      	asrs	r3, r3, #3
 800914e:	b21b      	sxth	r3, r3
 8009150:	b29b      	uxth	r3, r3
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	b29b      	uxth	r3, r3
 8009156:	3301      	adds	r3, #1
 8009158:	847b      	strh	r3, [r7, #34]	; 0x22

	for(uint16_t col=0; col<(scroll.y2-scroll.y1+1); col++){
 800915a:	2300      	movs	r3, #0
 800915c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800915e:	e06e      	b.n	800923e <ssd7317_scroll_area+0x212>
		if(dir.gesture==SWIPE_DOWN){
 8009160:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009164:	2b06      	cmp	r3, #6
 8009166:	d102      	bne.n	800916e <ssd7317_scroll_area+0x142>
			cmd[0] = 0x2c;
 8009168:	232c      	movs	r3, #44	; 0x2c
 800916a:	743b      	strb	r3, [r7, #16]
 800916c:	e001      	b.n	8009172 <ssd7317_scroll_area+0x146>
		}else{
			cmd[0] = 0x2d;
 800916e:	232d      	movs	r3, #45	; 0x2d
 8009170:	743b      	strb	r3, [r7, #16]
		}
		cmd[1]=0x00; cmd[2]=BUFIDX(scroll.x1,0); cmd[3]=0x01; cmd[4]=BUFIDX(scroll.x2,0); cmd[5]=0x00; cmd[6]=scroll.y1; cmd[7]=scroll.y2;
 8009172:	2300      	movs	r3, #0
 8009174:	747b      	strb	r3, [r7, #17]
 8009176:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800917a:	10db      	asrs	r3, r3, #3
 800917c:	b21b      	sxth	r3, r3
 800917e:	b2db      	uxtb	r3, r3
 8009180:	74bb      	strb	r3, [r7, #18]
 8009182:	2301      	movs	r3, #1
 8009184:	74fb      	strb	r3, [r7, #19]
 8009186:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800918a:	10db      	asrs	r3, r3, #3
 800918c:	b21b      	sxth	r3, r3
 800918e:	b2db      	uxtb	r3, r3
 8009190:	753b      	strb	r3, [r7, #20]
 8009192:	2300      	movs	r3, #0
 8009194:	757b      	strb	r3, [r7, #21]
 8009196:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800919a:	b2db      	uxtb	r3, r3
 800919c:	75bb      	strb	r3, [r7, #22]
 800919e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	75fb      	strb	r3, [r7, #23]

		//Send command to scroll by 1 column (segment)
		spi_write_command((const uint8_t*)cmd, 8);
 80091a6:	f107 0310 	add.w	r3, r7, #16
 80091aa:	2108      	movs	r1, #8
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7ff fe17 	bl	8008de0 <spi_write_command>
		//delay for a 2/frame_freq = 2/160Hz = 12.5ms
		HAL_Delay(12);
 80091b2:	200c      	movs	r0, #12
 80091b4:	f7f8 fc14 	bl	80019e0 <HAL_Delay>
		//DC pin set high for data send in next SPI transfer
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 80091b8:	2201      	movs	r2, #1
 80091ba:	2102      	movs	r1, #2
 80091bc:	4827      	ldr	r0, [pc, #156]	; (800925c <ssd7317_scroll_area+0x230>)
 80091be:	f7f9 fb27 	bl	8002810 <HAL_GPIO_WritePin>

		if(col<(area.y2-area.y1+1)){
 80091c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80091c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80091c8:	4619      	mov	r1, r3
 80091ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80091ce:	1acb      	subs	r3, r1, r3
 80091d0:	3301      	adds	r3, #1
 80091d2:	429a      	cmp	r2, r3
 80091d4:	da30      	bge.n	8009238 <ssd7317_scroll_area+0x20c>
				}else{
					HAL_StatusTypeDef err = HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)&frame_buffer[BUFIDX(area.x1,(area.y1+col))], len, 10);
				}
			#else
				//non-DMA SPI transfer, it is a blocking function
				if(dir.gesture==SWIPE_DOWN){
 80091d6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80091da:	2b06      	cmp	r3, #6
 80091dc:	d116      	bne.n	800920c <ssd7317_scroll_area+0x1e0>
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&frame_buffer[BUFIDX(area.x1,(area.y2-col))], len, 10);
 80091de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80091e2:	10db      	asrs	r3, r3, #3
 80091e4:	b21b      	sxth	r3, r3
 80091e6:	4619      	mov	r1, r3
 80091e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80091ec:	461a      	mov	r2, r3
 80091ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091f0:	1ad2      	subs	r2, r2, r3
 80091f2:	4613      	mov	r3, r2
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	4413      	add	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	440b      	add	r3, r1
 80091fc:	4a18      	ldr	r2, [pc, #96]	; (8009260 <ssd7317_scroll_area+0x234>)
 80091fe:	1899      	adds	r1, r3, r2
 8009200:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009202:	230a      	movs	r3, #10
 8009204:	4817      	ldr	r0, [pc, #92]	; (8009264 <ssd7317_scroll_area+0x238>)
 8009206:	f7fc f9f7 	bl	80055f8 <HAL_SPI_Transmit>
 800920a:	e015      	b.n	8009238 <ssd7317_scroll_area+0x20c>
				}else{
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&frame_buffer[BUFIDX(area.x1,(area.y1+col))], len, 10);
 800920c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009210:	10db      	asrs	r3, r3, #3
 8009212:	b21b      	sxth	r3, r3
 8009214:	4619      	mov	r1, r3
 8009216:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800921a:	461a      	mov	r2, r3
 800921c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800921e:	441a      	add	r2, r3
 8009220:	4613      	mov	r3, r2
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	4413      	add	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	440b      	add	r3, r1
 800922a:	4a0d      	ldr	r2, [pc, #52]	; (8009260 <ssd7317_scroll_area+0x234>)
 800922c:	1899      	adds	r1, r3, r2
 800922e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009230:	230a      	movs	r3, #10
 8009232:	480c      	ldr	r0, [pc, #48]	; (8009264 <ssd7317_scroll_area+0x238>)
 8009234:	f7fc f9e0 	bl	80055f8 <HAL_SPI_Transmit>
	for(uint16_t col=0; col<(scroll.y2-scroll.y1+1); col++){
 8009238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800923a:	3301      	adds	r3, #1
 800923c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800923e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009240:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009244:	4619      	mov	r1, r3
 8009246:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800924a:	1acb      	subs	r3, r1, r3
 800924c:	3301      	adds	r3, #1
 800924e:	429a      	cmp	r2, r3
 8009250:	db86      	blt.n	8009160 <ssd7317_scroll_area+0x134>
				}
			#endif
		}
	}
*/
}
 8009252:	372c      	adds	r7, #44	; 0x2c
 8009254:	46bd      	mov	sp, r7
 8009256:	bd90      	pop	{r4, r7, pc}
 8009258:	0800b248 	.word	0x0800b248
 800925c:	48000400 	.word	0x48000400
 8009260:	20000494 	.word	0x20000494
 8009264:	200000c0 	.word	0x200000c0

08009268 <fb_clear>:
  * @param	area to fill in frame buffer
  * @param 	color_t color is WHITE or BLACK
  * @return None
  */
static void fb_clear(rect_t area, color_t color)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	f107 0308 	add.w	r3, r7, #8
 8009272:	e883 0003 	stmia.w	r3, {r0, r1}
 8009276:	4613      	mov	r3, r2
 8009278:	71fb      	strb	r3, [r7, #7]
	color_t _color=0xff;
 800927a:	23ff      	movs	r3, #255	; 0xff
 800927c:	75fb      	strb	r3, [r7, #23]

	if(color==BLACK){
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <fb_clear+0x20>
		_color=0x00;
 8009284:	2300      	movs	r3, #0
 8009286:	75fb      	strb	r3, [r7, #23]
	}

	for(uint16_t y=area.y1; y<=area.y2; y++)
 8009288:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800928c:	82bb      	strh	r3, [r7, #20]
 800928e:	e01b      	b.n	80092c8 <fb_clear+0x60>
	{
		for(uint16_t x=area.x1; x<=area.x2; x+=8)
 8009290:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009294:	827b      	strh	r3, [r7, #18]
 8009296:	e00f      	b.n	80092b8 <fb_clear+0x50>
		{
			frame_buffer[BUFIDX(x,y)] = _color;
 8009298:	8a7b      	ldrh	r3, [r7, #18]
 800929a:	08db      	lsrs	r3, r3, #3
 800929c:	b29b      	uxth	r3, r3
 800929e:	4619      	mov	r1, r3
 80092a0:	8aba      	ldrh	r2, [r7, #20]
 80092a2:	4613      	mov	r3, r2
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	4413      	add	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	440b      	add	r3, r1
 80092ac:	490c      	ldr	r1, [pc, #48]	; (80092e0 <fb_clear+0x78>)
 80092ae:	7dfa      	ldrb	r2, [r7, #23]
 80092b0:	54ca      	strb	r2, [r1, r3]
		for(uint16_t x=area.x1; x<=area.x2; x+=8)
 80092b2:	8a7b      	ldrh	r3, [r7, #18]
 80092b4:	3308      	adds	r3, #8
 80092b6:	827b      	strh	r3, [r7, #18]
 80092b8:	8a7b      	ldrh	r3, [r7, #18]
 80092ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80092be:	4293      	cmp	r3, r2
 80092c0:	ddea      	ble.n	8009298 <fb_clear+0x30>
	for(uint16_t y=area.y1; y<=area.y2; y++)
 80092c2:	8abb      	ldrh	r3, [r7, #20]
 80092c4:	3301      	adds	r3, #1
 80092c6:	82bb      	strh	r3, [r7, #20]
 80092c8:	8abb      	ldrh	r3, [r7, #20]
 80092ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80092ce:	4293      	cmp	r3, r2
 80092d0:	ddde      	ble.n	8009290 <fb_clear+0x28>
		}
	}
}
 80092d2:	bf00      	nop
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	20000494 	.word	0x20000494

080092e4 <fb_spi_transfer>:
  * \b	Description:<br>
  * 	Fill GDDRAM of OLED with frame buffer content by SPI transfers<br>
  * @param	area is the content in frame buffer to copy to GDDRAM
  */
static void fb_spi_transfer(rect_t area)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	463b      	mov	r3, r7
 80092ec:	e883 0003 	stmia.w	r3, {r0, r1}
	/*avoid running outside array index, may use assert here*/
	if(	area.y1>(OLED_VER_RES-1)|| area.y2>(OLED_VER_RES-1) || area.x2>(OLED_HOR_RES-1))
 80092f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092f4:	2b7f      	cmp	r3, #127	; 0x7f
 80092f6:	dc07      	bgt.n	8009308 <fb_spi_transfer+0x24>
 80092f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80092fc:	2b7f      	cmp	r3, #127	; 0x7f
 80092fe:	dc03      	bgt.n	8009308 <fb_spi_transfer+0x24>
 8009300:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009304:	2b5f      	cmp	r3, #95	; 0x5f
 8009306:	dd05      	ble.n	8009314 <fb_spi_transfer+0x30>
	{
		assert_failed((uint8_t *)__FILE__,__LINE__);
 8009308:	f240 31a2 	movw	r1, #930	; 0x3a2
 800930c:	482a      	ldr	r0, [pc, #168]	; (80093b8 <fb_spi_transfer+0xd4>)
 800930e:	f7f7 ffaa 	bl	8001266 <assert_failed>
 8009312:	e04d      	b.n	80093b0 <fb_spi_transfer+0xcc>
		return;
	}

	/*Set segment address with command {0x21, start SEG, end SEG}*/
	uint8_t cmd[3] = {0x21, (uint8_t)area.y1, (uint8_t)area.y2};
 8009314:	2321      	movs	r3, #33	; 0x21
 8009316:	723b      	strb	r3, [r7, #8]
 8009318:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800931c:	b2db      	uxtb	r3, r3
 800931e:	727b      	strb	r3, [r7, #9]
 8009320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009324:	b2db      	uxtb	r3, r3
 8009326:	72bb      	strb	r3, [r7, #10]
	spi_write_command((const uint8_t *)&cmd, 3);
 8009328:	f107 0308 	add.w	r3, r7, #8
 800932c:	2103      	movs	r1, #3
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff fd56 	bl	8008de0 <spi_write_command>

	/*Set page address with command {0x22, start PAGE=0, end PAGE=11(for 96*128 OLED resolution)}*/
	cmd[0] = 0x22;
 8009334:	2322      	movs	r3, #34	; 0x22
 8009336:	723b      	strb	r3, [r7, #8]
	cmd[1] = BUFIDX(0,0);
 8009338:	2300      	movs	r3, #0
 800933a:	727b      	strb	r3, [r7, #9]
	cmd[2] = BUFIDX((OLED_HOR_RES-1),0);
 800933c:	230b      	movs	r3, #11
 800933e:	72bb      	strb	r3, [r7, #10]
	spi_write_command((const uint8_t *)&cmd, 3);
 8009340:	f107 0308 	add.w	r3, r7, #8
 8009344:	2103      	movs	r1, #3
 8009346:	4618      	mov	r0, r3
 8009348:	f7ff fd4a 	bl	8008de0 <spi_write_command>

	uint16_t length = (area.y2-area.y1+1)*(cmd[2]-cmd[1]+1);
 800934c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009350:	461a      	mov	r2, r3
 8009352:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	3301      	adds	r3, #1
 800935a:	b29a      	uxth	r2, r3
 800935c:	7abb      	ldrb	r3, [r7, #10]
 800935e:	4619      	mov	r1, r3
 8009360:	7a7b      	ldrb	r3, [r7, #9]
 8009362:	1acb      	subs	r3, r1, r3
 8009364:	3301      	adds	r3, #1
 8009366:	b29b      	uxth	r3, r3
 8009368:	fb12 f303 	smulbb	r3, r2, r3
 800936c:	81fb      	strh	r3, [r7, #14]
	/*DC pin set high for data send in next SPI transfer*/
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 800936e:	2201      	movs	r2, #1
 8009370:	2102      	movs	r1, #2
 8009372:	4812      	ldr	r0, [pc, #72]	; (80093bc <fb_spi_transfer+0xd8>)
 8009374:	f7f9 fa4c 	bl	8002810 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	/*DMA send = non blocking function*/
	HAL_StatusTypeDef err = HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)&frame_buffer[BUFIDX(0,area.y1)], length);
#else
	/*non-DMA SPI transfer, it is a blocking function*/
	HAL_StatusTypeDef err = HAL_SPI_Transmit(&hspi1, (uint8_t *)&frame_buffer[BUFIDX(0,area.y1)], length, 10);
 8009378:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800937c:	461a      	mov	r2, r3
 800937e:	4613      	mov	r3, r2
 8009380:	005b      	lsls	r3, r3, #1
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	461a      	mov	r2, r3
 8009388:	4b0d      	ldr	r3, [pc, #52]	; (80093c0 <fb_spi_transfer+0xdc>)
 800938a:	18d1      	adds	r1, r2, r3
 800938c:	89fa      	ldrh	r2, [r7, #14]
 800938e:	230a      	movs	r3, #10
 8009390:	480c      	ldr	r0, [pc, #48]	; (80093c4 <fb_spi_transfer+0xe0>)
 8009392:	f7fc f931 	bl	80055f8 <HAL_SPI_Transmit>
 8009396:	4603      	mov	r3, r0
 8009398:	737b      	strb	r3, [r7, #13]
	fb_flush_pending_clear();
 800939a:	f000 f84f 	bl	800943c <fb_flush_pending_clear>
#endif

	switch(err){
 800939e:	7b7b      	ldrb	r3, [r7, #13]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d002      	beq.n	80093aa <fb_spi_transfer+0xc6>
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d000      	beq.n	80093aa <fb_spi_transfer+0xc6>
		case HAL_TIMEOUT:
		case HAL_ERROR:
			Error_Handler();
			break;
		default:
			break;
 80093a8:	e002      	b.n	80093b0 <fb_spi_transfer+0xcc>
			Error_Handler();
 80093aa:	f7f7 ff55 	bl	8001258 <Error_Handler>
			break;
 80093ae:	bf00      	nop
	}
}
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	0800b248 	.word	0x0800b248
 80093bc:	48000400 	.word	0x48000400
 80093c0:	20000494 	.word	0x20000494
 80093c4:	200000c0 	.word	0x200000c0

080093c8 <fb_flush_pending_set>:
 *		Set flag to tell that GUI content to be flushed.
 *		Used in HAL_GPIO_EXTI_Callback().
 *@param area is the content in frame buffer to copy to GDDRAM
 */
static void fb_flush_pending_set(rect_t area)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	463b      	mov	r3, r7
 80093d0:	e883 0003 	stmia.w	r3, {r0, r1}
	fb_flush_area = area;
 80093d4:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <fb_flush_pending_set+0x2c>)
 80093d6:	461a      	mov	r2, r3
 80093d8:	463b      	mov	r3, r7
 80093da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80093de:	e882 0003 	stmia.w	r2, {r0, r1}
	fb_flush_pending = true;
 80093e2:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <fb_flush_pending_set+0x30>)
 80093e4:	2201      	movs	r2, #1
 80093e6:	701a      	strb	r2, [r3, #0]
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	20000170 	.word	0x20000170
 80093f8:	200000bd 	.word	0x200000bd

080093fc <fb_flush_suspend>:

/**
 * @brief Wait until previous SPI transfer (if any) has finished
 */
static void fb_flush_suspend(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
	uint8_t timeout = 20;
 8009402:	2314      	movs	r3, #20
 8009404:	71fb      	strb	r3, [r7, #7]
	while(fb_flush_pending_get())
 8009406:	e00d      	b.n	8009424 <fb_flush_suspend+0x28>
	{
		if(timeout-- == 0)
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	1e5a      	subs	r2, r3, #1
 800940c:	71fa      	strb	r2, [r7, #7]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d105      	bne.n	800941e <fb_flush_suspend+0x22>
		{
	#ifdef USE_FULL_ASSERT
				//Error with DMA Flag not protected well. Check timing.
				assert_failed((uint8_t *)__FILE__, __LINE__);
 8009412:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8009416:	4808      	ldr	r0, [pc, #32]	; (8009438 <fb_flush_suspend+0x3c>)
 8009418:	f7f7 ff25 	bl	8001266 <assert_failed>
	#endif
				break;
 800941c:	e007      	b.n	800942e <fb_flush_suspend+0x32>
		}
		HAL_Delay(1);
 800941e:	2001      	movs	r0, #1
 8009420:	f7f8 fade 	bl	80019e0 <HAL_Delay>
	while(fb_flush_pending_get())
 8009424:	f000 f816 	bl	8009454 <fb_flush_pending_get>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1ec      	bne.n	8009408 <fb_flush_suspend+0xc>
	}
}
 800942e:	bf00      	nop
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	0800b248 	.word	0x0800b248

0800943c <fb_flush_pending_clear>:
 * @brief
 * \b	Description:
 * 		Clear flush pending flag
 */
static void fb_flush_pending_clear(void)
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
	fb_flush_pending = false;
 8009440:	4b03      	ldr	r3, [pc, #12]	; (8009450 <fb_flush_pending_clear+0x14>)
 8009442:	2200      	movs	r2, #0
 8009444:	701a      	strb	r2, [r3, #0]
}
 8009446:	bf00      	nop
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	200000bd 	.word	0x200000bd

08009454 <fb_flush_pending_get>:

/**
 * @return Frame buffer flush pending flag
 */
static bool fb_flush_pending_get(void)
{
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
	return fb_flush_pending;
 8009458:	4b03      	ldr	r3, [pc, #12]	; (8009468 <fb_flush_pending_get+0x14>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	b2db      	uxtb	r3, r3
}
 800945e:	4618      	mov	r0, r3
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	200000bd 	.word	0x200000bd

0800946c <i2c_write>:
 * @param reg is the register address sending with LSB first i.e. 0xf0 sending first with reg=0x0af0
 * @param *data points to the data buffer to send
 * @param len is the byte count to send
 */
static void i2c_write(uint8_t slave, uint16_t reg, const uint8_t *data, uint16_t len)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08a      	sub	sp, #40	; 0x28
 8009470:	af04      	add	r7, sp, #16
 8009472:	60ba      	str	r2, [r7, #8]
 8009474:	461a      	mov	r2, r3
 8009476:	4603      	mov	r3, r0
 8009478:	73fb      	strb	r3, [r7, #15]
 800947a:	460b      	mov	r3, r1
 800947c:	81bb      	strh	r3, [r7, #12]
 800947e:	4613      	mov	r3, r2
 8009480:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef err;

	if(len){
 8009482:	88fb      	ldrh	r3, [r7, #6]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d01c      	beq.n	80094c2 <i2c_write+0x56>
		//swap high and low bytes so that lower byte is sent first
		uint16_t reg_byte_swap = ((reg<<8)&0xff00) | ((reg>>8)&0x00ff);
 8009488:	89bb      	ldrh	r3, [r7, #12]
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	b21a      	sxth	r2, r3
 800948e:	89bb      	ldrh	r3, [r7, #12]
 8009490:	0a1b      	lsrs	r3, r3, #8
 8009492:	b29b      	uxth	r3, r3
 8009494:	b21b      	sxth	r3, r3
 8009496:	4313      	orrs	r3, r2
 8009498:	b21b      	sxth	r3, r3
 800949a:	82bb      	strh	r3, [r7, #20]
		err = HAL_I2C_Mem_Write(&hi2c1, slave<<1, reg_byte_swap, 2, (uint8_t *)data, len, 5000);
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	005b      	lsls	r3, r3, #1
 80094a2:	b299      	uxth	r1, r3
 80094a4:	8aba      	ldrh	r2, [r7, #20]
 80094a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80094aa:	9302      	str	r3, [sp, #8]
 80094ac:	88fb      	ldrh	r3, [r7, #6]
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	2302      	movs	r3, #2
 80094b6:	4810      	ldr	r0, [pc, #64]	; (80094f8 <i2c_write+0x8c>)
 80094b8:	f7f9 fcf0 	bl	8002e9c <HAL_I2C_Mem_Write>
 80094bc:	4603      	mov	r3, r0
 80094be:	75fb      	strb	r3, [r7, #23]
 80094c0:	e00e      	b.n	80094e0 <i2c_write+0x74>
	}
	else
	{
		err = HAL_I2C_Master_Transmit(&hi2c1, slave<<1, (uint8_t *)&reg, 2, 500);
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	b299      	uxth	r1, r3
 80094ca:	f107 020c 	add.w	r2, r7, #12
 80094ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	2302      	movs	r3, #2
 80094d6:	4808      	ldr	r0, [pc, #32]	; (80094f8 <i2c_write+0x8c>)
 80094d8:	f7f9 faf6 	bl	8002ac8 <HAL_I2C_Master_Transmit>
 80094dc:	4603      	mov	r3, r0
 80094de:	75fb      	strb	r3, [r7, #23]
	}

	switch(err){
 80094e0:	7dfb      	ldrb	r3, [r7, #23]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d000      	beq.n	80094e8 <i2c_write+0x7c>
		case HAL_ERROR:
			Error_Handler();
			break;
			default:
			break;
 80094e6:	e002      	b.n	80094ee <i2c_write+0x82>
			Error_Handler();
 80094e8:	f7f7 feb6 	bl	8001258 <Error_Handler>
			break;
 80094ec:	bf00      	nop
		}
}
 80094ee:	bf00      	nop
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20000124 	.word	0x20000124

080094fc <i2c_read>:
 * @param reg is the register to read from
 * @param buffer points to an array to keep incoming characters
 * @param len is the byte count to read
 */
static void i2c_read(uint8_t slave, uint16_t reg, uint8_t *buffer, uint16_t len)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af02      	add	r7, sp, #8
 8009502:	60ba      	str	r2, [r7, #8]
 8009504:	461a      	mov	r2, r3
 8009506:	4603      	mov	r3, r0
 8009508:	73fb      	strb	r3, [r7, #15]
 800950a:	460b      	mov	r3, r1
 800950c:	81bb      	strh	r3, [r7, #12]
 800950e:	4613      	mov	r3, r2
 8009510:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef err = HAL_I2C_Master_Transmit(&hi2c1, slave<<1, (uint8_t *)&reg, 2, 500);
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	b29b      	uxth	r3, r3
 8009516:	005b      	lsls	r3, r3, #1
 8009518:	b299      	uxth	r1, r3
 800951a:	f107 020c 	add.w	r2, r7, #12
 800951e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	2302      	movs	r3, #2
 8009526:	4816      	ldr	r0, [pc, #88]	; (8009580 <i2c_read+0x84>)
 8009528:	f7f9 face 	bl	8002ac8 <HAL_I2C_Master_Transmit>
 800952c:	4603      	mov	r3, r0
 800952e:	75fb      	strb	r3, [r7, #23]
	switch(err){
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d000      	beq.n	8009538 <i2c_read+0x3c>
			case HAL_ERROR:
				Error_Handler();
				break;
				default:
				break;
 8009536:	e002      	b.n	800953e <i2c_read+0x42>
				Error_Handler();
 8009538:	f7f7 fe8e 	bl	8001258 <Error_Handler>
				break;
 800953c:	bf00      	nop
			}

	HAL_DWT_Delay_us(200); //delay for 200us is mandatory for I2C Read
 800953e:	20c8      	movs	r0, #200	; 0xc8
 8009540:	f7ff fa2a 	bl	8008998 <HAL_DWT_Delay_us>

	err = HAL_I2C_Master_Receive(&hi2c1, (slave<<1)|0x01, buffer, len, 1000);
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	b21b      	sxth	r3, r3
 800954a:	f043 0301 	orr.w	r3, r3, #1
 800954e:	b21b      	sxth	r3, r3
 8009550:	b299      	uxth	r1, r3
 8009552:	88fa      	ldrh	r2, [r7, #6]
 8009554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	4613      	mov	r3, r2
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	4808      	ldr	r0, [pc, #32]	; (8009580 <i2c_read+0x84>)
 8009560:	f7f9 fba6 	bl	8002cb0 <HAL_I2C_Master_Receive>
 8009564:	4603      	mov	r3, r0
 8009566:	75fb      	strb	r3, [r7, #23]

	switch(err){
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d000      	beq.n	8009570 <i2c_read+0x74>
		case HAL_ERROR:
			Error_Handler();
			break;
			default:
			break;
 800956e:	e002      	b.n	8009576 <i2c_read+0x7a>
			Error_Handler();
 8009570:	f7f7 fe72 	bl	8001258 <Error_Handler>
			break;
 8009574:	bf00      	nop
		}
}
 8009576:	bf00      	nop
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20000124 	.word	0x20000124

08009584 <touch_crc_checksum>:
 * @param 	trig_cmd is the command to trigger a CRC read:
 * 			PM trigger(0x03), DM trigger (0x05), TM trigger (0x09)
 * @return 	CRC value calculated by SSD7317
 */
static uint16_t touch_crc_checksum(uint16_t byte_cnt, uint8_t trig_cmd)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	460a      	mov	r2, r1
 800958e:	80fb      	strh	r3, [r7, #6]
 8009590:	4613      	mov	r3, r2
 8009592:	717b      	strb	r3, [r7, #5]
	uint16_t i2c_ret=0, expiry_ms=5; //preset 5ms for CRC calculation time
 8009594:	2300      	movs	r3, #0
 8009596:	81bb      	strh	r3, [r7, #12]
 8009598:	2305      	movs	r3, #5
 800959a:	81fb      	strh	r3, [r7, #14]

	//(1)Clear SA
	i2c_write(TOUCH_SA, 0x0000, 0, 0);
 800959c:	2300      	movs	r3, #0
 800959e:	2200      	movs	r2, #0
 80095a0:	2100      	movs	r1, #0
 80095a2:	2053      	movs	r0, #83	; 0x53
 80095a4:	f7ff ff62 	bl	800946c <i2c_write>

	//(2)Send CRC trigger command
	uint8_t data[3] = {(uint8_t)byte_cnt&0xff, (uint8_t)(byte_cnt>>8), trig_cmd};
 80095a8:	88fb      	ldrh	r3, [r7, #6]
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	723b      	strb	r3, [r7, #8]
 80095ae:	88fb      	ldrh	r3, [r7, #6]
 80095b0:	0a1b      	lsrs	r3, r3, #8
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	727b      	strb	r3, [r7, #9]
 80095b8:	797b      	ldrb	r3, [r7, #5]
 80095ba:	72bb      	strb	r3, [r7, #10]
	i2c_write(TOUCH_SA_BIOS, 0x8100, (const uint8_t *)&data, 3);
 80095bc:	f107 0208 	add.w	r2, r7, #8
 80095c0:	2303      	movs	r3, #3
 80095c2:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80095c6:	2057      	movs	r0, #87	; 0x57
 80095c8:	f7ff ff50 	bl	800946c <i2c_write>

	//(3)Read S&L and wait until CRC is ready; otherwise, a timeout failure triggered
	while(i2c_ret!=0xcaf0){
 80095cc:	e016      	b.n	80095fc <touch_crc_checksum+0x78>
		i2c_read(TOUCH_SA, 0x0af0, (uint8_t *)&i2c_ret, 2);
 80095ce:	f107 020c 	add.w	r2, r7, #12
 80095d2:	2302      	movs	r3, #2
 80095d4:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 80095d8:	2053      	movs	r0, #83	; 0x53
 80095da:	f7ff ff8f 	bl	80094fc <i2c_read>
		HAL_Delay(1);
 80095de:	2001      	movs	r0, #1
 80095e0:	f7f8 f9fe 	bl	80019e0 <HAL_Delay>
		if((expiry_ms--)==0){
 80095e4:	89fb      	ldrh	r3, [r7, #14]
 80095e6:	1e5a      	subs	r2, r3, #1
 80095e8:	81fa      	strh	r2, [r7, #14]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d106      	bne.n	80095fc <touch_crc_checksum+0x78>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 80095ee:	f240 4157 	movw	r1, #1111	; 0x457
 80095f2:	480b      	ldr	r0, [pc, #44]	; (8009620 <touch_crc_checksum+0x9c>)
 80095f4:	f7f7 fe37 	bl	8001266 <assert_failed>
#endif
			return 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	e00d      	b.n	8009618 <touch_crc_checksum+0x94>
	while(i2c_ret!=0xcaf0){
 80095fc:	89bb      	ldrh	r3, [r7, #12]
 80095fe:	f64c 22f0 	movw	r2, #51952	; 0xcaf0
 8009602:	4293      	cmp	r3, r2
 8009604:	d1e3      	bne.n	80095ce <touch_crc_checksum+0x4a>
		}
	}

	//(4)Read CRC from 0x8100
	i2c_read(TOUCH_SA_BIOS, 0x8100, (uint8_t *)&i2c_ret, 2);
 8009606:	f107 020c 	add.w	r2, r7, #12
 800960a:	2302      	movs	r3, #2
 800960c:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8009610:	2057      	movs	r0, #87	; 0x57
 8009612:	f7ff ff73 	bl	80094fc <i2c_read>

	return i2c_ret;
 8009616:	89bb      	ldrh	r3, [r7, #12]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	0800b248 	.word	0x0800b248

08009624 <touch_init>:
 *@brief
 *\b	Description:<br>
 *		Initialize touch interface to implement "Reset and Boot" procedures as stated on Section 3<br>
 */
static void touch_init(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
	uint16_t i2c_ret;

	//(0) Initialize micro-seconds software delay in STM32. A delay of 200us is mandatory in Touch_I2C_Read().
	if(HAL_DWT_Delay_Init()){
 800962a:	f000 fc71 	bl	8009f10 <HAL_DWT_Delay_Init>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <touch_init+0x1a>
#ifdef USE_FULL_ASSERT
		assert_failed((uint8_t *)__FILE__, __LINE__);
 8009634:	f240 416f 	movw	r1, #1135	; 0x46f
 8009638:	4879      	ldr	r0, [pc, #484]	; (8009820 <touch_init+0x1fc>)
 800963a:	f7f7 fe14 	bl	8001266 <assert_failed>
#endif
	}

	//(1) IC Initialization with 0x0af0 (I2C send with lower byte first)
	i2c_read(TOUCH_SA, 0x0af0, (uint8_t *)&i2c_ret, 2);
 800963e:	1d3a      	adds	r2, r7, #4
 8009640:	2302      	movs	r3, #2
 8009642:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8009646:	2053      	movs	r0, #83	; 0x53
 8009648:	f7ff ff58 	bl	80094fc <i2c_read>
	if(i2c_ret!=0xcaf0){
 800964c:	88bb      	ldrh	r3, [r7, #4]
 800964e:	f64c 22f0 	movw	r2, #51952	; 0xcaf0
 8009652:	4293      	cmp	r3, r2
 8009654:	d005      	beq.n	8009662 <touch_init+0x3e>
#ifdef USE_FULL_ASSERT
		assert_failed((uint8_t *)__FILE__, __LINE__);
 8009656:	f240 4177 	movw	r1, #1143	; 0x477
 800965a:	4871      	ldr	r0, [pc, #452]	; (8009820 <touch_init+0x1fc>)
 800965c:	f7f7 fe03 	bl	8001266 <assert_failed>
 8009660:	e0db      	b.n	800981a <touch_init+0x1f6>
		return;
	}

	//(2) Send byte sequence for PM-select for 1228 bytes in 24 blocks of 512 bytes each
	//PM Select
	i2c_write(TOUCH_SA, 0x0001, 0, 0);
 8009662:	2300      	movs	r3, #0
 8009664:	2200      	movs	r2, #0
 8009666:	2101      	movs	r1, #1
 8009668:	2053      	movs	r0, #83	; 0x53
 800966a:	f7ff feff 	bl	800946c <i2c_write>
	for(uint8_t n=0; n<24; n++){
 800966e:	2300      	movs	r3, #0
 8009670:	71fb      	strb	r3, [r7, #7]
 8009672:	e010      	b.n	8009696 <touch_init+0x72>
		i2c_write(TOUCH_SA_BIOS, 2*n, (const uint8_t *)&FW_PM.content[n*512], 512);
 8009674:	79fb      	ldrb	r3, [r7, #7]
 8009676:	b29b      	uxth	r3, r3
 8009678:	005b      	lsls	r3, r3, #1
 800967a:	b299      	uxth	r1, r3
 800967c:	4b69      	ldr	r3, [pc, #420]	; (8009824 <touch_init+0x200>)
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	79fa      	ldrb	r2, [r7, #7]
 8009682:	0252      	lsls	r2, r2, #9
 8009684:	441a      	add	r2, r3
 8009686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800968a:	2057      	movs	r0, #87	; 0x57
 800968c:	f7ff feee 	bl	800946c <i2c_write>
	for(uint8_t n=0; n<24; n++){
 8009690:	79fb      	ldrb	r3, [r7, #7]
 8009692:	3301      	adds	r3, #1
 8009694:	71fb      	strb	r3, [r7, #7]
 8009696:	79fb      	ldrb	r3, [r7, #7]
 8009698:	2b17      	cmp	r3, #23
 800969a:	d9eb      	bls.n	8009674 <touch_init+0x50>
	}

	//(3) Send byte sequence for TM-select 1844 bytes,
	i2c_write(TOUCH_SA, 0x0003, 0, 0);
 800969c:	2300      	movs	r3, #0
 800969e:	2200      	movs	r2, #0
 80096a0:	2103      	movs	r1, #3
 80096a2:	2053      	movs	r0, #83	; 0x53
 80096a4:	f7ff fee2 	bl	800946c <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0, (const uint8_t *)&FW_TM.content[0], 512);
 80096a8:	4b5f      	ldr	r3, [pc, #380]	; (8009828 <touch_init+0x204>)
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096b0:	2100      	movs	r1, #0
 80096b2:	2057      	movs	r0, #87	; 0x57
 80096b4:	f7ff feda 	bl	800946c <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0002, (const uint8_t *)&FW_TM.content[512], 512);
 80096b8:	4b5b      	ldr	r3, [pc, #364]	; (8009828 <touch_init+0x204>)
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80096c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096c4:	2102      	movs	r1, #2
 80096c6:	2057      	movs	r0, #87	; 0x57
 80096c8:	f7ff fed0 	bl	800946c <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0004, (const uint8_t *)&FW_TM.content[1024], 512);
 80096cc:	4b56      	ldr	r3, [pc, #344]	; (8009828 <touch_init+0x204>)
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80096d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096d8:	2104      	movs	r1, #4
 80096da:	2057      	movs	r0, #87	; 0x57
 80096dc:	f7ff fec6 	bl	800946c <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0006, (const uint8_t *)&FW_TM.content[1536], 308); //send remainder bytes
 80096e0:	4b51      	ldr	r3, [pc, #324]	; (8009828 <touch_init+0x204>)
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 80096e8:	f44f 739a 	mov.w	r3, #308	; 0x134
 80096ec:	2106      	movs	r1, #6
 80096ee:	2057      	movs	r0, #87	; 0x57
 80096f0:	f7ff febc 	bl	800946c <i2c_write>

	//(4) Send byte sequence for DM-select for 2048 bytes
	i2c_write(TOUCH_SA, 0x0002, 0, 0);
 80096f4:	2300      	movs	r3, #0
 80096f6:	2200      	movs	r2, #0
 80096f8:	2102      	movs	r1, #2
 80096fa:	2053      	movs	r0, #83	; 0x53
 80096fc:	f7ff feb6 	bl	800946c <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0, (const uint8_t *)&FW_DM.content[0], 512);
 8009700:	4b4a      	ldr	r3, [pc, #296]	; (800982c <touch_init+0x208>)
 8009702:	689a      	ldr	r2, [r3, #8]
 8009704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009708:	2100      	movs	r1, #0
 800970a:	2057      	movs	r0, #87	; 0x57
 800970c:	f7ff feae 	bl	800946c <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0002, (const uint8_t *)&FW_DM.content[512], 512);
 8009710:	4b46      	ldr	r3, [pc, #280]	; (800982c <touch_init+0x208>)
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8009718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800971c:	2102      	movs	r1, #2
 800971e:	2057      	movs	r0, #87	; 0x57
 8009720:	f7ff fea4 	bl	800946c <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0004, (const uint8_t *)&FW_DM.content[1024], 512);
 8009724:	4b41      	ldr	r3, [pc, #260]	; (800982c <touch_init+0x208>)
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800972c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009730:	2104      	movs	r1, #4
 8009732:	2057      	movs	r0, #87	; 0x57
 8009734:	f7ff fe9a 	bl	800946c <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0006, (const uint8_t *)&FW_DM.content[1536], 512);
 8009738:	4b3c      	ldr	r3, [pc, #240]	; (800982c <touch_init+0x208>)
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 8009740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009744:	2106      	movs	r1, #6
 8009746:	2057      	movs	r0, #87	; 0x57
 8009748:	f7ff fe90 	bl	800946c <i2c_write>

	//Do checksum for PM Trig
	if(touch_crc_checksum(FW_PM.byte_cnt, 0x03)!=FW_PM.crc){
 800974c:	4b35      	ldr	r3, [pc, #212]	; (8009824 <touch_init+0x200>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	b29b      	uxth	r3, r3
 8009752:	2103      	movs	r1, #3
 8009754:	4618      	mov	r0, r3
 8009756:	f7ff ff15 	bl	8009584 <touch_crc_checksum>
 800975a:	4603      	mov	r3, r0
 800975c:	461a      	mov	r2, r3
 800975e:	4b31      	ldr	r3, [pc, #196]	; (8009824 <touch_init+0x200>)
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	429a      	cmp	r2, r3
 8009764:	d004      	beq.n	8009770 <touch_init+0x14c>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8009766:	f240 4194 	movw	r1, #1172	; 0x494
 800976a:	482d      	ldr	r0, [pc, #180]	; (8009820 <touch_init+0x1fc>)
 800976c:	f7f7 fd7b 	bl	8001266 <assert_failed>
#endif
	}
	//Do checksum for TM Trig
	if(touch_crc_checksum(FW_TM.byte_cnt, 0x09)!=FW_TM.crc){
 8009770:	4b2d      	ldr	r3, [pc, #180]	; (8009828 <touch_init+0x204>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	b29b      	uxth	r3, r3
 8009776:	2109      	movs	r1, #9
 8009778:	4618      	mov	r0, r3
 800977a:	f7ff ff03 	bl	8009584 <touch_crc_checksum>
 800977e:	4603      	mov	r3, r0
 8009780:	461a      	mov	r2, r3
 8009782:	4b29      	ldr	r3, [pc, #164]	; (8009828 <touch_init+0x204>)
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	429a      	cmp	r2, r3
 8009788:	d004      	beq.n	8009794 <touch_init+0x170>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 800978a:	f240 419a 	movw	r1, #1178	; 0x49a
 800978e:	4824      	ldr	r0, [pc, #144]	; (8009820 <touch_init+0x1fc>)
 8009790:	f7f7 fd69 	bl	8001266 <assert_failed>
#endif
	}
	//Do checksum for DM Trig
	if(touch_crc_checksum(FW_DM.byte_cnt, 0x05)!=FW_DM.crc){
 8009794:	4b25      	ldr	r3, [pc, #148]	; (800982c <touch_init+0x208>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	b29b      	uxth	r3, r3
 800979a:	2105      	movs	r1, #5
 800979c:	4618      	mov	r0, r3
 800979e:	f7ff fef1 	bl	8009584 <touch_crc_checksum>
 80097a2:	4603      	mov	r3, r0
 80097a4:	461a      	mov	r2, r3
 80097a6:	4b21      	ldr	r3, [pc, #132]	; (800982c <touch_init+0x208>)
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d004      	beq.n	80097b8 <touch_init+0x194>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 80097ae:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
 80097b2:	481b      	ldr	r0, [pc, #108]	; (8009820 <touch_init+0x1fc>)
 80097b4:	f7f7 fd57 	bl	8001266 <assert_failed>
#endif
	}

	//(5) MCU Un-stall(means passing control to MCU)
	i2c_write(TOUCH_SA, 0x0000, 0, 0);
 80097b8:	2300      	movs	r3, #0
 80097ba:	2200      	movs	r2, #0
 80097bc:	2100      	movs	r1, #0
 80097be:	2053      	movs	r0, #83	; 0x53
 80097c0:	f7ff fe54 	bl	800946c <i2c_write>
	uint8_t data[2]={0,0};
 80097c4:	2300      	movs	r3, #0
 80097c6:	703b      	strb	r3, [r7, #0]
 80097c8:	2300      	movs	r3, #0
 80097ca:	707b      	strb	r3, [r7, #1]
	i2c_write(TOUCH_SA_BIOS, 0x8300, (const uint8_t *)&data, 2);
 80097cc:	463a      	mov	r2, r7
 80097ce:	2302      	movs	r3, #2
 80097d0:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80097d4:	2057      	movs	r0, #87	; 0x57
 80097d6:	f7ff fe49 	bl	800946c <i2c_write>
	data[0]=0x03;
 80097da:	2303      	movs	r3, #3
 80097dc:	703b      	strb	r3, [r7, #0]
	i2c_write(TOUCH_SA_BIOS, 0x8000, (const uint8_t *)&data, 2);
 80097de:	463a      	mov	r2, r7
 80097e0:	2302      	movs	r3, #2
 80097e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097e6:	2057      	movs	r0, #87	; 0x57
 80097e8:	f7ff fe40 	bl	800946c <i2c_write>
	data[0]=0x00;
 80097ec:	2300      	movs	r3, #0
 80097ee:	703b      	strb	r3, [r7, #0]
	i2c_write(TOUCH_SA_BIOS, 0x8000, (const uint8_t *)&data, 2);
 80097f0:	463a      	mov	r2, r7
 80097f2:	2302      	movs	r3, #2
 80097f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097f8:	2057      	movs	r0, #87	; 0x57
 80097fa:	f7ff fe37 	bl	800946c <i2c_write>

	//(6) After MCU Un-stall, wait 5ms
	HAL_Delay(5);
 80097fe:	2005      	movs	r0, #5
 8009800:	f7f8 f8ee 	bl	80019e0 <HAL_Delay>

	//(7) Send display command 0xf4, 0x90 for initialization complete
	data[0]=0xf4;
 8009804:	23f4      	movs	r3, #244	; 0xf4
 8009806:	703b      	strb	r3, [r7, #0]
	data[1]=0x90;
 8009808:	2390      	movs	r3, #144	; 0x90
 800980a:	707b      	strb	r3, [r7, #1]
	spi_write_command((const uint8_t*)&data, 2);
 800980c:	463b      	mov	r3, r7
 800980e:	2102      	movs	r1, #2
 8009810:	4618      	mov	r0, r3
 8009812:	f7ff fae5 	bl	8008de0 <spi_write_command>

	//(8) Clear interrupt
	touch_event_clear();
 8009816:	f000 f80b 	bl	8009830 <touch_event_clear>
}
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	0800b248 	.word	0x0800b248
 8009824:	2000000c 	.word	0x2000000c
 8009828:	20000018 	.word	0x20000018
 800982c:	20000024 	.word	0x20000024

08009830 <touch_event_clear>:
 * \b Note:<br>
 * 			There is a typo error on section 3.3.6. <br>
 * 			The correct sequence should be 0x43 0x00 0x00 0x00.<br>
 */
static void touch_event_clear(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
	uint16_t cmd=0; //sending two bytes of 0x00
 8009836:	2300      	movs	r3, #0
 8009838:	80fb      	strh	r3, [r7, #6]

	i2c_write(TOUCH_SA, 0x0043, (const uint8_t *)&cmd, 2);
 800983a:	1dba      	adds	r2, r7, #6
 800983c:	2302      	movs	r3, #2
 800983e:	2143      	movs	r1, #67	; 0x43
 8009840:	2053      	movs	r0, #83	; 0x53
 8009842:	f7ff fe13 	bl	800946c <i2c_write>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009846:	b672      	cpsid	i

	__disable_irq();
	touch_event_flag = false;
 8009848:	4b03      	ldr	r3, [pc, #12]	; (8009858 <touch_event_clear+0x28>)
 800984a:	2200      	movs	r2, #0
 800984c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800984e:	b662      	cpsie	i
	__enable_irq();

}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	200000bc 	.word	0x200000bc

0800985c <touch_event_set>:
 * @brief
 * \b		Description:<br>
 * 			Set IRQ flag in IRQ handler for a high-to-low IRQ pin transition triggered by a touch event
 */
void touch_event_set(void)
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
	touch_event_flag = true;
 8009860:	4b03      	ldr	r3, [pc, #12]	; (8009870 <touch_event_set+0x14>)
 8009862:	2201      	movs	r2, #1
 8009864:	701a      	strb	r2, [r3, #0]
}
 8009866:	bf00      	nop
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	200000bc 	.word	0x200000bc

08009874 <touch_event_get>:
 * 			Get touch event flag<br>
 * @return 	true for a touch event
 * 			false for no touch event
 */
inline static bool touch_event_get(void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0
	return touch_event_flag;
 8009878:	4b03      	ldr	r3, [pc, #12]	; (8009888 <touch_event_get+0x14>)
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	b2db      	uxtb	r3, r3
}
 800987e:	4618      	mov	r0, r3
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	200000bc 	.word	0x200000bc

0800988c <ssd7317_get_gesture>:
 * @brief
 * \b Description:<br>
 * 			Function to get touch gesture.<br>
 * @return finger_t structure with gesture and key number
 */
finger_t ssd7317_get_gesture(void){
 800988c:	b5b0      	push	{r4, r5, r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af04      	add	r7, sp, #16
	finger_t finger = {0, 0, IDLE};
 8009892:	2300      	movs	r3, #0
 8009894:	723b      	strb	r3, [r7, #8]
 8009896:	2300      	movs	r3, #0
 8009898:	727b      	strb	r3, [r7, #9]
 800989a:	230b      	movs	r3, #11
 800989c:	72bb      	strb	r3, [r7, #10]

	if(touch_event_get()){
 800989e:	f7ff ffe9 	bl	8009874 <touch_event_get>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 8096 	beq.w	80099d6 <ssd7317_get_gesture+0x14a>
		uint16_t status;
		/*gesture_upload[0]=Gesture ACT, gesture_upload[1]=Gesture Detail, gesture_upload[2]=KeyNum[6:4]KeyNum[2:0]*/
		uint8_t gesture_upload[6];

		i2c_read(TOUCH_SA, 0x0af0, (uint8_t *)&status, 2);
 80098aa:	1dba      	adds	r2, r7, #6
 80098ac:	2302      	movs	r3, #2
 80098ae:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 80098b2:	2053      	movs	r0, #83	; 0x53
 80098b4:	f7ff fe22 	bl	80094fc <i2c_read>
		/*Lower byte of status is the byte count to read from 0x0af1 register*/
		if((status&0xff)>0){
 80098b8:	88fb      	ldrh	r3, [r7, #6]
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	dd08      	ble.n	80098d2 <ssd7317_get_gesture+0x46>
			i2c_read(TOUCH_SA, 0x0af1, (uint8_t *)&gesture_upload, status&0xff);
 80098c0:	88fb      	ldrh	r3, [r7, #6]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	463a      	mov	r2, r7
 80098c8:	f640 21f1 	movw	r1, #2801	; 0xaf1
 80098cc:	2053      	movs	r0, #83	; 0x53
 80098ce:	f7ff fe15 	bl	80094fc <i2c_read>
		 * SWIPE_DOWN:	f6, 4, 1, 9c, 0, 0
		 * SWIPE_LR: 	f6, 4, 1, b3, 0, 1
		 * SWIPE_RL: 	f6, 4, 2, bb, 0, 1
		 */
		printf("Gesture data read from 0x0AF1 in hex %x, %x, %x, %x, %x, %x \r\n",
				gesture_upload[0], gesture_upload[1], gesture_upload[2], gesture_upload[3], gesture_upload[4], gesture_upload[5]);
 80098d2:	783b      	ldrb	r3, [r7, #0]
		printf("Gesture data read from 0x0AF1 in hex %x, %x, %x, %x, %x, %x \r\n",
 80098d4:	4618      	mov	r0, r3
				gesture_upload[0], gesture_upload[1], gesture_upload[2], gesture_upload[3], gesture_upload[4], gesture_upload[5]);
 80098d6:	787b      	ldrb	r3, [r7, #1]
		printf("Gesture data read from 0x0AF1 in hex %x, %x, %x, %x, %x, %x \r\n",
 80098d8:	461c      	mov	r4, r3
				gesture_upload[0], gesture_upload[1], gesture_upload[2], gesture_upload[3], gesture_upload[4], gesture_upload[5]);
 80098da:	78bb      	ldrb	r3, [r7, #2]
		printf("Gesture data read from 0x0AF1 in hex %x, %x, %x, %x, %x, %x \r\n",
 80098dc:	461d      	mov	r5, r3
				gesture_upload[0], gesture_upload[1], gesture_upload[2], gesture_upload[3], gesture_upload[4], gesture_upload[5]);
 80098de:	78fb      	ldrb	r3, [r7, #3]
 80098e0:	793a      	ldrb	r2, [r7, #4]
 80098e2:	7979      	ldrb	r1, [r7, #5]
		printf("Gesture data read from 0x0AF1 in hex %x, %x, %x, %x, %x, %x \r\n",
 80098e4:	9102      	str	r1, [sp, #8]
 80098e6:	9201      	str	r2, [sp, #4]
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	462b      	mov	r3, r5
 80098ec:	4622      	mov	r2, r4
 80098ee:	4601      	mov	r1, r0
 80098f0:	4845      	ldr	r0, [pc, #276]	; (8009a08 <ssd7317_get_gesture+0x17c>)
 80098f2:	f000 fb6f 	bl	8009fd4 <iprintf>
#endif
		touch_event_clear();
 80098f6:	f7ff ff9b 	bl	8009830 <touch_event_clear>

		switch(gesture_upload[1]){
 80098fa:	787b      	ldrb	r3, [r7, #1]
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d011      	beq.n	8009924 <ssd7317_get_gesture+0x98>
 8009900:	2b04      	cmp	r3, #4
 8009902:	dc04      	bgt.n	800990e <ssd7317_get_gesture+0x82>
 8009904:	2b01      	cmp	r3, #1
 8009906:	d007      	beq.n	8009918 <ssd7317_get_gesture+0x8c>
 8009908:	2b02      	cmp	r3, #2
 800990a:	d008      	beq.n	800991e <ssd7317_get_gesture+0x92>
 800990c:	e063      	b.n	80099d6 <ssd7317_get_gesture+0x14a>
 800990e:	2b40      	cmp	r3, #64	; 0x40
 8009910:	d054      	beq.n	80099bc <ssd7317_get_gesture+0x130>
 8009912:	2bff      	cmp	r3, #255	; 0xff
 8009914:	d05a      	beq.n	80099cc <ssd7317_get_gesture+0x140>
 8009916:	e05e      	b.n	80099d6 <ssd7317_get_gesture+0x14a>
		case 0x01:
			finger.gesture = SINGLE_TAP_ANYKEY;
 8009918:	2300      	movs	r3, #0
 800991a:	72bb      	strb	r3, [r7, #10]
			break;
 800991c:	e05b      	b.n	80099d6 <ssd7317_get_gesture+0x14a>
		case 0x02:
			finger.gesture = LONG_TAP_ANYKEY;
 800991e:	2305      	movs	r3, #5
 8009920:	72bb      	strb	r3, [r7, #10]
			break;
 8009922:	e058      	b.n	80099d6 <ssd7317_get_gesture+0x14a>
		case 0x04:
			if(gesture_upload[2]==1){
 8009924:	78bb      	ldrb	r3, [r7, #2]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d102      	bne.n	8009930 <ssd7317_get_gesture+0xa4>
				finger.gesture = SWIPE_LR;
 800992a:	2306      	movs	r3, #6
 800992c:	72bb      	strb	r3, [r7, #10]
 800992e:	e007      	b.n	8009940 <ssd7317_get_gesture+0xb4>
			}else if(gesture_upload[2]==2){
 8009930:	78bb      	ldrb	r3, [r7, #2]
 8009932:	2b02      	cmp	r3, #2
 8009934:	d102      	bne.n	800993c <ssd7317_get_gesture+0xb0>
				finger.gesture = SWIPE_RL;
 8009936:	2307      	movs	r3, #7
 8009938:	72bb      	strb	r3, [r7, #10]
 800993a:	e001      	b.n	8009940 <ssd7317_get_gesture+0xb4>
			}else{
				finger.gesture = TOUCH_ERROR;
 800993c:	230a      	movs	r3, #10
 800993e:	72bb      	strb	r3, [r7, #10]
			}

			if(finger.gesture!=TOUCH_ERROR){
 8009940:	7abb      	ldrb	r3, [r7, #10]
 8009942:	2b0a      	cmp	r3, #10
 8009944:	d046      	beq.n	80099d4 <ssd7317_get_gesture+0x148>
				finger.tap_down_key = (gesture_upload[3]>>4)&0x07;
 8009946:	78fb      	ldrb	r3, [r7, #3]
 8009948:	091b      	lsrs	r3, r3, #4
 800994a:	b2db      	uxtb	r3, r3
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	b2db      	uxtb	r3, r3
 8009952:	723b      	strb	r3, [r7, #8]
				finger.tap_up_key = gesture_upload[3]&0x07;
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	b2db      	uxtb	r3, r3
 800995c:	727b      	strb	r3, [r7, #9]

				if(finger.tap_up_key==1){
 800995e:	7a7b      	ldrb	r3, [r7, #9]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d102      	bne.n	800996a <ssd7317_get_gesture+0xde>
					finger.tap_up_key = SINGLE_TAP_KEY1;
 8009964:	2301      	movs	r3, #1
 8009966:	727b      	strb	r3, [r7, #9]
 8009968:	e010      	b.n	800998c <ssd7317_get_gesture+0x100>
				}else if (finger.tap_up_key==2){
 800996a:	7a7b      	ldrb	r3, [r7, #9]
 800996c:	2b02      	cmp	r3, #2
 800996e:	d102      	bne.n	8009976 <ssd7317_get_gesture+0xea>
					finger.tap_up_key = SINGLE_TAP_KEY2;
 8009970:	2302      	movs	r3, #2
 8009972:	727b      	strb	r3, [r7, #9]
 8009974:	e00a      	b.n	800998c <ssd7317_get_gesture+0x100>
				}else if (finger.tap_up_key==3){
 8009976:	7a7b      	ldrb	r3, [r7, #9]
 8009978:	2b03      	cmp	r3, #3
 800997a:	d102      	bne.n	8009982 <ssd7317_get_gesture+0xf6>
					finger.tap_up_key = SINGLE_TAP_KEY3;
 800997c:	2303      	movs	r3, #3
 800997e:	727b      	strb	r3, [r7, #9]
 8009980:	e004      	b.n	800998c <ssd7317_get_gesture+0x100>
				}else if (finger.tap_up_key==4){
 8009982:	7a7b      	ldrb	r3, [r7, #9]
 8009984:	2b04      	cmp	r3, #4
 8009986:	d101      	bne.n	800998c <ssd7317_get_gesture+0x100>
					finger.tap_up_key = SINGLE_TAP_KEY4;
 8009988:	2304      	movs	r3, #4
 800998a:	727b      	strb	r3, [r7, #9]
				}

				if(finger.tap_down_key==1){
 800998c:	7a3b      	ldrb	r3, [r7, #8]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d102      	bne.n	8009998 <ssd7317_get_gesture+0x10c>
					finger.tap_down_key = SINGLE_TAP_KEY1;
 8009992:	2301      	movs	r3, #1
 8009994:	723b      	strb	r3, [r7, #8]
					finger.tap_down_key = SINGLE_TAP_KEY3;
				}else if (finger.tap_down_key==4){
					finger.tap_down_key = SINGLE_TAP_KEY4;
				}
			}
			break;
 8009996:	e01d      	b.n	80099d4 <ssd7317_get_gesture+0x148>
				}else if (finger.tap_down_key==2){
 8009998:	7a3b      	ldrb	r3, [r7, #8]
 800999a:	2b02      	cmp	r3, #2
 800999c:	d102      	bne.n	80099a4 <ssd7317_get_gesture+0x118>
					finger.tap_down_key = SINGLE_TAP_KEY2;
 800999e:	2302      	movs	r3, #2
 80099a0:	723b      	strb	r3, [r7, #8]
			break;
 80099a2:	e017      	b.n	80099d4 <ssd7317_get_gesture+0x148>
				}else if (finger.tap_down_key==3){
 80099a4:	7a3b      	ldrb	r3, [r7, #8]
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d102      	bne.n	80099b0 <ssd7317_get_gesture+0x124>
					finger.tap_down_key = SINGLE_TAP_KEY3;
 80099aa:	2303      	movs	r3, #3
 80099ac:	723b      	strb	r3, [r7, #8]
			break;
 80099ae:	e011      	b.n	80099d4 <ssd7317_get_gesture+0x148>
				}else if (finger.tap_down_key==4){
 80099b0:	7a3b      	ldrb	r3, [r7, #8]
 80099b2:	2b04      	cmp	r3, #4
 80099b4:	d10e      	bne.n	80099d4 <ssd7317_get_gesture+0x148>
					finger.tap_down_key = SINGLE_TAP_KEY4;
 80099b6:	2304      	movs	r3, #4
 80099b8:	723b      	strb	r3, [r7, #8]
			break;
 80099ba:	e00b      	b.n	80099d4 <ssd7317_get_gesture+0x148>
		case 0x40:
			if(gesture_upload[2]==1)
 80099bc:	78bb      	ldrb	r3, [r7, #2]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d102      	bne.n	80099c8 <ssd7317_get_gesture+0x13c>
				finger.gesture = LARGE_OBJ_DETECT;
 80099c2:	2308      	movs	r3, #8
 80099c4:	72bb      	strb	r3, [r7, #10]
 80099c6:	e001      	b.n	80099cc <ssd7317_get_gesture+0x140>
			else
				finger.gesture = LARGE_OBJ_RELEASE;
 80099c8:	2309      	movs	r3, #9
 80099ca:	72bb      	strb	r3, [r7, #10]
		case 0xFF:
			finger.gesture = TOUCH_ERROR;
 80099cc:	230a      	movs	r3, #10
 80099ce:	72bb      	strb	r3, [r7, #10]
			break;
 80099d0:	bf00      	nop
 80099d2:	e000      	b.n	80099d6 <ssd7317_get_gesture+0x14a>
			break;
 80099d4:	bf00      	nop
		}
	}		//closing bracket for Touch_EvtFlag_Get()
	return finger;
 80099d6:	f107 030c 	add.w	r3, r7, #12
 80099da:	f107 0208 	add.w	r2, r7, #8
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	4611      	mov	r1, r2
 80099e2:	8019      	strh	r1, [r3, #0]
 80099e4:	3302      	adds	r3, #2
 80099e6:	0c12      	lsrs	r2, r2, #16
 80099e8:	701a      	strb	r2, [r3, #0]
 80099ea:	2300      	movs	r3, #0
 80099ec:	7b3a      	ldrb	r2, [r7, #12]
 80099ee:	f362 0307 	bfi	r3, r2, #0, #8
 80099f2:	7b7a      	ldrb	r2, [r7, #13]
 80099f4:	f362 230f 	bfi	r3, r2, #8, #8
 80099f8:	7bba      	ldrb	r2, [r7, #14]
 80099fa:	f362 4317 	bfi	r3, r2, #16, #8
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bdb0      	pop	{r4, r5, r7, pc}
 8009a06:	bf00      	nop
 8009a08:	0800b28c 	.word	0x0800b28c

08009a0c <ssd7317_put_image>:
 * 				}
 * 			}
 * @endcode
 */
rect_t ssd7317_put_image(uint16_t left, uint16_t top, const tImage* image, bool negative)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	607b      	str	r3, [r7, #4]
 8009a16:	460b      	mov	r3, r1
 8009a18:	817b      	strh	r3, [r7, #10]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	813b      	strh	r3, [r7, #8]
	rect_t area={left,top,(left+image->width-1),(top+image->height-1)};
 8009a1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009a22:	823b      	strh	r3, [r7, #16]
 8009a24:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009a28:	827b      	strh	r3, [r7, #18]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	889a      	ldrh	r2, [r3, #4]
 8009a2e:	897b      	ldrh	r3, [r7, #10]
 8009a30:	4413      	add	r3, r2
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	3b01      	subs	r3, #1
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	b21b      	sxth	r3, r3
 8009a3a:	82bb      	strh	r3, [r7, #20]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	88da      	ldrh	r2, [r3, #6]
 8009a40:	893b      	ldrh	r3, [r7, #8]
 8009a42:	4413      	add	r3, r2
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	3b01      	subs	r3, #1
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	b21b      	sxth	r3, r3
 8009a4c:	82fb      	strh	r3, [r7, #22]

	ssd7317_fill_area(area, image->data, negative);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a56:	f107 0110 	add.w	r1, r7, #16
 8009a5a:	c903      	ldmia	r1, {r0, r1}
 8009a5c:	f7ff f850 	bl	8008b00 <ssd7317_fill_area>

	return area;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	461a      	mov	r2, r3
 8009a64:	f107 0310 	add.w	r3, r7, #16
 8009a68:	cb03      	ldmia	r3!, {r0, r1}
 8009a6a:	6010      	str	r0, [r2, #0]
 8009a6c:	6051      	str	r1, [r2, #4]
}
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <ssd7317_scroll_image>:
 * @param	margin is the top/bottom gap to restrain from scrolling
 * @param 	*image is a pointer to tImage structure.
 * @param	dir is the swipe direction, either SWIPE_UP(SWIPE_RL) or SWIPE_DOWN(SWIPE_LR).
 */
rect_t ssd7317_scroll_image(uint16_t left, uint16_t top, uint16_t margin, const tImage* image, finger_t dir)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b08a      	sub	sp, #40	; 0x28
 8009a7c:	af02      	add	r7, sp, #8
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	4608      	mov	r0, r1
 8009a82:	4611      	mov	r1, r2
 8009a84:	461a      	mov	r2, r3
 8009a86:	4603      	mov	r3, r0
 8009a88:	817b      	strh	r3, [r7, #10]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	813b      	strh	r3, [r7, #8]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	80fb      	strh	r3, [r7, #6]
	rect_t area={left,top,(left+image->width-1),(top+image->height-1)};
 8009a92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009a96:	833b      	strh	r3, [r7, #24]
 8009a98:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009a9c:	837b      	strh	r3, [r7, #26]
 8009a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa0:	889a      	ldrh	r2, [r3, #4]
 8009aa2:	897b      	ldrh	r3, [r7, #10]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	b21b      	sxth	r3, r3
 8009aae:	83bb      	strh	r3, [r7, #28]
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	88da      	ldrh	r2, [r3, #6]
 8009ab4:	893b      	ldrh	r3, [r7, #8]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	3b01      	subs	r3, #1
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	b21b      	sxth	r3, r3
 8009ac0:	83fb      	strh	r3, [r7, #30]

	if((dir.gesture!=SWIPE_DOWN) && (dir.gesture!=SWIPE_UP))
 8009ac2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009ac6:	2b06      	cmp	r3, #6
 8009ac8:	d010      	beq.n	8009aec <ssd7317_scroll_image+0x74>
 8009aca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009ace:	2b07      	cmp	r3, #7
 8009ad0:	d00c      	beq.n	8009aec <ssd7317_scroll_image+0x74>
	{
		assert_failed((uint8_t *)__FILE__, __LINE__);
 8009ad2:	f240 516f 	movw	r1, #1391	; 0x56f
 8009ad6:	4827      	ldr	r0, [pc, #156]	; (8009b74 <ssd7317_scroll_image+0xfc>)
 8009ad8:	f7f7 fbc5 	bl	8001266 <assert_failed>
		return area;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f107 0318 	add.w	r3, r7, #24
 8009ae4:	cb03      	ldmia	r3!, {r0, r1}
 8009ae6:	6010      	str	r0, [r2, #0]
 8009ae8:	6051      	str	r1, [r2, #4]
 8009aea:	e03e      	b.n	8009b6a <ssd7317_scroll_image+0xf2>
	}

	rect_t win;
	win.x1 = area.x1;
 8009aec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009af0:	823b      	strh	r3, [r7, #16]
	win.x2 = area.x2;
 8009af2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009af6:	82bb      	strh	r3, [r7, #20]
	if(dir.gesture==SWIPE_DOWN){
 8009af8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009afc:	2b06      	cmp	r3, #6
 8009afe:	d106      	bne.n	8009b0e <ssd7317_scroll_image+0x96>
		win.y1 = margin;
 8009b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b04:	827b      	strh	r3, [r7, #18]
		win.y2 = area.y2;
 8009b06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009b0a:	82fb      	strh	r3, [r7, #22]
 8009b0c:	e00d      	b.n	8009b2a <ssd7317_scroll_image+0xb2>
	}else{
		//SWIPE_UP
		win.y1 = area.y1;
 8009b0e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009b12:	827b      	strh	r3, [r7, #18]
		win.y2 = OLED_VER_RES-1-min(margin, (OLED_VER_RES-1));
 8009b14:	88fb      	ldrh	r3, [r7, #6]
 8009b16:	217f      	movs	r1, #127	; 0x7f
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7ff f84a 	bl	8008bb2 <min>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	b21b      	sxth	r3, r3
 8009b28:	82fb      	strh	r3, [r7, #22]
	}

	//put image to frame buffer first
	fb_fill_area(area,image->data,0);
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f107 0118 	add.w	r1, r7, #24
 8009b34:	c903      	ldmia	r1, {r0, r1}
 8009b36:	f7ff fa01 	bl	8008f3c <fb_fill_area>

	ssd7317_scroll_area(area, win, dir);
 8009b3a:	466b      	mov	r3, sp
 8009b3c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009b40:	6812      	ldr	r2, [r2, #0]
 8009b42:	4611      	mov	r1, r2
 8009b44:	8019      	strh	r1, [r3, #0]
 8009b46:	3302      	adds	r3, #2
 8009b48:	0c12      	lsrs	r2, r2, #16
 8009b4a:	701a      	strb	r2, [r3, #0]
 8009b4c:	f107 0310 	add.w	r3, r7, #16
 8009b50:	cb0c      	ldmia	r3, {r2, r3}
 8009b52:	f107 0118 	add.w	r1, r7, #24
 8009b56:	c903      	ldmia	r1, {r0, r1}
 8009b58:	f7ff fa68 	bl	800902c <ssd7317_scroll_area>

	return area;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f107 0318 	add.w	r3, r7, #24
 8009b64:	cb03      	ldmia	r3!, {r0, r1}
 8009b66:	6010      	str	r0, [r2, #0]
 8009b68:	6051      	str	r1, [r2, #4]
}
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	3720      	adds	r7, #32
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	0800b248 	.word	0x0800b248

08009b78 <ssd7317_scroll_page>:
/**
 * @brief
 * \b Description:<br>
 */
void   ssd7317_scroll_page(rect_t subpage, uint8_t interval, uint8_t accelerate, finger_t dir)
{
 8009b78:	b590      	push	{r4, r7, lr}
 8009b7a:	b089      	sub	sp, #36	; 0x24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	f107 0408 	add.w	r4, r7, #8
 8009b82:	e884 0003 	stmia.w	r4, {r0, r1}
 8009b86:	4611      	mov	r1, r2
 8009b88:	461a      	mov	r2, r3
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	71fb      	strb	r3, [r7, #7]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	71bb      	strb	r3, [r7, #6]
	if((dir.gesture!=SWIPE_DOWN) && (dir.gesture!=SWIPE_UP))
 8009b92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b96:	2b06      	cmp	r3, #6
 8009b98:	d009      	beq.n	8009bae <ssd7317_scroll_page+0x36>
 8009b9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b9e:	2b07      	cmp	r3, #7
 8009ba0:	d005      	beq.n	8009bae <ssd7317_scroll_page+0x36>
	{
		assert_failed((uint8_t *)__FILE__, __LINE__);
 8009ba2:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 8009ba6:	483e      	ldr	r0, [pc, #248]	; (8009ca0 <ssd7317_scroll_page+0x128>)
 8009ba8:	f7f7 fb5d 	bl	8001266 <assert_failed>
		return;
 8009bac:	e074      	b.n	8009c98 <ssd7317_scroll_page+0x120>
	}

	if((subpage.x1>subpage.x2) || (subpage.y1>subpage.y2))
 8009bae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009bb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	dc05      	bgt.n	8009bc6 <ssd7317_scroll_page+0x4e>
 8009bba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009bbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	dd05      	ble.n	8009bd2 <ssd7317_scroll_page+0x5a>
	{
		assert_failed((uint8_t *)__FILE__, __LINE__);
 8009bc6:	f240 5196 	movw	r1, #1430	; 0x596
 8009bca:	4835      	ldr	r0, [pc, #212]	; (8009ca0 <ssd7317_scroll_page+0x128>)
 8009bcc:	f7f7 fb4b 	bl	8001266 <assert_failed>
		return;
 8009bd0:	e062      	b.n	8009c98 <ssd7317_scroll_page+0x120>
	}

	uint8_t cmd[9]={0};
 8009bd2:	f107 0314 	add.w	r3, r7, #20
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	605a      	str	r2, [r3, #4]
 8009bdc:	721a      	strb	r2, [r3, #8]

	if(dir.gesture==SWIPE_UP){
 8009bde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009be2:	2b07      	cmp	r3, #7
 8009be4:	d10b      	bne.n	8009bfe <ssd7317_scroll_page+0x86>
		(dir.tap_down_key==dir.tap_up_key)?(cmd[0] = 0x2a):(cmd[0] = 0x27);
 8009be6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009bea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d102      	bne.n	8009bf8 <ssd7317_scroll_page+0x80>
 8009bf2:	232a      	movs	r3, #42	; 0x2a
 8009bf4:	753b      	strb	r3, [r7, #20]
 8009bf6:	e00d      	b.n	8009c14 <ssd7317_scroll_page+0x9c>
 8009bf8:	2327      	movs	r3, #39	; 0x27
 8009bfa:	753b      	strb	r3, [r7, #20]
 8009bfc:	e00a      	b.n	8009c14 <ssd7317_scroll_page+0x9c>
	}else{
	 //dir.gesture==SWIPE_DOWN
		(dir.tap_down_key==dir.tap_up_key)?(cmd[0] = 0x29):(cmd[0] = 0x26);
 8009bfe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009c02:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d102      	bne.n	8009c10 <ssd7317_scroll_page+0x98>
 8009c0a:	2329      	movs	r3, #41	; 0x29
 8009c0c:	753b      	strb	r3, [r7, #20]
 8009c0e:	e001      	b.n	8009c14 <ssd7317_scroll_page+0x9c>
 8009c10:	2326      	movs	r3, #38	; 0x26
 8009c12:	753b      	strb	r3, [r7, #20]
	}

	//cmd[1] = 0x00 assuming no diagonal scrolling for command 29/2a

	//start page pixel
	uint16_t page_px = min(OLED_HOR_RES-1,subpage.x1);
 8009c14:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	205f      	movs	r0, #95	; 0x5f
 8009c1e:	f7fe ffc8 	bl	8008bb2 <min>
 8009c22:	4603      	mov	r3, r0
 8009c24:	83fb      	strh	r3, [r7, #30]

	cmd[2] = BUFIDX(page_px,0); //start page address in page number
 8009c26:	8bfb      	ldrh	r3, [r7, #30]
 8009c28:	08db      	lsrs	r3, r3, #3
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	75bb      	strb	r3, [r7, #22]

	cmd[3] = (interval&0x07);	//interval in frame frequency
 8009c30:	79fb      	ldrb	r3, [r7, #7]
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	75fb      	strb	r3, [r7, #23]

	//end page pixel
	page_px = min(OLED_HOR_RES-1,subpage.x2);
 8009c3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	4619      	mov	r1, r3
 8009c42:	205f      	movs	r0, #95	; 0x5f
 8009c44:	f7fe ffb5 	bl	8008bb2 <min>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	83fb      	strh	r3, [r7, #30]
	cmd[4] = BUFIDX(page_px,0);	//end page address in page number
 8009c4c:	8bfb      	ldrh	r3, [r7, #30]
 8009c4e:	08db      	lsrs	r3, r3, #3
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	763b      	strb	r3, [r7, #24]

	if((cmd[0]==0x29) || (cmd[0]==0x2a)){
 8009c56:	7d3b      	ldrb	r3, [r7, #20]
 8009c58:	2b29      	cmp	r3, #41	; 0x29
 8009c5a:	d002      	beq.n	8009c62 <ssd7317_scroll_page+0xea>
 8009c5c:	7d3b      	ldrb	r3, [r7, #20]
 8009c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c60:	d107      	bne.n	8009c72 <ssd7317_scroll_page+0xfa>
		cmd[5] = ((accelerate|0x01)&0x5F); //bound acceleration within 1~95 rows offset
 8009c62:	79bb      	ldrb	r3, [r7, #6]
 8009c64:	f043 0301 	orr.w	r3, r3, #1
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	767b      	strb	r3, [r7, #25]
	}

	cmd[6] = subpage.y1;
 8009c72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	76bb      	strb	r3, [r7, #26]
	cmd[7] = subpage.y2&(OLED_VER_RES-1);
 8009c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	76fb      	strb	r3, [r7, #27]
	cmd[8] = 0x2f; //activate scrolling
 8009c88:	232f      	movs	r3, #47	; 0x2f
 8009c8a:	773b      	strb	r3, [r7, #28]
	spi_write_command((const uint8_t *)&cmd, 9);
 8009c8c:	f107 0314 	add.w	r3, r7, #20
 8009c90:	2109      	movs	r1, #9
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7ff f8a4 	bl	8008de0 <spi_write_command>
}
 8009c98:	3724      	adds	r7, #36	; 0x24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd90      	pop	{r4, r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	0800b248 	.word	0x0800b248

08009ca4 <ssd7317_scroll_brake>:
 * @brief
 * \b Description:<br>
 * 		This function applies brake to continuous page scroll(commands 0x26,27,29,2A) by sending 0x2E command
 */
void   ssd7317_scroll_brake(void)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
	const uint8_t cmd[1]={0x2e};
 8009caa:	232e      	movs	r3, #46	; 0x2e
 8009cac:	713b      	strb	r3, [r7, #4]

	spi_write_command((const uint8_t *)&cmd, 1);
 8009cae:	1d3b      	adds	r3, r7, #4
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff f894 	bl	8008de0 <spi_write_command>
}
 8009cb8:	bf00      	nop
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <ssd7317_put_char>:
/**
 * @brief
 * \b Description:<br>
 */
rect_t ssd7317_put_char(uint16_t left, uint16_t top, const tFont* font, uint16_t ascii_code, bool negative)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08a      	sub	sp, #40	; 0x28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	607b      	str	r3, [r7, #4]
 8009cca:	460b      	mov	r3, r1
 8009ccc:	817b      	strh	r3, [r7, #10]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	813b      	strh	r3, [r7, #8]
	const tChar* pChar = font->chars;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	627b      	str	r3, [r7, #36]	; 0x24

	uint16_t _code = ascii_code-pChar[0].code; //need to offset the first array member
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	847b      	strh	r3, [r7, #34]	; 0x22

	uint16_t height = pChar[_code].image->height;
 8009ce4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cea:	4413      	add	r3, r2
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	88db      	ldrh	r3, [r3, #6]
 8009cf0:	843b      	strh	r3, [r7, #32]
	uint16_t width  = pChar[_code].image->width;
 8009cf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009cf4:	00db      	lsls	r3, r3, #3
 8009cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf8:	4413      	add	r3, r2
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	889b      	ldrh	r3, [r3, #4]
 8009cfe:	83fb      	strh	r3, [r7, #30]

	const uint8_t* pData = pChar[_code].image->data;
 8009d00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d06:	4413      	add	r3, r2
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	61bb      	str	r3, [r7, #24]

	rect_t area = {left, top, (left+width-1), (top+height-1)};
 8009d0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009d12:	823b      	strh	r3, [r7, #16]
 8009d14:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009d18:	827b      	strh	r3, [r7, #18]
 8009d1a:	897a      	ldrh	r2, [r7, #10]
 8009d1c:	8bfb      	ldrh	r3, [r7, #30]
 8009d1e:	4413      	add	r3, r2
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	b21b      	sxth	r3, r3
 8009d28:	82bb      	strh	r3, [r7, #20]
 8009d2a:	893a      	ldrh	r2, [r7, #8]
 8009d2c:	8c3b      	ldrh	r3, [r7, #32]
 8009d2e:	4413      	add	r3, r2
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	3b01      	subs	r3, #1
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	b21b      	sxth	r3, r3
 8009d38:	82fb      	strh	r3, [r7, #22]
	ssd7317_fill_area(area, pData, negative);
 8009d3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009d3e:	69ba      	ldr	r2, [r7, #24]
 8009d40:	f107 0110 	add.w	r1, r7, #16
 8009d44:	c903      	ldmia	r1, {r0, r1}
 8009d46:	f7fe fedb 	bl	8008b00 <ssd7317_fill_area>

	return area;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	f107 0310 	add.w	r3, r7, #16
 8009d52:	cb03      	ldmia	r3!, {r0, r1}
 8009d54:	6010      	str	r0, [r2, #0]
 8009d56:	6051      	str	r1, [r2, #4]
}
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	3728      	adds	r7, #40	; 0x28
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <ssd7317_get_charsize>:
/**
 * @brief
 * \b Description:<br>
 */
void   ssd7317_get_charsize(const tFont* font, uint16_t ascii_code, uint16_t *w, uint16_t *h)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	607a      	str	r2, [r7, #4]
 8009d6a:	603b      	str	r3, [r7, #0]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	817b      	strh	r3, [r7, #10]
	*w=0; *h=0;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	801a      	strh	r2, [r3, #0]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	801a      	strh	r2, [r3, #0]
	const tChar* pChar = font->chars;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	617b      	str	r3, [r7, #20]

	if(pChar!=0){
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d016      	beq.n	8009db6 <ssd7317_get_charsize+0x56>
		uint16_t _code = ascii_code-pChar[0].code; //need to offset the first array member
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	897a      	ldrh	r2, [r7, #10]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	827b      	strh	r3, [r7, #18]
		*w = pChar[_code].image->width;
 8009d94:	8a7b      	ldrh	r3, [r7, #18]
 8009d96:	00db      	lsls	r3, r3, #3
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	889a      	ldrh	r2, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	801a      	strh	r2, [r3, #0]
		*h = pChar[_code].image->height;
 8009da4:	8a7b      	ldrh	r3, [r7, #18]
 8009da6:	00db      	lsls	r3, r3, #3
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	4413      	add	r3, r2
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	88da      	ldrh	r2, [r3, #6]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	801a      	strh	r2, [r3, #0]
	}else{
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
#endif
	}
}
 8009db4:	e004      	b.n	8009dc0 <ssd7317_get_charsize+0x60>
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8009db6:	f240 51ea 	movw	r1, #1514	; 0x5ea
 8009dba:	4803      	ldr	r0, [pc, #12]	; (8009dc8 <ssd7317_get_charsize+0x68>)
 8009dbc:	f7f7 fa53 	bl	8001266 <assert_failed>
}
 8009dc0:	bf00      	nop
 8009dc2:	3718      	adds	r7, #24
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	0800b248 	.word	0x0800b248

08009dcc <ssd7317_put_string>:
/**
 * @brief
 * \b Description:<br>
 */
rect_t ssd7317_put_string(uint16_t left, uint16_t top, const tFont* font, const char *str, bool negative)
{
 8009dcc:	b590      	push	{r4, r7, lr}
 8009dce:	b08b      	sub	sp, #44	; 0x2c
 8009dd0:	af02      	add	r7, sp, #8
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	607b      	str	r3, [r7, #4]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	817b      	strh	r3, [r7, #10]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	813b      	strh	r3, [r7, #8]
	rect_t area = {0,0,0,0};
 8009dde:	f107 0314 	add.w	r3, r7, #20
 8009de2:	2200      	movs	r2, #0
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	605a      	str	r2, [r3, #4]

	if(font==0 || str==0){
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d002      	beq.n	8009df4 <ssd7317_put_string+0x28>
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10c      	bne.n	8009e0e <ssd7317_put_string+0x42>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8009df4:	f240 51f9 	movw	r1, #1529	; 0x5f9
 8009df8:	4829      	ldr	r0, [pc, #164]	; (8009ea0 <ssd7317_put_string+0xd4>)
 8009dfa:	f7f7 fa34 	bl	8001266 <assert_failed>
			return area;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	461a      	mov	r2, r3
 8009e02:	f107 0314 	add.w	r3, r7, #20
 8009e06:	cb03      	ldmia	r3!, {r0, r1}
 8009e08:	6010      	str	r0, [r2, #0]
 8009e0a:	6051      	str	r1, [r2, #4]
 8009e0c:	e044      	b.n	8009e98 <ssd7317_put_string+0xcc>
#endif
	}


	uint16_t _x = left;
 8009e0e:	897b      	ldrh	r3, [r7, #10]
 8009e10:	83fb      	strh	r3, [r7, #30]
	char ch = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	777b      	strb	r3, [r7, #29]

	while(*str != '\0')
 8009e16:	e020      	b.n	8009e5a <ssd7317_put_string+0x8e>
	{
		ch = *str;
 8009e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	777b      	strb	r3, [r7, #29]
		area = ssd7317_put_char(_x, top, font, ch, negative);
 8009e1e:	7f7b      	ldrb	r3, [r7, #29]
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	f107 0014 	add.w	r0, r7, #20
 8009e26:	893c      	ldrh	r4, [r7, #8]
 8009e28:	8bf9      	ldrh	r1, [r7, #30]
 8009e2a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8009e2e:	9201      	str	r2, [sp, #4]
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4622      	mov	r2, r4
 8009e36:	f7ff ff43 	bl	8009cc0 <ssd7317_put_char>
		_x += (area.x2-area.x1+1);
 8009e3a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	8bfb      	ldrh	r3, [r7, #30]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	3301      	adds	r3, #1
 8009e52:	83fb      	strh	r3, [r7, #30]
		str++;
 8009e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e56:	3301      	adds	r3, #1
 8009e58:	633b      	str	r3, [r7, #48]	; 0x30
	while(*str != '\0')
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1da      	bne.n	8009e18 <ssd7317_put_string+0x4c>
	}

	area.x1 = left;
 8009e62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009e66:	82bb      	strh	r3, [r7, #20]
	area.x2 = _x;
 8009e68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009e6c:	833b      	strh	r3, [r7, #24]
	area.y1 = top;
 8009e6e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009e72:	82fb      	strh	r3, [r7, #22]
	area.y2 = top + (font->chars->image->height-1);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	88da      	ldrh	r2, [r3, #6]
 8009e7c:	893b      	ldrh	r3, [r7, #8]
 8009e7e:	4413      	add	r3, r2
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	3b01      	subs	r3, #1
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	b21b      	sxth	r3, r3
 8009e88:	837b      	strh	r3, [r7, #26]

	return area;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	f107 0314 	add.w	r3, r7, #20
 8009e92:	cb03      	ldmia	r3!, {r0, r1}
 8009e94:	6010      	str	r0, [r2, #0]
 8009e96:	6051      	str	r1, [r2, #4]
}
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	3724      	adds	r7, #36	; 0x24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd90      	pop	{r4, r7, pc}
 8009ea0:	0800b248 	.word	0x0800b248

08009ea4 <ssd7317_get_stringsize>:
/**
 * @brief
 * \b Description:<br>
 */
void   ssd7317_get_stringsize(const tFont* font, const char *str, uint16_t *w, uint16_t *h)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
 8009eb0:	603b      	str	r3, [r7, #0]
	if((font==0) || (str==0)){
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <ssd7317_get_stringsize+0x1a>
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d105      	bne.n	8009eca <ssd7317_get_stringsize+0x26>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8009ebe:	f240 611a 	movw	r1, #1562	; 0x61a
 8009ec2:	4812      	ldr	r0, [pc, #72]	; (8009f0c <ssd7317_get_stringsize+0x68>)
 8009ec4:	f7f7 f9cf 	bl	8001266 <assert_failed>
 8009ec8:	e01c      	b.n	8009f04 <ssd7317_get_stringsize+0x60>
			return;
#endif
	}

	uint16_t _w, _h, _x = 0;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	82fb      	strh	r3, [r7, #22]

	while(*str != '\0'){
 8009ece:	e00f      	b.n	8009ef0 <ssd7317_get_stringsize+0x4c>
		ssd7317_get_charsize(font, (const uint16_t)*str++, &_w, &_h);
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	60ba      	str	r2, [r7, #8]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	b299      	uxth	r1, r3
 8009eda:	f107 0312 	add.w	r3, r7, #18
 8009ede:	f107 0214 	add.w	r2, r7, #20
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f7ff ff3c 	bl	8009d60 <ssd7317_get_charsize>
		_x += _w;
 8009ee8:	8aba      	ldrh	r2, [r7, #20]
 8009eea:	8afb      	ldrh	r3, [r7, #22]
 8009eec:	4413      	add	r3, r2
 8009eee:	82fb      	strh	r3, [r7, #22]
	while(*str != '\0'){
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1eb      	bne.n	8009ed0 <ssd7317_get_stringsize+0x2c>
	}

	*w = _x;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	8afa      	ldrh	r2, [r7, #22]
 8009efc:	801a      	strh	r2, [r3, #0]
	*h = _h;
 8009efe:	8a7a      	ldrh	r2, [r7, #18]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	801a      	strh	r2, [r3, #0]
}
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	0800b248 	.word	0x0800b248

08009f10 <HAL_DWT_Delay_Init>:
 * @return Error DWT counter
 * 1: clock cycle counter not started
 * 0: clock cycle counter works
 */

uint32_t HAL_DWT_Delay_Init(void){
 8009f10:	b480      	push	{r7}
 8009f12:	af00      	add	r7, sp, #0
	/* Disable TRC */
	 CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8009f14:	4b14      	ldr	r3, [pc, #80]	; (8009f68 <HAL_DWT_Delay_Init+0x58>)
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	4a13      	ldr	r2, [pc, #76]	; (8009f68 <HAL_DWT_Delay_Init+0x58>)
 8009f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f1e:	60d3      	str	r3, [r2, #12]
	 /* Enable TRC */
	 CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8009f20:	4b11      	ldr	r3, [pc, #68]	; (8009f68 <HAL_DWT_Delay_Init+0x58>)
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	4a10      	ldr	r2, [pc, #64]	; (8009f68 <HAL_DWT_Delay_Init+0x58>)
 8009f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f2a:	60d3      	str	r3, [r2, #12]
	 /* Disable clock cycle counter */
	 DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8009f2c:	4b0f      	ldr	r3, [pc, #60]	; (8009f6c <HAL_DWT_Delay_Init+0x5c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a0e      	ldr	r2, [pc, #56]	; (8009f6c <HAL_DWT_Delay_Init+0x5c>)
 8009f32:	f023 0301 	bic.w	r3, r3, #1
 8009f36:	6013      	str	r3, [r2, #0]
	 /* Enable clock cycle counter */
	 DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8009f38:	4b0c      	ldr	r3, [pc, #48]	; (8009f6c <HAL_DWT_Delay_Init+0x5c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a0b      	ldr	r2, [pc, #44]	; (8009f6c <HAL_DWT_Delay_Init+0x5c>)
 8009f3e:	f043 0301 	orr.w	r3, r3, #1
 8009f42:	6013      	str	r3, [r2, #0]
	 /* Reset the clock cycle counter value */
	 DWT->CYCCNT = 0;
 8009f44:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <HAL_DWT_Delay_Init+0x5c>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	605a      	str	r2, [r3, #4]
	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8009f4a:	bf00      	nop
	__ASM volatile ("NOP");
 8009f4c:	bf00      	nop
	__ASM volatile ("NOP");
 8009f4e:	bf00      	nop
	 /* Check if clock cycle counter has started */
	if(DWT->CYCCNT)
 8009f50:	4b06      	ldr	r3, [pc, #24]	; (8009f6c <HAL_DWT_Delay_Init+0x5c>)
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <HAL_DWT_Delay_Init+0x4c>
	{
	 return 0; /*clock cycle counter started*/
 8009f58:	2300      	movs	r3, #0
 8009f5a:	e000      	b.n	8009f5e <HAL_DWT_Delay_Init+0x4e>
	}
	else
	{
	 return 1; /*clock cycle counter not started*/
 8009f5c:	2301      	movs	r3, #1
	}
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	e000edf0 	.word	0xe000edf0
 8009f6c:	e0001000 	.word	0xe0001000

08009f70 <__errno>:
 8009f70:	4b01      	ldr	r3, [pc, #4]	; (8009f78 <__errno+0x8>)
 8009f72:	6818      	ldr	r0, [r3, #0]
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	20000030 	.word	0x20000030

08009f7c <__libc_init_array>:
 8009f7c:	b570      	push	{r4, r5, r6, lr}
 8009f7e:	4e0d      	ldr	r6, [pc, #52]	; (8009fb4 <__libc_init_array+0x38>)
 8009f80:	4c0d      	ldr	r4, [pc, #52]	; (8009fb8 <__libc_init_array+0x3c>)
 8009f82:	1ba4      	subs	r4, r4, r6
 8009f84:	10a4      	asrs	r4, r4, #2
 8009f86:	2500      	movs	r5, #0
 8009f88:	42a5      	cmp	r5, r4
 8009f8a:	d109      	bne.n	8009fa0 <__libc_init_array+0x24>
 8009f8c:	4e0b      	ldr	r6, [pc, #44]	; (8009fbc <__libc_init_array+0x40>)
 8009f8e:	4c0c      	ldr	r4, [pc, #48]	; (8009fc0 <__libc_init_array+0x44>)
 8009f90:	f000 ffb2 	bl	800aef8 <_init>
 8009f94:	1ba4      	subs	r4, r4, r6
 8009f96:	10a4      	asrs	r4, r4, #2
 8009f98:	2500      	movs	r5, #0
 8009f9a:	42a5      	cmp	r5, r4
 8009f9c:	d105      	bne.n	8009faa <__libc_init_array+0x2e>
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}
 8009fa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009fa4:	4798      	blx	r3
 8009fa6:	3501      	adds	r5, #1
 8009fa8:	e7ee      	b.n	8009f88 <__libc_init_array+0xc>
 8009faa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009fae:	4798      	blx	r3
 8009fb0:	3501      	adds	r5, #1
 8009fb2:	e7f2      	b.n	8009f9a <__libc_init_array+0x1e>
 8009fb4:	08010804 	.word	0x08010804
 8009fb8:	08010804 	.word	0x08010804
 8009fbc:	08010804 	.word	0x08010804
 8009fc0:	08010808 	.word	0x08010808

08009fc4 <memset>:
 8009fc4:	4402      	add	r2, r0
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d100      	bne.n	8009fce <memset+0xa>
 8009fcc:	4770      	bx	lr
 8009fce:	f803 1b01 	strb.w	r1, [r3], #1
 8009fd2:	e7f9      	b.n	8009fc8 <memset+0x4>

08009fd4 <iprintf>:
 8009fd4:	b40f      	push	{r0, r1, r2, r3}
 8009fd6:	4b0a      	ldr	r3, [pc, #40]	; (800a000 <iprintf+0x2c>)
 8009fd8:	b513      	push	{r0, r1, r4, lr}
 8009fda:	681c      	ldr	r4, [r3, #0]
 8009fdc:	b124      	cbz	r4, 8009fe8 <iprintf+0x14>
 8009fde:	69a3      	ldr	r3, [r4, #24]
 8009fe0:	b913      	cbnz	r3, 8009fe8 <iprintf+0x14>
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 fa36 	bl	800a454 <__sinit>
 8009fe8:	ab05      	add	r3, sp, #20
 8009fea:	9a04      	ldr	r2, [sp, #16]
 8009fec:	68a1      	ldr	r1, [r4, #8]
 8009fee:	9301      	str	r3, [sp, #4]
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 fbef 	bl	800a7d4 <_vfiprintf_r>
 8009ff6:	b002      	add	sp, #8
 8009ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ffc:	b004      	add	sp, #16
 8009ffe:	4770      	bx	lr
 800a000:	20000030 	.word	0x20000030

0800a004 <putchar>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4b08      	ldr	r3, [pc, #32]	; (800a028 <putchar+0x24>)
 800a008:	681c      	ldr	r4, [r3, #0]
 800a00a:	4605      	mov	r5, r0
 800a00c:	b124      	cbz	r4, 800a018 <putchar+0x14>
 800a00e:	69a3      	ldr	r3, [r4, #24]
 800a010:	b913      	cbnz	r3, 800a018 <putchar+0x14>
 800a012:	4620      	mov	r0, r4
 800a014:	f000 fa1e 	bl	800a454 <__sinit>
 800a018:	68a2      	ldr	r2, [r4, #8]
 800a01a:	4629      	mov	r1, r5
 800a01c:	4620      	mov	r0, r4
 800a01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a022:	f000 be75 	b.w	800ad10 <_putc_r>
 800a026:	bf00      	nop
 800a028:	20000030 	.word	0x20000030

0800a02c <_puts_r>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	460e      	mov	r6, r1
 800a030:	4605      	mov	r5, r0
 800a032:	b118      	cbz	r0, 800a03c <_puts_r+0x10>
 800a034:	6983      	ldr	r3, [r0, #24]
 800a036:	b90b      	cbnz	r3, 800a03c <_puts_r+0x10>
 800a038:	f000 fa0c 	bl	800a454 <__sinit>
 800a03c:	69ab      	ldr	r3, [r5, #24]
 800a03e:	68ac      	ldr	r4, [r5, #8]
 800a040:	b913      	cbnz	r3, 800a048 <_puts_r+0x1c>
 800a042:	4628      	mov	r0, r5
 800a044:	f000 fa06 	bl	800a454 <__sinit>
 800a048:	4b23      	ldr	r3, [pc, #140]	; (800a0d8 <_puts_r+0xac>)
 800a04a:	429c      	cmp	r4, r3
 800a04c:	d117      	bne.n	800a07e <_puts_r+0x52>
 800a04e:	686c      	ldr	r4, [r5, #4]
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	071b      	lsls	r3, r3, #28
 800a054:	d51d      	bpl.n	800a092 <_puts_r+0x66>
 800a056:	6923      	ldr	r3, [r4, #16]
 800a058:	b1db      	cbz	r3, 800a092 <_puts_r+0x66>
 800a05a:	3e01      	subs	r6, #1
 800a05c:	68a3      	ldr	r3, [r4, #8]
 800a05e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a062:	3b01      	subs	r3, #1
 800a064:	60a3      	str	r3, [r4, #8]
 800a066:	b9e9      	cbnz	r1, 800a0a4 <_puts_r+0x78>
 800a068:	2b00      	cmp	r3, #0
 800a06a:	da2e      	bge.n	800a0ca <_puts_r+0x9e>
 800a06c:	4622      	mov	r2, r4
 800a06e:	210a      	movs	r1, #10
 800a070:	4628      	mov	r0, r5
 800a072:	f000 f83f 	bl	800a0f4 <__swbuf_r>
 800a076:	3001      	adds	r0, #1
 800a078:	d011      	beq.n	800a09e <_puts_r+0x72>
 800a07a:	200a      	movs	r0, #10
 800a07c:	e011      	b.n	800a0a2 <_puts_r+0x76>
 800a07e:	4b17      	ldr	r3, [pc, #92]	; (800a0dc <_puts_r+0xb0>)
 800a080:	429c      	cmp	r4, r3
 800a082:	d101      	bne.n	800a088 <_puts_r+0x5c>
 800a084:	68ac      	ldr	r4, [r5, #8]
 800a086:	e7e3      	b.n	800a050 <_puts_r+0x24>
 800a088:	4b15      	ldr	r3, [pc, #84]	; (800a0e0 <_puts_r+0xb4>)
 800a08a:	429c      	cmp	r4, r3
 800a08c:	bf08      	it	eq
 800a08e:	68ec      	ldreq	r4, [r5, #12]
 800a090:	e7de      	b.n	800a050 <_puts_r+0x24>
 800a092:	4621      	mov	r1, r4
 800a094:	4628      	mov	r0, r5
 800a096:	f000 f87f 	bl	800a198 <__swsetup_r>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d0dd      	beq.n	800a05a <_puts_r+0x2e>
 800a09e:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a2:	bd70      	pop	{r4, r5, r6, pc}
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	da04      	bge.n	800a0b2 <_puts_r+0x86>
 800a0a8:	69a2      	ldr	r2, [r4, #24]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	dc06      	bgt.n	800a0bc <_puts_r+0x90>
 800a0ae:	290a      	cmp	r1, #10
 800a0b0:	d004      	beq.n	800a0bc <_puts_r+0x90>
 800a0b2:	6823      	ldr	r3, [r4, #0]
 800a0b4:	1c5a      	adds	r2, r3, #1
 800a0b6:	6022      	str	r2, [r4, #0]
 800a0b8:	7019      	strb	r1, [r3, #0]
 800a0ba:	e7cf      	b.n	800a05c <_puts_r+0x30>
 800a0bc:	4622      	mov	r2, r4
 800a0be:	4628      	mov	r0, r5
 800a0c0:	f000 f818 	bl	800a0f4 <__swbuf_r>
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d1c9      	bne.n	800a05c <_puts_r+0x30>
 800a0c8:	e7e9      	b.n	800a09e <_puts_r+0x72>
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	200a      	movs	r0, #10
 800a0ce:	1c5a      	adds	r2, r3, #1
 800a0d0:	6022      	str	r2, [r4, #0]
 800a0d2:	7018      	strb	r0, [r3, #0]
 800a0d4:	e7e5      	b.n	800a0a2 <_puts_r+0x76>
 800a0d6:	bf00      	nop
 800a0d8:	08010788 	.word	0x08010788
 800a0dc:	080107a8 	.word	0x080107a8
 800a0e0:	08010768 	.word	0x08010768

0800a0e4 <puts>:
 800a0e4:	4b02      	ldr	r3, [pc, #8]	; (800a0f0 <puts+0xc>)
 800a0e6:	4601      	mov	r1, r0
 800a0e8:	6818      	ldr	r0, [r3, #0]
 800a0ea:	f7ff bf9f 	b.w	800a02c <_puts_r>
 800a0ee:	bf00      	nop
 800a0f0:	20000030 	.word	0x20000030

0800a0f4 <__swbuf_r>:
 800a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f6:	460e      	mov	r6, r1
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	b118      	cbz	r0, 800a106 <__swbuf_r+0x12>
 800a0fe:	6983      	ldr	r3, [r0, #24]
 800a100:	b90b      	cbnz	r3, 800a106 <__swbuf_r+0x12>
 800a102:	f000 f9a7 	bl	800a454 <__sinit>
 800a106:	4b21      	ldr	r3, [pc, #132]	; (800a18c <__swbuf_r+0x98>)
 800a108:	429c      	cmp	r4, r3
 800a10a:	d12a      	bne.n	800a162 <__swbuf_r+0x6e>
 800a10c:	686c      	ldr	r4, [r5, #4]
 800a10e:	69a3      	ldr	r3, [r4, #24]
 800a110:	60a3      	str	r3, [r4, #8]
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	071a      	lsls	r2, r3, #28
 800a116:	d52e      	bpl.n	800a176 <__swbuf_r+0x82>
 800a118:	6923      	ldr	r3, [r4, #16]
 800a11a:	b363      	cbz	r3, 800a176 <__swbuf_r+0x82>
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	6820      	ldr	r0, [r4, #0]
 800a120:	1ac0      	subs	r0, r0, r3
 800a122:	6963      	ldr	r3, [r4, #20]
 800a124:	b2f6      	uxtb	r6, r6
 800a126:	4283      	cmp	r3, r0
 800a128:	4637      	mov	r7, r6
 800a12a:	dc04      	bgt.n	800a136 <__swbuf_r+0x42>
 800a12c:	4621      	mov	r1, r4
 800a12e:	4628      	mov	r0, r5
 800a130:	f000 f926 	bl	800a380 <_fflush_r>
 800a134:	bb28      	cbnz	r0, 800a182 <__swbuf_r+0x8e>
 800a136:	68a3      	ldr	r3, [r4, #8]
 800a138:	3b01      	subs	r3, #1
 800a13a:	60a3      	str	r3, [r4, #8]
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	1c5a      	adds	r2, r3, #1
 800a140:	6022      	str	r2, [r4, #0]
 800a142:	701e      	strb	r6, [r3, #0]
 800a144:	6963      	ldr	r3, [r4, #20]
 800a146:	3001      	adds	r0, #1
 800a148:	4283      	cmp	r3, r0
 800a14a:	d004      	beq.n	800a156 <__swbuf_r+0x62>
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	07db      	lsls	r3, r3, #31
 800a150:	d519      	bpl.n	800a186 <__swbuf_r+0x92>
 800a152:	2e0a      	cmp	r6, #10
 800a154:	d117      	bne.n	800a186 <__swbuf_r+0x92>
 800a156:	4621      	mov	r1, r4
 800a158:	4628      	mov	r0, r5
 800a15a:	f000 f911 	bl	800a380 <_fflush_r>
 800a15e:	b190      	cbz	r0, 800a186 <__swbuf_r+0x92>
 800a160:	e00f      	b.n	800a182 <__swbuf_r+0x8e>
 800a162:	4b0b      	ldr	r3, [pc, #44]	; (800a190 <__swbuf_r+0x9c>)
 800a164:	429c      	cmp	r4, r3
 800a166:	d101      	bne.n	800a16c <__swbuf_r+0x78>
 800a168:	68ac      	ldr	r4, [r5, #8]
 800a16a:	e7d0      	b.n	800a10e <__swbuf_r+0x1a>
 800a16c:	4b09      	ldr	r3, [pc, #36]	; (800a194 <__swbuf_r+0xa0>)
 800a16e:	429c      	cmp	r4, r3
 800a170:	bf08      	it	eq
 800a172:	68ec      	ldreq	r4, [r5, #12]
 800a174:	e7cb      	b.n	800a10e <__swbuf_r+0x1a>
 800a176:	4621      	mov	r1, r4
 800a178:	4628      	mov	r0, r5
 800a17a:	f000 f80d 	bl	800a198 <__swsetup_r>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d0cc      	beq.n	800a11c <__swbuf_r+0x28>
 800a182:	f04f 37ff 	mov.w	r7, #4294967295
 800a186:	4638      	mov	r0, r7
 800a188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a18a:	bf00      	nop
 800a18c:	08010788 	.word	0x08010788
 800a190:	080107a8 	.word	0x080107a8
 800a194:	08010768 	.word	0x08010768

0800a198 <__swsetup_r>:
 800a198:	4b32      	ldr	r3, [pc, #200]	; (800a264 <__swsetup_r+0xcc>)
 800a19a:	b570      	push	{r4, r5, r6, lr}
 800a19c:	681d      	ldr	r5, [r3, #0]
 800a19e:	4606      	mov	r6, r0
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	b125      	cbz	r5, 800a1ae <__swsetup_r+0x16>
 800a1a4:	69ab      	ldr	r3, [r5, #24]
 800a1a6:	b913      	cbnz	r3, 800a1ae <__swsetup_r+0x16>
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f000 f953 	bl	800a454 <__sinit>
 800a1ae:	4b2e      	ldr	r3, [pc, #184]	; (800a268 <__swsetup_r+0xd0>)
 800a1b0:	429c      	cmp	r4, r3
 800a1b2:	d10f      	bne.n	800a1d4 <__swsetup_r+0x3c>
 800a1b4:	686c      	ldr	r4, [r5, #4]
 800a1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	0715      	lsls	r5, r2, #28
 800a1be:	d42c      	bmi.n	800a21a <__swsetup_r+0x82>
 800a1c0:	06d0      	lsls	r0, r2, #27
 800a1c2:	d411      	bmi.n	800a1e8 <__swsetup_r+0x50>
 800a1c4:	2209      	movs	r2, #9
 800a1c6:	6032      	str	r2, [r6, #0]
 800a1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1cc:	81a3      	strh	r3, [r4, #12]
 800a1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d2:	e03e      	b.n	800a252 <__swsetup_r+0xba>
 800a1d4:	4b25      	ldr	r3, [pc, #148]	; (800a26c <__swsetup_r+0xd4>)
 800a1d6:	429c      	cmp	r4, r3
 800a1d8:	d101      	bne.n	800a1de <__swsetup_r+0x46>
 800a1da:	68ac      	ldr	r4, [r5, #8]
 800a1dc:	e7eb      	b.n	800a1b6 <__swsetup_r+0x1e>
 800a1de:	4b24      	ldr	r3, [pc, #144]	; (800a270 <__swsetup_r+0xd8>)
 800a1e0:	429c      	cmp	r4, r3
 800a1e2:	bf08      	it	eq
 800a1e4:	68ec      	ldreq	r4, [r5, #12]
 800a1e6:	e7e6      	b.n	800a1b6 <__swsetup_r+0x1e>
 800a1e8:	0751      	lsls	r1, r2, #29
 800a1ea:	d512      	bpl.n	800a212 <__swsetup_r+0x7a>
 800a1ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1ee:	b141      	cbz	r1, 800a202 <__swsetup_r+0x6a>
 800a1f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1f4:	4299      	cmp	r1, r3
 800a1f6:	d002      	beq.n	800a1fe <__swsetup_r+0x66>
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f000 fa19 	bl	800a630 <_free_r>
 800a1fe:	2300      	movs	r3, #0
 800a200:	6363      	str	r3, [r4, #52]	; 0x34
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	2300      	movs	r3, #0
 800a20c:	6063      	str	r3, [r4, #4]
 800a20e:	6923      	ldr	r3, [r4, #16]
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	89a3      	ldrh	r3, [r4, #12]
 800a214:	f043 0308 	orr.w	r3, r3, #8
 800a218:	81a3      	strh	r3, [r4, #12]
 800a21a:	6923      	ldr	r3, [r4, #16]
 800a21c:	b94b      	cbnz	r3, 800a232 <__swsetup_r+0x9a>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a228:	d003      	beq.n	800a232 <__swsetup_r+0x9a>
 800a22a:	4621      	mov	r1, r4
 800a22c:	4630      	mov	r0, r6
 800a22e:	f000 f9bf 	bl	800a5b0 <__smakebuf_r>
 800a232:	89a2      	ldrh	r2, [r4, #12]
 800a234:	f012 0301 	ands.w	r3, r2, #1
 800a238:	d00c      	beq.n	800a254 <__swsetup_r+0xbc>
 800a23a:	2300      	movs	r3, #0
 800a23c:	60a3      	str	r3, [r4, #8]
 800a23e:	6963      	ldr	r3, [r4, #20]
 800a240:	425b      	negs	r3, r3
 800a242:	61a3      	str	r3, [r4, #24]
 800a244:	6923      	ldr	r3, [r4, #16]
 800a246:	b953      	cbnz	r3, 800a25e <__swsetup_r+0xc6>
 800a248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a250:	d1ba      	bne.n	800a1c8 <__swsetup_r+0x30>
 800a252:	bd70      	pop	{r4, r5, r6, pc}
 800a254:	0792      	lsls	r2, r2, #30
 800a256:	bf58      	it	pl
 800a258:	6963      	ldrpl	r3, [r4, #20]
 800a25a:	60a3      	str	r3, [r4, #8]
 800a25c:	e7f2      	b.n	800a244 <__swsetup_r+0xac>
 800a25e:	2000      	movs	r0, #0
 800a260:	e7f7      	b.n	800a252 <__swsetup_r+0xba>
 800a262:	bf00      	nop
 800a264:	20000030 	.word	0x20000030
 800a268:	08010788 	.word	0x08010788
 800a26c:	080107a8 	.word	0x080107a8
 800a270:	08010768 	.word	0x08010768

0800a274 <__sflush_r>:
 800a274:	898a      	ldrh	r2, [r1, #12]
 800a276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27a:	4605      	mov	r5, r0
 800a27c:	0710      	lsls	r0, r2, #28
 800a27e:	460c      	mov	r4, r1
 800a280:	d458      	bmi.n	800a334 <__sflush_r+0xc0>
 800a282:	684b      	ldr	r3, [r1, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	dc05      	bgt.n	800a294 <__sflush_r+0x20>
 800a288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	dc02      	bgt.n	800a294 <__sflush_r+0x20>
 800a28e:	2000      	movs	r0, #0
 800a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a296:	2e00      	cmp	r6, #0
 800a298:	d0f9      	beq.n	800a28e <__sflush_r+0x1a>
 800a29a:	2300      	movs	r3, #0
 800a29c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2a0:	682f      	ldr	r7, [r5, #0]
 800a2a2:	6a21      	ldr	r1, [r4, #32]
 800a2a4:	602b      	str	r3, [r5, #0]
 800a2a6:	d032      	beq.n	800a30e <__sflush_r+0x9a>
 800a2a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	075a      	lsls	r2, r3, #29
 800a2ae:	d505      	bpl.n	800a2bc <__sflush_r+0x48>
 800a2b0:	6863      	ldr	r3, [r4, #4]
 800a2b2:	1ac0      	subs	r0, r0, r3
 800a2b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2b6:	b10b      	cbz	r3, 800a2bc <__sflush_r+0x48>
 800a2b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2ba:	1ac0      	subs	r0, r0, r3
 800a2bc:	2300      	movs	r3, #0
 800a2be:	4602      	mov	r2, r0
 800a2c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2c2:	6a21      	ldr	r1, [r4, #32]
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	47b0      	blx	r6
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	d106      	bne.n	800a2dc <__sflush_r+0x68>
 800a2ce:	6829      	ldr	r1, [r5, #0]
 800a2d0:	291d      	cmp	r1, #29
 800a2d2:	d848      	bhi.n	800a366 <__sflush_r+0xf2>
 800a2d4:	4a29      	ldr	r2, [pc, #164]	; (800a37c <__sflush_r+0x108>)
 800a2d6:	40ca      	lsrs	r2, r1
 800a2d8:	07d6      	lsls	r6, r2, #31
 800a2da:	d544      	bpl.n	800a366 <__sflush_r+0xf2>
 800a2dc:	2200      	movs	r2, #0
 800a2de:	6062      	str	r2, [r4, #4]
 800a2e0:	04d9      	lsls	r1, r3, #19
 800a2e2:	6922      	ldr	r2, [r4, #16]
 800a2e4:	6022      	str	r2, [r4, #0]
 800a2e6:	d504      	bpl.n	800a2f2 <__sflush_r+0x7e>
 800a2e8:	1c42      	adds	r2, r0, #1
 800a2ea:	d101      	bne.n	800a2f0 <__sflush_r+0x7c>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	b903      	cbnz	r3, 800a2f2 <__sflush_r+0x7e>
 800a2f0:	6560      	str	r0, [r4, #84]	; 0x54
 800a2f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2f4:	602f      	str	r7, [r5, #0]
 800a2f6:	2900      	cmp	r1, #0
 800a2f8:	d0c9      	beq.n	800a28e <__sflush_r+0x1a>
 800a2fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2fe:	4299      	cmp	r1, r3
 800a300:	d002      	beq.n	800a308 <__sflush_r+0x94>
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f994 	bl	800a630 <_free_r>
 800a308:	2000      	movs	r0, #0
 800a30a:	6360      	str	r0, [r4, #52]	; 0x34
 800a30c:	e7c0      	b.n	800a290 <__sflush_r+0x1c>
 800a30e:	2301      	movs	r3, #1
 800a310:	4628      	mov	r0, r5
 800a312:	47b0      	blx	r6
 800a314:	1c41      	adds	r1, r0, #1
 800a316:	d1c8      	bne.n	800a2aa <__sflush_r+0x36>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0c5      	beq.n	800a2aa <__sflush_r+0x36>
 800a31e:	2b1d      	cmp	r3, #29
 800a320:	d001      	beq.n	800a326 <__sflush_r+0xb2>
 800a322:	2b16      	cmp	r3, #22
 800a324:	d101      	bne.n	800a32a <__sflush_r+0xb6>
 800a326:	602f      	str	r7, [r5, #0]
 800a328:	e7b1      	b.n	800a28e <__sflush_r+0x1a>
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a330:	81a3      	strh	r3, [r4, #12]
 800a332:	e7ad      	b.n	800a290 <__sflush_r+0x1c>
 800a334:	690f      	ldr	r7, [r1, #16]
 800a336:	2f00      	cmp	r7, #0
 800a338:	d0a9      	beq.n	800a28e <__sflush_r+0x1a>
 800a33a:	0793      	lsls	r3, r2, #30
 800a33c:	680e      	ldr	r6, [r1, #0]
 800a33e:	bf08      	it	eq
 800a340:	694b      	ldreq	r3, [r1, #20]
 800a342:	600f      	str	r7, [r1, #0]
 800a344:	bf18      	it	ne
 800a346:	2300      	movne	r3, #0
 800a348:	eba6 0807 	sub.w	r8, r6, r7
 800a34c:	608b      	str	r3, [r1, #8]
 800a34e:	f1b8 0f00 	cmp.w	r8, #0
 800a352:	dd9c      	ble.n	800a28e <__sflush_r+0x1a>
 800a354:	4643      	mov	r3, r8
 800a356:	463a      	mov	r2, r7
 800a358:	6a21      	ldr	r1, [r4, #32]
 800a35a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a35c:	4628      	mov	r0, r5
 800a35e:	47b0      	blx	r6
 800a360:	2800      	cmp	r0, #0
 800a362:	dc06      	bgt.n	800a372 <__sflush_r+0xfe>
 800a364:	89a3      	ldrh	r3, [r4, #12]
 800a366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a36a:	81a3      	strh	r3, [r4, #12]
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295
 800a370:	e78e      	b.n	800a290 <__sflush_r+0x1c>
 800a372:	4407      	add	r7, r0
 800a374:	eba8 0800 	sub.w	r8, r8, r0
 800a378:	e7e9      	b.n	800a34e <__sflush_r+0xda>
 800a37a:	bf00      	nop
 800a37c:	20400001 	.word	0x20400001

0800a380 <_fflush_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	690b      	ldr	r3, [r1, #16]
 800a384:	4605      	mov	r5, r0
 800a386:	460c      	mov	r4, r1
 800a388:	b1db      	cbz	r3, 800a3c2 <_fflush_r+0x42>
 800a38a:	b118      	cbz	r0, 800a394 <_fflush_r+0x14>
 800a38c:	6983      	ldr	r3, [r0, #24]
 800a38e:	b90b      	cbnz	r3, 800a394 <_fflush_r+0x14>
 800a390:	f000 f860 	bl	800a454 <__sinit>
 800a394:	4b0c      	ldr	r3, [pc, #48]	; (800a3c8 <_fflush_r+0x48>)
 800a396:	429c      	cmp	r4, r3
 800a398:	d109      	bne.n	800a3ae <_fflush_r+0x2e>
 800a39a:	686c      	ldr	r4, [r5, #4]
 800a39c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3a0:	b17b      	cbz	r3, 800a3c2 <_fflush_r+0x42>
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3aa:	f7ff bf63 	b.w	800a274 <__sflush_r>
 800a3ae:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <_fflush_r+0x4c>)
 800a3b0:	429c      	cmp	r4, r3
 800a3b2:	d101      	bne.n	800a3b8 <_fflush_r+0x38>
 800a3b4:	68ac      	ldr	r4, [r5, #8]
 800a3b6:	e7f1      	b.n	800a39c <_fflush_r+0x1c>
 800a3b8:	4b05      	ldr	r3, [pc, #20]	; (800a3d0 <_fflush_r+0x50>)
 800a3ba:	429c      	cmp	r4, r3
 800a3bc:	bf08      	it	eq
 800a3be:	68ec      	ldreq	r4, [r5, #12]
 800a3c0:	e7ec      	b.n	800a39c <_fflush_r+0x1c>
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	bd38      	pop	{r3, r4, r5, pc}
 800a3c6:	bf00      	nop
 800a3c8:	08010788 	.word	0x08010788
 800a3cc:	080107a8 	.word	0x080107a8
 800a3d0:	08010768 	.word	0x08010768

0800a3d4 <std>:
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	b510      	push	{r4, lr}
 800a3d8:	4604      	mov	r4, r0
 800a3da:	e9c0 3300 	strd	r3, r3, [r0]
 800a3de:	6083      	str	r3, [r0, #8]
 800a3e0:	8181      	strh	r1, [r0, #12]
 800a3e2:	6643      	str	r3, [r0, #100]	; 0x64
 800a3e4:	81c2      	strh	r2, [r0, #14]
 800a3e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3ea:	6183      	str	r3, [r0, #24]
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	2208      	movs	r2, #8
 800a3f0:	305c      	adds	r0, #92	; 0x5c
 800a3f2:	f7ff fde7 	bl	8009fc4 <memset>
 800a3f6:	4b05      	ldr	r3, [pc, #20]	; (800a40c <std+0x38>)
 800a3f8:	6263      	str	r3, [r4, #36]	; 0x24
 800a3fa:	4b05      	ldr	r3, [pc, #20]	; (800a410 <std+0x3c>)
 800a3fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3fe:	4b05      	ldr	r3, [pc, #20]	; (800a414 <std+0x40>)
 800a400:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a402:	4b05      	ldr	r3, [pc, #20]	; (800a418 <std+0x44>)
 800a404:	6224      	str	r4, [r4, #32]
 800a406:	6323      	str	r3, [r4, #48]	; 0x30
 800a408:	bd10      	pop	{r4, pc}
 800a40a:	bf00      	nop
 800a40c:	0800ad9d 	.word	0x0800ad9d
 800a410:	0800adbf 	.word	0x0800adbf
 800a414:	0800adf7 	.word	0x0800adf7
 800a418:	0800ae1b 	.word	0x0800ae1b

0800a41c <_cleanup_r>:
 800a41c:	4901      	ldr	r1, [pc, #4]	; (800a424 <_cleanup_r+0x8>)
 800a41e:	f000 b885 	b.w	800a52c <_fwalk_reent>
 800a422:	bf00      	nop
 800a424:	0800a381 	.word	0x0800a381

0800a428 <__sfmoreglue>:
 800a428:	b570      	push	{r4, r5, r6, lr}
 800a42a:	1e4a      	subs	r2, r1, #1
 800a42c:	2568      	movs	r5, #104	; 0x68
 800a42e:	4355      	muls	r5, r2
 800a430:	460e      	mov	r6, r1
 800a432:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a436:	f000 f949 	bl	800a6cc <_malloc_r>
 800a43a:	4604      	mov	r4, r0
 800a43c:	b140      	cbz	r0, 800a450 <__sfmoreglue+0x28>
 800a43e:	2100      	movs	r1, #0
 800a440:	e9c0 1600 	strd	r1, r6, [r0]
 800a444:	300c      	adds	r0, #12
 800a446:	60a0      	str	r0, [r4, #8]
 800a448:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a44c:	f7ff fdba 	bl	8009fc4 <memset>
 800a450:	4620      	mov	r0, r4
 800a452:	bd70      	pop	{r4, r5, r6, pc}

0800a454 <__sinit>:
 800a454:	6983      	ldr	r3, [r0, #24]
 800a456:	b510      	push	{r4, lr}
 800a458:	4604      	mov	r4, r0
 800a45a:	bb33      	cbnz	r3, 800a4aa <__sinit+0x56>
 800a45c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a460:	6503      	str	r3, [r0, #80]	; 0x50
 800a462:	4b12      	ldr	r3, [pc, #72]	; (800a4ac <__sinit+0x58>)
 800a464:	4a12      	ldr	r2, [pc, #72]	; (800a4b0 <__sinit+0x5c>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6282      	str	r2, [r0, #40]	; 0x28
 800a46a:	4298      	cmp	r0, r3
 800a46c:	bf04      	itt	eq
 800a46e:	2301      	moveq	r3, #1
 800a470:	6183      	streq	r3, [r0, #24]
 800a472:	f000 f81f 	bl	800a4b4 <__sfp>
 800a476:	6060      	str	r0, [r4, #4]
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 f81b 	bl	800a4b4 <__sfp>
 800a47e:	60a0      	str	r0, [r4, #8]
 800a480:	4620      	mov	r0, r4
 800a482:	f000 f817 	bl	800a4b4 <__sfp>
 800a486:	2200      	movs	r2, #0
 800a488:	60e0      	str	r0, [r4, #12]
 800a48a:	2104      	movs	r1, #4
 800a48c:	6860      	ldr	r0, [r4, #4]
 800a48e:	f7ff ffa1 	bl	800a3d4 <std>
 800a492:	2201      	movs	r2, #1
 800a494:	2109      	movs	r1, #9
 800a496:	68a0      	ldr	r0, [r4, #8]
 800a498:	f7ff ff9c 	bl	800a3d4 <std>
 800a49c:	2202      	movs	r2, #2
 800a49e:	2112      	movs	r1, #18
 800a4a0:	68e0      	ldr	r0, [r4, #12]
 800a4a2:	f7ff ff97 	bl	800a3d4 <std>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	61a3      	str	r3, [r4, #24]
 800a4aa:	bd10      	pop	{r4, pc}
 800a4ac:	08010764 	.word	0x08010764
 800a4b0:	0800a41d 	.word	0x0800a41d

0800a4b4 <__sfp>:
 800a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b6:	4b1b      	ldr	r3, [pc, #108]	; (800a524 <__sfp+0x70>)
 800a4b8:	681e      	ldr	r6, [r3, #0]
 800a4ba:	69b3      	ldr	r3, [r6, #24]
 800a4bc:	4607      	mov	r7, r0
 800a4be:	b913      	cbnz	r3, 800a4c6 <__sfp+0x12>
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f7ff ffc7 	bl	800a454 <__sinit>
 800a4c6:	3648      	adds	r6, #72	; 0x48
 800a4c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	d503      	bpl.n	800a4d8 <__sfp+0x24>
 800a4d0:	6833      	ldr	r3, [r6, #0]
 800a4d2:	b133      	cbz	r3, 800a4e2 <__sfp+0x2e>
 800a4d4:	6836      	ldr	r6, [r6, #0]
 800a4d6:	e7f7      	b.n	800a4c8 <__sfp+0x14>
 800a4d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4dc:	b16d      	cbz	r5, 800a4fa <__sfp+0x46>
 800a4de:	3468      	adds	r4, #104	; 0x68
 800a4e0:	e7f4      	b.n	800a4cc <__sfp+0x18>
 800a4e2:	2104      	movs	r1, #4
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	f7ff ff9f 	bl	800a428 <__sfmoreglue>
 800a4ea:	6030      	str	r0, [r6, #0]
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d1f1      	bne.n	800a4d4 <__sfp+0x20>
 800a4f0:	230c      	movs	r3, #12
 800a4f2:	603b      	str	r3, [r7, #0]
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4fa:	4b0b      	ldr	r3, [pc, #44]	; (800a528 <__sfp+0x74>)
 800a4fc:	6665      	str	r5, [r4, #100]	; 0x64
 800a4fe:	e9c4 5500 	strd	r5, r5, [r4]
 800a502:	60a5      	str	r5, [r4, #8]
 800a504:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a508:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a50c:	2208      	movs	r2, #8
 800a50e:	4629      	mov	r1, r5
 800a510:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a514:	f7ff fd56 	bl	8009fc4 <memset>
 800a518:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a51c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a520:	e7e9      	b.n	800a4f6 <__sfp+0x42>
 800a522:	bf00      	nop
 800a524:	08010764 	.word	0x08010764
 800a528:	ffff0001 	.word	0xffff0001

0800a52c <_fwalk_reent>:
 800a52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a530:	4680      	mov	r8, r0
 800a532:	4689      	mov	r9, r1
 800a534:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a538:	2600      	movs	r6, #0
 800a53a:	b914      	cbnz	r4, 800a542 <_fwalk_reent+0x16>
 800a53c:	4630      	mov	r0, r6
 800a53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a542:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a546:	3f01      	subs	r7, #1
 800a548:	d501      	bpl.n	800a54e <_fwalk_reent+0x22>
 800a54a:	6824      	ldr	r4, [r4, #0]
 800a54c:	e7f5      	b.n	800a53a <_fwalk_reent+0xe>
 800a54e:	89ab      	ldrh	r3, [r5, #12]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d907      	bls.n	800a564 <_fwalk_reent+0x38>
 800a554:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a558:	3301      	adds	r3, #1
 800a55a:	d003      	beq.n	800a564 <_fwalk_reent+0x38>
 800a55c:	4629      	mov	r1, r5
 800a55e:	4640      	mov	r0, r8
 800a560:	47c8      	blx	r9
 800a562:	4306      	orrs	r6, r0
 800a564:	3568      	adds	r5, #104	; 0x68
 800a566:	e7ee      	b.n	800a546 <_fwalk_reent+0x1a>

0800a568 <__swhatbuf_r>:
 800a568:	b570      	push	{r4, r5, r6, lr}
 800a56a:	460e      	mov	r6, r1
 800a56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a570:	2900      	cmp	r1, #0
 800a572:	b096      	sub	sp, #88	; 0x58
 800a574:	4614      	mov	r4, r2
 800a576:	461d      	mov	r5, r3
 800a578:	da07      	bge.n	800a58a <__swhatbuf_r+0x22>
 800a57a:	2300      	movs	r3, #0
 800a57c:	602b      	str	r3, [r5, #0]
 800a57e:	89b3      	ldrh	r3, [r6, #12]
 800a580:	061a      	lsls	r2, r3, #24
 800a582:	d410      	bmi.n	800a5a6 <__swhatbuf_r+0x3e>
 800a584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a588:	e00e      	b.n	800a5a8 <__swhatbuf_r+0x40>
 800a58a:	466a      	mov	r2, sp
 800a58c:	f000 fc6c 	bl	800ae68 <_fstat_r>
 800a590:	2800      	cmp	r0, #0
 800a592:	dbf2      	blt.n	800a57a <__swhatbuf_r+0x12>
 800a594:	9a01      	ldr	r2, [sp, #4]
 800a596:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a59a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a59e:	425a      	negs	r2, r3
 800a5a0:	415a      	adcs	r2, r3
 800a5a2:	602a      	str	r2, [r5, #0]
 800a5a4:	e7ee      	b.n	800a584 <__swhatbuf_r+0x1c>
 800a5a6:	2340      	movs	r3, #64	; 0x40
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	b016      	add	sp, #88	; 0x58
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}

0800a5b0 <__smakebuf_r>:
 800a5b0:	898b      	ldrh	r3, [r1, #12]
 800a5b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5b4:	079d      	lsls	r5, r3, #30
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	d507      	bpl.n	800a5cc <__smakebuf_r+0x1c>
 800a5bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	6123      	str	r3, [r4, #16]
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	6163      	str	r3, [r4, #20]
 800a5c8:	b002      	add	sp, #8
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}
 800a5cc:	ab01      	add	r3, sp, #4
 800a5ce:	466a      	mov	r2, sp
 800a5d0:	f7ff ffca 	bl	800a568 <__swhatbuf_r>
 800a5d4:	9900      	ldr	r1, [sp, #0]
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	4630      	mov	r0, r6
 800a5da:	f000 f877 	bl	800a6cc <_malloc_r>
 800a5de:	b948      	cbnz	r0, 800a5f4 <__smakebuf_r+0x44>
 800a5e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5e4:	059a      	lsls	r2, r3, #22
 800a5e6:	d4ef      	bmi.n	800a5c8 <__smakebuf_r+0x18>
 800a5e8:	f023 0303 	bic.w	r3, r3, #3
 800a5ec:	f043 0302 	orr.w	r3, r3, #2
 800a5f0:	81a3      	strh	r3, [r4, #12]
 800a5f2:	e7e3      	b.n	800a5bc <__smakebuf_r+0xc>
 800a5f4:	4b0d      	ldr	r3, [pc, #52]	; (800a62c <__smakebuf_r+0x7c>)
 800a5f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5f8:	89a3      	ldrh	r3, [r4, #12]
 800a5fa:	6020      	str	r0, [r4, #0]
 800a5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a600:	81a3      	strh	r3, [r4, #12]
 800a602:	9b00      	ldr	r3, [sp, #0]
 800a604:	6163      	str	r3, [r4, #20]
 800a606:	9b01      	ldr	r3, [sp, #4]
 800a608:	6120      	str	r0, [r4, #16]
 800a60a:	b15b      	cbz	r3, 800a624 <__smakebuf_r+0x74>
 800a60c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a610:	4630      	mov	r0, r6
 800a612:	f000 fc3b 	bl	800ae8c <_isatty_r>
 800a616:	b128      	cbz	r0, 800a624 <__smakebuf_r+0x74>
 800a618:	89a3      	ldrh	r3, [r4, #12]
 800a61a:	f023 0303 	bic.w	r3, r3, #3
 800a61e:	f043 0301 	orr.w	r3, r3, #1
 800a622:	81a3      	strh	r3, [r4, #12]
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	431d      	orrs	r5, r3
 800a628:	81a5      	strh	r5, [r4, #12]
 800a62a:	e7cd      	b.n	800a5c8 <__smakebuf_r+0x18>
 800a62c:	0800a41d 	.word	0x0800a41d

0800a630 <_free_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4605      	mov	r5, r0
 800a634:	2900      	cmp	r1, #0
 800a636:	d045      	beq.n	800a6c4 <_free_r+0x94>
 800a638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a63c:	1f0c      	subs	r4, r1, #4
 800a63e:	2b00      	cmp	r3, #0
 800a640:	bfb8      	it	lt
 800a642:	18e4      	addlt	r4, r4, r3
 800a644:	f000 fc44 	bl	800aed0 <__malloc_lock>
 800a648:	4a1f      	ldr	r2, [pc, #124]	; (800a6c8 <_free_r+0x98>)
 800a64a:	6813      	ldr	r3, [r2, #0]
 800a64c:	4610      	mov	r0, r2
 800a64e:	b933      	cbnz	r3, 800a65e <_free_r+0x2e>
 800a650:	6063      	str	r3, [r4, #4]
 800a652:	6014      	str	r4, [r2, #0]
 800a654:	4628      	mov	r0, r5
 800a656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a65a:	f000 bc3a 	b.w	800aed2 <__malloc_unlock>
 800a65e:	42a3      	cmp	r3, r4
 800a660:	d90c      	bls.n	800a67c <_free_r+0x4c>
 800a662:	6821      	ldr	r1, [r4, #0]
 800a664:	1862      	adds	r2, r4, r1
 800a666:	4293      	cmp	r3, r2
 800a668:	bf04      	itt	eq
 800a66a:	681a      	ldreq	r2, [r3, #0]
 800a66c:	685b      	ldreq	r3, [r3, #4]
 800a66e:	6063      	str	r3, [r4, #4]
 800a670:	bf04      	itt	eq
 800a672:	1852      	addeq	r2, r2, r1
 800a674:	6022      	streq	r2, [r4, #0]
 800a676:	6004      	str	r4, [r0, #0]
 800a678:	e7ec      	b.n	800a654 <_free_r+0x24>
 800a67a:	4613      	mov	r3, r2
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	b10a      	cbz	r2, 800a684 <_free_r+0x54>
 800a680:	42a2      	cmp	r2, r4
 800a682:	d9fa      	bls.n	800a67a <_free_r+0x4a>
 800a684:	6819      	ldr	r1, [r3, #0]
 800a686:	1858      	adds	r0, r3, r1
 800a688:	42a0      	cmp	r0, r4
 800a68a:	d10b      	bne.n	800a6a4 <_free_r+0x74>
 800a68c:	6820      	ldr	r0, [r4, #0]
 800a68e:	4401      	add	r1, r0
 800a690:	1858      	adds	r0, r3, r1
 800a692:	4282      	cmp	r2, r0
 800a694:	6019      	str	r1, [r3, #0]
 800a696:	d1dd      	bne.n	800a654 <_free_r+0x24>
 800a698:	6810      	ldr	r0, [r2, #0]
 800a69a:	6852      	ldr	r2, [r2, #4]
 800a69c:	605a      	str	r2, [r3, #4]
 800a69e:	4401      	add	r1, r0
 800a6a0:	6019      	str	r1, [r3, #0]
 800a6a2:	e7d7      	b.n	800a654 <_free_r+0x24>
 800a6a4:	d902      	bls.n	800a6ac <_free_r+0x7c>
 800a6a6:	230c      	movs	r3, #12
 800a6a8:	602b      	str	r3, [r5, #0]
 800a6aa:	e7d3      	b.n	800a654 <_free_r+0x24>
 800a6ac:	6820      	ldr	r0, [r4, #0]
 800a6ae:	1821      	adds	r1, r4, r0
 800a6b0:	428a      	cmp	r2, r1
 800a6b2:	bf04      	itt	eq
 800a6b4:	6811      	ldreq	r1, [r2, #0]
 800a6b6:	6852      	ldreq	r2, [r2, #4]
 800a6b8:	6062      	str	r2, [r4, #4]
 800a6ba:	bf04      	itt	eq
 800a6bc:	1809      	addeq	r1, r1, r0
 800a6be:	6021      	streq	r1, [r4, #0]
 800a6c0:	605c      	str	r4, [r3, #4]
 800a6c2:	e7c7      	b.n	800a654 <_free_r+0x24>
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000178 	.word	0x20000178

0800a6cc <_malloc_r>:
 800a6cc:	b570      	push	{r4, r5, r6, lr}
 800a6ce:	1ccd      	adds	r5, r1, #3
 800a6d0:	f025 0503 	bic.w	r5, r5, #3
 800a6d4:	3508      	adds	r5, #8
 800a6d6:	2d0c      	cmp	r5, #12
 800a6d8:	bf38      	it	cc
 800a6da:	250c      	movcc	r5, #12
 800a6dc:	2d00      	cmp	r5, #0
 800a6de:	4606      	mov	r6, r0
 800a6e0:	db01      	blt.n	800a6e6 <_malloc_r+0x1a>
 800a6e2:	42a9      	cmp	r1, r5
 800a6e4:	d903      	bls.n	800a6ee <_malloc_r+0x22>
 800a6e6:	230c      	movs	r3, #12
 800a6e8:	6033      	str	r3, [r6, #0]
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	bd70      	pop	{r4, r5, r6, pc}
 800a6ee:	f000 fbef 	bl	800aed0 <__malloc_lock>
 800a6f2:	4a21      	ldr	r2, [pc, #132]	; (800a778 <_malloc_r+0xac>)
 800a6f4:	6814      	ldr	r4, [r2, #0]
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	b991      	cbnz	r1, 800a720 <_malloc_r+0x54>
 800a6fa:	4c20      	ldr	r4, [pc, #128]	; (800a77c <_malloc_r+0xb0>)
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	b91b      	cbnz	r3, 800a708 <_malloc_r+0x3c>
 800a700:	4630      	mov	r0, r6
 800a702:	f000 fb3b 	bl	800ad7c <_sbrk_r>
 800a706:	6020      	str	r0, [r4, #0]
 800a708:	4629      	mov	r1, r5
 800a70a:	4630      	mov	r0, r6
 800a70c:	f000 fb36 	bl	800ad7c <_sbrk_r>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d124      	bne.n	800a75e <_malloc_r+0x92>
 800a714:	230c      	movs	r3, #12
 800a716:	6033      	str	r3, [r6, #0]
 800a718:	4630      	mov	r0, r6
 800a71a:	f000 fbda 	bl	800aed2 <__malloc_unlock>
 800a71e:	e7e4      	b.n	800a6ea <_malloc_r+0x1e>
 800a720:	680b      	ldr	r3, [r1, #0]
 800a722:	1b5b      	subs	r3, r3, r5
 800a724:	d418      	bmi.n	800a758 <_malloc_r+0x8c>
 800a726:	2b0b      	cmp	r3, #11
 800a728:	d90f      	bls.n	800a74a <_malloc_r+0x7e>
 800a72a:	600b      	str	r3, [r1, #0]
 800a72c:	50cd      	str	r5, [r1, r3]
 800a72e:	18cc      	adds	r4, r1, r3
 800a730:	4630      	mov	r0, r6
 800a732:	f000 fbce 	bl	800aed2 <__malloc_unlock>
 800a736:	f104 000b 	add.w	r0, r4, #11
 800a73a:	1d23      	adds	r3, r4, #4
 800a73c:	f020 0007 	bic.w	r0, r0, #7
 800a740:	1ac3      	subs	r3, r0, r3
 800a742:	d0d3      	beq.n	800a6ec <_malloc_r+0x20>
 800a744:	425a      	negs	r2, r3
 800a746:	50e2      	str	r2, [r4, r3]
 800a748:	e7d0      	b.n	800a6ec <_malloc_r+0x20>
 800a74a:	428c      	cmp	r4, r1
 800a74c:	684b      	ldr	r3, [r1, #4]
 800a74e:	bf16      	itet	ne
 800a750:	6063      	strne	r3, [r4, #4]
 800a752:	6013      	streq	r3, [r2, #0]
 800a754:	460c      	movne	r4, r1
 800a756:	e7eb      	b.n	800a730 <_malloc_r+0x64>
 800a758:	460c      	mov	r4, r1
 800a75a:	6849      	ldr	r1, [r1, #4]
 800a75c:	e7cc      	b.n	800a6f8 <_malloc_r+0x2c>
 800a75e:	1cc4      	adds	r4, r0, #3
 800a760:	f024 0403 	bic.w	r4, r4, #3
 800a764:	42a0      	cmp	r0, r4
 800a766:	d005      	beq.n	800a774 <_malloc_r+0xa8>
 800a768:	1a21      	subs	r1, r4, r0
 800a76a:	4630      	mov	r0, r6
 800a76c:	f000 fb06 	bl	800ad7c <_sbrk_r>
 800a770:	3001      	adds	r0, #1
 800a772:	d0cf      	beq.n	800a714 <_malloc_r+0x48>
 800a774:	6025      	str	r5, [r4, #0]
 800a776:	e7db      	b.n	800a730 <_malloc_r+0x64>
 800a778:	20000178 	.word	0x20000178
 800a77c:	2000017c 	.word	0x2000017c

0800a780 <__sfputc_r>:
 800a780:	6893      	ldr	r3, [r2, #8]
 800a782:	3b01      	subs	r3, #1
 800a784:	2b00      	cmp	r3, #0
 800a786:	b410      	push	{r4}
 800a788:	6093      	str	r3, [r2, #8]
 800a78a:	da08      	bge.n	800a79e <__sfputc_r+0x1e>
 800a78c:	6994      	ldr	r4, [r2, #24]
 800a78e:	42a3      	cmp	r3, r4
 800a790:	db01      	blt.n	800a796 <__sfputc_r+0x16>
 800a792:	290a      	cmp	r1, #10
 800a794:	d103      	bne.n	800a79e <__sfputc_r+0x1e>
 800a796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a79a:	f7ff bcab 	b.w	800a0f4 <__swbuf_r>
 800a79e:	6813      	ldr	r3, [r2, #0]
 800a7a0:	1c58      	adds	r0, r3, #1
 800a7a2:	6010      	str	r0, [r2, #0]
 800a7a4:	7019      	strb	r1, [r3, #0]
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <__sfputs_r>:
 800a7ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	460f      	mov	r7, r1
 800a7b4:	4614      	mov	r4, r2
 800a7b6:	18d5      	adds	r5, r2, r3
 800a7b8:	42ac      	cmp	r4, r5
 800a7ba:	d101      	bne.n	800a7c0 <__sfputs_r+0x12>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e007      	b.n	800a7d0 <__sfputs_r+0x22>
 800a7c0:	463a      	mov	r2, r7
 800a7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f7ff ffda 	bl	800a780 <__sfputc_r>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d1f3      	bne.n	800a7b8 <__sfputs_r+0xa>
 800a7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7d4 <_vfiprintf_r>:
 800a7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d8:	460c      	mov	r4, r1
 800a7da:	b09d      	sub	sp, #116	; 0x74
 800a7dc:	4617      	mov	r7, r2
 800a7de:	461d      	mov	r5, r3
 800a7e0:	4606      	mov	r6, r0
 800a7e2:	b118      	cbz	r0, 800a7ec <_vfiprintf_r+0x18>
 800a7e4:	6983      	ldr	r3, [r0, #24]
 800a7e6:	b90b      	cbnz	r3, 800a7ec <_vfiprintf_r+0x18>
 800a7e8:	f7ff fe34 	bl	800a454 <__sinit>
 800a7ec:	4b7c      	ldr	r3, [pc, #496]	; (800a9e0 <_vfiprintf_r+0x20c>)
 800a7ee:	429c      	cmp	r4, r3
 800a7f0:	d158      	bne.n	800a8a4 <_vfiprintf_r+0xd0>
 800a7f2:	6874      	ldr	r4, [r6, #4]
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	0718      	lsls	r0, r3, #28
 800a7f8:	d55e      	bpl.n	800a8b8 <_vfiprintf_r+0xe4>
 800a7fa:	6923      	ldr	r3, [r4, #16]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d05b      	beq.n	800a8b8 <_vfiprintf_r+0xe4>
 800a800:	2300      	movs	r3, #0
 800a802:	9309      	str	r3, [sp, #36]	; 0x24
 800a804:	2320      	movs	r3, #32
 800a806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a80a:	2330      	movs	r3, #48	; 0x30
 800a80c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a810:	9503      	str	r5, [sp, #12]
 800a812:	f04f 0b01 	mov.w	fp, #1
 800a816:	46b8      	mov	r8, r7
 800a818:	4645      	mov	r5, r8
 800a81a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a81e:	b10b      	cbz	r3, 800a824 <_vfiprintf_r+0x50>
 800a820:	2b25      	cmp	r3, #37	; 0x25
 800a822:	d154      	bne.n	800a8ce <_vfiprintf_r+0xfa>
 800a824:	ebb8 0a07 	subs.w	sl, r8, r7
 800a828:	d00b      	beq.n	800a842 <_vfiprintf_r+0x6e>
 800a82a:	4653      	mov	r3, sl
 800a82c:	463a      	mov	r2, r7
 800a82e:	4621      	mov	r1, r4
 800a830:	4630      	mov	r0, r6
 800a832:	f7ff ffbc 	bl	800a7ae <__sfputs_r>
 800a836:	3001      	adds	r0, #1
 800a838:	f000 80c2 	beq.w	800a9c0 <_vfiprintf_r+0x1ec>
 800a83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a83e:	4453      	add	r3, sl
 800a840:	9309      	str	r3, [sp, #36]	; 0x24
 800a842:	f898 3000 	ldrb.w	r3, [r8]
 800a846:	2b00      	cmp	r3, #0
 800a848:	f000 80ba 	beq.w	800a9c0 <_vfiprintf_r+0x1ec>
 800a84c:	2300      	movs	r3, #0
 800a84e:	f04f 32ff 	mov.w	r2, #4294967295
 800a852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a856:	9304      	str	r3, [sp, #16]
 800a858:	9307      	str	r3, [sp, #28]
 800a85a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a85e:	931a      	str	r3, [sp, #104]	; 0x68
 800a860:	46a8      	mov	r8, r5
 800a862:	2205      	movs	r2, #5
 800a864:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a868:	485e      	ldr	r0, [pc, #376]	; (800a9e4 <_vfiprintf_r+0x210>)
 800a86a:	f7f5 fcb1 	bl	80001d0 <memchr>
 800a86e:	9b04      	ldr	r3, [sp, #16]
 800a870:	bb78      	cbnz	r0, 800a8d2 <_vfiprintf_r+0xfe>
 800a872:	06d9      	lsls	r1, r3, #27
 800a874:	bf44      	itt	mi
 800a876:	2220      	movmi	r2, #32
 800a878:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a87c:	071a      	lsls	r2, r3, #28
 800a87e:	bf44      	itt	mi
 800a880:	222b      	movmi	r2, #43	; 0x2b
 800a882:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a886:	782a      	ldrb	r2, [r5, #0]
 800a888:	2a2a      	cmp	r2, #42	; 0x2a
 800a88a:	d02a      	beq.n	800a8e2 <_vfiprintf_r+0x10e>
 800a88c:	9a07      	ldr	r2, [sp, #28]
 800a88e:	46a8      	mov	r8, r5
 800a890:	2000      	movs	r0, #0
 800a892:	250a      	movs	r5, #10
 800a894:	4641      	mov	r1, r8
 800a896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a89a:	3b30      	subs	r3, #48	; 0x30
 800a89c:	2b09      	cmp	r3, #9
 800a89e:	d969      	bls.n	800a974 <_vfiprintf_r+0x1a0>
 800a8a0:	b360      	cbz	r0, 800a8fc <_vfiprintf_r+0x128>
 800a8a2:	e024      	b.n	800a8ee <_vfiprintf_r+0x11a>
 800a8a4:	4b50      	ldr	r3, [pc, #320]	; (800a9e8 <_vfiprintf_r+0x214>)
 800a8a6:	429c      	cmp	r4, r3
 800a8a8:	d101      	bne.n	800a8ae <_vfiprintf_r+0xda>
 800a8aa:	68b4      	ldr	r4, [r6, #8]
 800a8ac:	e7a2      	b.n	800a7f4 <_vfiprintf_r+0x20>
 800a8ae:	4b4f      	ldr	r3, [pc, #316]	; (800a9ec <_vfiprintf_r+0x218>)
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	bf08      	it	eq
 800a8b4:	68f4      	ldreq	r4, [r6, #12]
 800a8b6:	e79d      	b.n	800a7f4 <_vfiprintf_r+0x20>
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7ff fc6c 	bl	800a198 <__swsetup_r>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d09d      	beq.n	800a800 <_vfiprintf_r+0x2c>
 800a8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c8:	b01d      	add	sp, #116	; 0x74
 800a8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ce:	46a8      	mov	r8, r5
 800a8d0:	e7a2      	b.n	800a818 <_vfiprintf_r+0x44>
 800a8d2:	4a44      	ldr	r2, [pc, #272]	; (800a9e4 <_vfiprintf_r+0x210>)
 800a8d4:	1a80      	subs	r0, r0, r2
 800a8d6:	fa0b f000 	lsl.w	r0, fp, r0
 800a8da:	4318      	orrs	r0, r3
 800a8dc:	9004      	str	r0, [sp, #16]
 800a8de:	4645      	mov	r5, r8
 800a8e0:	e7be      	b.n	800a860 <_vfiprintf_r+0x8c>
 800a8e2:	9a03      	ldr	r2, [sp, #12]
 800a8e4:	1d11      	adds	r1, r2, #4
 800a8e6:	6812      	ldr	r2, [r2, #0]
 800a8e8:	9103      	str	r1, [sp, #12]
 800a8ea:	2a00      	cmp	r2, #0
 800a8ec:	db01      	blt.n	800a8f2 <_vfiprintf_r+0x11e>
 800a8ee:	9207      	str	r2, [sp, #28]
 800a8f0:	e004      	b.n	800a8fc <_vfiprintf_r+0x128>
 800a8f2:	4252      	negs	r2, r2
 800a8f4:	f043 0302 	orr.w	r3, r3, #2
 800a8f8:	9207      	str	r2, [sp, #28]
 800a8fa:	9304      	str	r3, [sp, #16]
 800a8fc:	f898 3000 	ldrb.w	r3, [r8]
 800a900:	2b2e      	cmp	r3, #46	; 0x2e
 800a902:	d10e      	bne.n	800a922 <_vfiprintf_r+0x14e>
 800a904:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a908:	2b2a      	cmp	r3, #42	; 0x2a
 800a90a:	d138      	bne.n	800a97e <_vfiprintf_r+0x1aa>
 800a90c:	9b03      	ldr	r3, [sp, #12]
 800a90e:	1d1a      	adds	r2, r3, #4
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	9203      	str	r2, [sp, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	bfb8      	it	lt
 800a918:	f04f 33ff 	movlt.w	r3, #4294967295
 800a91c:	f108 0802 	add.w	r8, r8, #2
 800a920:	9305      	str	r3, [sp, #20]
 800a922:	4d33      	ldr	r5, [pc, #204]	; (800a9f0 <_vfiprintf_r+0x21c>)
 800a924:	f898 1000 	ldrb.w	r1, [r8]
 800a928:	2203      	movs	r2, #3
 800a92a:	4628      	mov	r0, r5
 800a92c:	f7f5 fc50 	bl	80001d0 <memchr>
 800a930:	b140      	cbz	r0, 800a944 <_vfiprintf_r+0x170>
 800a932:	2340      	movs	r3, #64	; 0x40
 800a934:	1b40      	subs	r0, r0, r5
 800a936:	fa03 f000 	lsl.w	r0, r3, r0
 800a93a:	9b04      	ldr	r3, [sp, #16]
 800a93c:	4303      	orrs	r3, r0
 800a93e:	f108 0801 	add.w	r8, r8, #1
 800a942:	9304      	str	r3, [sp, #16]
 800a944:	f898 1000 	ldrb.w	r1, [r8]
 800a948:	482a      	ldr	r0, [pc, #168]	; (800a9f4 <_vfiprintf_r+0x220>)
 800a94a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a94e:	2206      	movs	r2, #6
 800a950:	f108 0701 	add.w	r7, r8, #1
 800a954:	f7f5 fc3c 	bl	80001d0 <memchr>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d037      	beq.n	800a9cc <_vfiprintf_r+0x1f8>
 800a95c:	4b26      	ldr	r3, [pc, #152]	; (800a9f8 <_vfiprintf_r+0x224>)
 800a95e:	bb1b      	cbnz	r3, 800a9a8 <_vfiprintf_r+0x1d4>
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	3307      	adds	r3, #7
 800a964:	f023 0307 	bic.w	r3, r3, #7
 800a968:	3308      	adds	r3, #8
 800a96a:	9303      	str	r3, [sp, #12]
 800a96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96e:	444b      	add	r3, r9
 800a970:	9309      	str	r3, [sp, #36]	; 0x24
 800a972:	e750      	b.n	800a816 <_vfiprintf_r+0x42>
 800a974:	fb05 3202 	mla	r2, r5, r2, r3
 800a978:	2001      	movs	r0, #1
 800a97a:	4688      	mov	r8, r1
 800a97c:	e78a      	b.n	800a894 <_vfiprintf_r+0xc0>
 800a97e:	2300      	movs	r3, #0
 800a980:	f108 0801 	add.w	r8, r8, #1
 800a984:	9305      	str	r3, [sp, #20]
 800a986:	4619      	mov	r1, r3
 800a988:	250a      	movs	r5, #10
 800a98a:	4640      	mov	r0, r8
 800a98c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a990:	3a30      	subs	r2, #48	; 0x30
 800a992:	2a09      	cmp	r2, #9
 800a994:	d903      	bls.n	800a99e <_vfiprintf_r+0x1ca>
 800a996:	2b00      	cmp	r3, #0
 800a998:	d0c3      	beq.n	800a922 <_vfiprintf_r+0x14e>
 800a99a:	9105      	str	r1, [sp, #20]
 800a99c:	e7c1      	b.n	800a922 <_vfiprintf_r+0x14e>
 800a99e:	fb05 2101 	mla	r1, r5, r1, r2
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	4680      	mov	r8, r0
 800a9a6:	e7f0      	b.n	800a98a <_vfiprintf_r+0x1b6>
 800a9a8:	ab03      	add	r3, sp, #12
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	4b13      	ldr	r3, [pc, #76]	; (800a9fc <_vfiprintf_r+0x228>)
 800a9b0:	a904      	add	r1, sp, #16
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	f3af 8000 	nop.w
 800a9b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a9bc:	4681      	mov	r9, r0
 800a9be:	d1d5      	bne.n	800a96c <_vfiprintf_r+0x198>
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	065b      	lsls	r3, r3, #25
 800a9c4:	f53f af7e 	bmi.w	800a8c4 <_vfiprintf_r+0xf0>
 800a9c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9ca:	e77d      	b.n	800a8c8 <_vfiprintf_r+0xf4>
 800a9cc:	ab03      	add	r3, sp, #12
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	4b0a      	ldr	r3, [pc, #40]	; (800a9fc <_vfiprintf_r+0x228>)
 800a9d4:	a904      	add	r1, sp, #16
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f000 f888 	bl	800aaec <_printf_i>
 800a9dc:	e7ec      	b.n	800a9b8 <_vfiprintf_r+0x1e4>
 800a9de:	bf00      	nop
 800a9e0:	08010788 	.word	0x08010788
 800a9e4:	080107c8 	.word	0x080107c8
 800a9e8:	080107a8 	.word	0x080107a8
 800a9ec:	08010768 	.word	0x08010768
 800a9f0:	080107ce 	.word	0x080107ce
 800a9f4:	080107d2 	.word	0x080107d2
 800a9f8:	00000000 	.word	0x00000000
 800a9fc:	0800a7af 	.word	0x0800a7af

0800aa00 <_printf_common>:
 800aa00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa04:	4691      	mov	r9, r2
 800aa06:	461f      	mov	r7, r3
 800aa08:	688a      	ldr	r2, [r1, #8]
 800aa0a:	690b      	ldr	r3, [r1, #16]
 800aa0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa10:	4293      	cmp	r3, r2
 800aa12:	bfb8      	it	lt
 800aa14:	4613      	movlt	r3, r2
 800aa16:	f8c9 3000 	str.w	r3, [r9]
 800aa1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa1e:	4606      	mov	r6, r0
 800aa20:	460c      	mov	r4, r1
 800aa22:	b112      	cbz	r2, 800aa2a <_printf_common+0x2a>
 800aa24:	3301      	adds	r3, #1
 800aa26:	f8c9 3000 	str.w	r3, [r9]
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	0699      	lsls	r1, r3, #26
 800aa2e:	bf42      	ittt	mi
 800aa30:	f8d9 3000 	ldrmi.w	r3, [r9]
 800aa34:	3302      	addmi	r3, #2
 800aa36:	f8c9 3000 	strmi.w	r3, [r9]
 800aa3a:	6825      	ldr	r5, [r4, #0]
 800aa3c:	f015 0506 	ands.w	r5, r5, #6
 800aa40:	d107      	bne.n	800aa52 <_printf_common+0x52>
 800aa42:	f104 0a19 	add.w	sl, r4, #25
 800aa46:	68e3      	ldr	r3, [r4, #12]
 800aa48:	f8d9 2000 	ldr.w	r2, [r9]
 800aa4c:	1a9b      	subs	r3, r3, r2
 800aa4e:	42ab      	cmp	r3, r5
 800aa50:	dc28      	bgt.n	800aaa4 <_printf_common+0xa4>
 800aa52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aa56:	6822      	ldr	r2, [r4, #0]
 800aa58:	3300      	adds	r3, #0
 800aa5a:	bf18      	it	ne
 800aa5c:	2301      	movne	r3, #1
 800aa5e:	0692      	lsls	r2, r2, #26
 800aa60:	d42d      	bmi.n	800aabe <_printf_common+0xbe>
 800aa62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa66:	4639      	mov	r1, r7
 800aa68:	4630      	mov	r0, r6
 800aa6a:	47c0      	blx	r8
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d020      	beq.n	800aab2 <_printf_common+0xb2>
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	68e5      	ldr	r5, [r4, #12]
 800aa74:	f8d9 2000 	ldr.w	r2, [r9]
 800aa78:	f003 0306 	and.w	r3, r3, #6
 800aa7c:	2b04      	cmp	r3, #4
 800aa7e:	bf08      	it	eq
 800aa80:	1aad      	subeq	r5, r5, r2
 800aa82:	68a3      	ldr	r3, [r4, #8]
 800aa84:	6922      	ldr	r2, [r4, #16]
 800aa86:	bf0c      	ite	eq
 800aa88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa8c:	2500      	movne	r5, #0
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	bfc4      	itt	gt
 800aa92:	1a9b      	subgt	r3, r3, r2
 800aa94:	18ed      	addgt	r5, r5, r3
 800aa96:	f04f 0900 	mov.w	r9, #0
 800aa9a:	341a      	adds	r4, #26
 800aa9c:	454d      	cmp	r5, r9
 800aa9e:	d11a      	bne.n	800aad6 <_printf_common+0xd6>
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	e008      	b.n	800aab6 <_printf_common+0xb6>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	4652      	mov	r2, sl
 800aaa8:	4639      	mov	r1, r7
 800aaaa:	4630      	mov	r0, r6
 800aaac:	47c0      	blx	r8
 800aaae:	3001      	adds	r0, #1
 800aab0:	d103      	bne.n	800aaba <_printf_common+0xba>
 800aab2:	f04f 30ff 	mov.w	r0, #4294967295
 800aab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaba:	3501      	adds	r5, #1
 800aabc:	e7c3      	b.n	800aa46 <_printf_common+0x46>
 800aabe:	18e1      	adds	r1, r4, r3
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	2030      	movs	r0, #48	; 0x30
 800aac4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aac8:	4422      	add	r2, r4
 800aaca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aace:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aad2:	3302      	adds	r3, #2
 800aad4:	e7c5      	b.n	800aa62 <_printf_common+0x62>
 800aad6:	2301      	movs	r3, #1
 800aad8:	4622      	mov	r2, r4
 800aada:	4639      	mov	r1, r7
 800aadc:	4630      	mov	r0, r6
 800aade:	47c0      	blx	r8
 800aae0:	3001      	adds	r0, #1
 800aae2:	d0e6      	beq.n	800aab2 <_printf_common+0xb2>
 800aae4:	f109 0901 	add.w	r9, r9, #1
 800aae8:	e7d8      	b.n	800aa9c <_printf_common+0x9c>
	...

0800aaec <_printf_i>:
 800aaec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aaf0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	7e09      	ldrb	r1, [r1, #24]
 800aaf8:	b085      	sub	sp, #20
 800aafa:	296e      	cmp	r1, #110	; 0x6e
 800aafc:	4617      	mov	r7, r2
 800aafe:	4606      	mov	r6, r0
 800ab00:	4698      	mov	r8, r3
 800ab02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab04:	f000 80b3 	beq.w	800ac6e <_printf_i+0x182>
 800ab08:	d822      	bhi.n	800ab50 <_printf_i+0x64>
 800ab0a:	2963      	cmp	r1, #99	; 0x63
 800ab0c:	d036      	beq.n	800ab7c <_printf_i+0x90>
 800ab0e:	d80a      	bhi.n	800ab26 <_printf_i+0x3a>
 800ab10:	2900      	cmp	r1, #0
 800ab12:	f000 80b9 	beq.w	800ac88 <_printf_i+0x19c>
 800ab16:	2958      	cmp	r1, #88	; 0x58
 800ab18:	f000 8083 	beq.w	800ac22 <_printf_i+0x136>
 800ab1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ab24:	e032      	b.n	800ab8c <_printf_i+0xa0>
 800ab26:	2964      	cmp	r1, #100	; 0x64
 800ab28:	d001      	beq.n	800ab2e <_printf_i+0x42>
 800ab2a:	2969      	cmp	r1, #105	; 0x69
 800ab2c:	d1f6      	bne.n	800ab1c <_printf_i+0x30>
 800ab2e:	6820      	ldr	r0, [r4, #0]
 800ab30:	6813      	ldr	r3, [r2, #0]
 800ab32:	0605      	lsls	r5, r0, #24
 800ab34:	f103 0104 	add.w	r1, r3, #4
 800ab38:	d52a      	bpl.n	800ab90 <_printf_i+0xa4>
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6011      	str	r1, [r2, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	da03      	bge.n	800ab4a <_printf_i+0x5e>
 800ab42:	222d      	movs	r2, #45	; 0x2d
 800ab44:	425b      	negs	r3, r3
 800ab46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ab4a:	486f      	ldr	r0, [pc, #444]	; (800ad08 <_printf_i+0x21c>)
 800ab4c:	220a      	movs	r2, #10
 800ab4e:	e039      	b.n	800abc4 <_printf_i+0xd8>
 800ab50:	2973      	cmp	r1, #115	; 0x73
 800ab52:	f000 809d 	beq.w	800ac90 <_printf_i+0x1a4>
 800ab56:	d808      	bhi.n	800ab6a <_printf_i+0x7e>
 800ab58:	296f      	cmp	r1, #111	; 0x6f
 800ab5a:	d020      	beq.n	800ab9e <_printf_i+0xb2>
 800ab5c:	2970      	cmp	r1, #112	; 0x70
 800ab5e:	d1dd      	bne.n	800ab1c <_printf_i+0x30>
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	f043 0320 	orr.w	r3, r3, #32
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	e003      	b.n	800ab72 <_printf_i+0x86>
 800ab6a:	2975      	cmp	r1, #117	; 0x75
 800ab6c:	d017      	beq.n	800ab9e <_printf_i+0xb2>
 800ab6e:	2978      	cmp	r1, #120	; 0x78
 800ab70:	d1d4      	bne.n	800ab1c <_printf_i+0x30>
 800ab72:	2378      	movs	r3, #120	; 0x78
 800ab74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab78:	4864      	ldr	r0, [pc, #400]	; (800ad0c <_printf_i+0x220>)
 800ab7a:	e055      	b.n	800ac28 <_printf_i+0x13c>
 800ab7c:	6813      	ldr	r3, [r2, #0]
 800ab7e:	1d19      	adds	r1, r3, #4
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6011      	str	r1, [r2, #0]
 800ab84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e08c      	b.n	800acaa <_printf_i+0x1be>
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6011      	str	r1, [r2, #0]
 800ab94:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab98:	bf18      	it	ne
 800ab9a:	b21b      	sxthne	r3, r3
 800ab9c:	e7cf      	b.n	800ab3e <_printf_i+0x52>
 800ab9e:	6813      	ldr	r3, [r2, #0]
 800aba0:	6825      	ldr	r5, [r4, #0]
 800aba2:	1d18      	adds	r0, r3, #4
 800aba4:	6010      	str	r0, [r2, #0]
 800aba6:	0628      	lsls	r0, r5, #24
 800aba8:	d501      	bpl.n	800abae <_printf_i+0xc2>
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	e002      	b.n	800abb4 <_printf_i+0xc8>
 800abae:	0668      	lsls	r0, r5, #25
 800abb0:	d5fb      	bpl.n	800abaa <_printf_i+0xbe>
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	4854      	ldr	r0, [pc, #336]	; (800ad08 <_printf_i+0x21c>)
 800abb6:	296f      	cmp	r1, #111	; 0x6f
 800abb8:	bf14      	ite	ne
 800abba:	220a      	movne	r2, #10
 800abbc:	2208      	moveq	r2, #8
 800abbe:	2100      	movs	r1, #0
 800abc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abc4:	6865      	ldr	r5, [r4, #4]
 800abc6:	60a5      	str	r5, [r4, #8]
 800abc8:	2d00      	cmp	r5, #0
 800abca:	f2c0 8095 	blt.w	800acf8 <_printf_i+0x20c>
 800abce:	6821      	ldr	r1, [r4, #0]
 800abd0:	f021 0104 	bic.w	r1, r1, #4
 800abd4:	6021      	str	r1, [r4, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d13d      	bne.n	800ac56 <_printf_i+0x16a>
 800abda:	2d00      	cmp	r5, #0
 800abdc:	f040 808e 	bne.w	800acfc <_printf_i+0x210>
 800abe0:	4665      	mov	r5, ip
 800abe2:	2a08      	cmp	r2, #8
 800abe4:	d10b      	bne.n	800abfe <_printf_i+0x112>
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	07db      	lsls	r3, r3, #31
 800abea:	d508      	bpl.n	800abfe <_printf_i+0x112>
 800abec:	6923      	ldr	r3, [r4, #16]
 800abee:	6862      	ldr	r2, [r4, #4]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	bfde      	ittt	le
 800abf4:	2330      	movle	r3, #48	; 0x30
 800abf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800abfe:	ebac 0305 	sub.w	r3, ip, r5
 800ac02:	6123      	str	r3, [r4, #16]
 800ac04:	f8cd 8000 	str.w	r8, [sp]
 800ac08:	463b      	mov	r3, r7
 800ac0a:	aa03      	add	r2, sp, #12
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f7ff fef6 	bl	800aa00 <_printf_common>
 800ac14:	3001      	adds	r0, #1
 800ac16:	d14d      	bne.n	800acb4 <_printf_i+0x1c8>
 800ac18:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1c:	b005      	add	sp, #20
 800ac1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac22:	4839      	ldr	r0, [pc, #228]	; (800ad08 <_printf_i+0x21c>)
 800ac24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ac28:	6813      	ldr	r3, [r2, #0]
 800ac2a:	6821      	ldr	r1, [r4, #0]
 800ac2c:	1d1d      	adds	r5, r3, #4
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6015      	str	r5, [r2, #0]
 800ac32:	060a      	lsls	r2, r1, #24
 800ac34:	d50b      	bpl.n	800ac4e <_printf_i+0x162>
 800ac36:	07ca      	lsls	r2, r1, #31
 800ac38:	bf44      	itt	mi
 800ac3a:	f041 0120 	orrmi.w	r1, r1, #32
 800ac3e:	6021      	strmi	r1, [r4, #0]
 800ac40:	b91b      	cbnz	r3, 800ac4a <_printf_i+0x15e>
 800ac42:	6822      	ldr	r2, [r4, #0]
 800ac44:	f022 0220 	bic.w	r2, r2, #32
 800ac48:	6022      	str	r2, [r4, #0]
 800ac4a:	2210      	movs	r2, #16
 800ac4c:	e7b7      	b.n	800abbe <_printf_i+0xd2>
 800ac4e:	064d      	lsls	r5, r1, #25
 800ac50:	bf48      	it	mi
 800ac52:	b29b      	uxthmi	r3, r3
 800ac54:	e7ef      	b.n	800ac36 <_printf_i+0x14a>
 800ac56:	4665      	mov	r5, ip
 800ac58:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac5c:	fb02 3311 	mls	r3, r2, r1, r3
 800ac60:	5cc3      	ldrb	r3, [r0, r3]
 800ac62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ac66:	460b      	mov	r3, r1
 800ac68:	2900      	cmp	r1, #0
 800ac6a:	d1f5      	bne.n	800ac58 <_printf_i+0x16c>
 800ac6c:	e7b9      	b.n	800abe2 <_printf_i+0xf6>
 800ac6e:	6813      	ldr	r3, [r2, #0]
 800ac70:	6825      	ldr	r5, [r4, #0]
 800ac72:	6961      	ldr	r1, [r4, #20]
 800ac74:	1d18      	adds	r0, r3, #4
 800ac76:	6010      	str	r0, [r2, #0]
 800ac78:	0628      	lsls	r0, r5, #24
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	d501      	bpl.n	800ac82 <_printf_i+0x196>
 800ac7e:	6019      	str	r1, [r3, #0]
 800ac80:	e002      	b.n	800ac88 <_printf_i+0x19c>
 800ac82:	066a      	lsls	r2, r5, #25
 800ac84:	d5fb      	bpl.n	800ac7e <_printf_i+0x192>
 800ac86:	8019      	strh	r1, [r3, #0]
 800ac88:	2300      	movs	r3, #0
 800ac8a:	6123      	str	r3, [r4, #16]
 800ac8c:	4665      	mov	r5, ip
 800ac8e:	e7b9      	b.n	800ac04 <_printf_i+0x118>
 800ac90:	6813      	ldr	r3, [r2, #0]
 800ac92:	1d19      	adds	r1, r3, #4
 800ac94:	6011      	str	r1, [r2, #0]
 800ac96:	681d      	ldr	r5, [r3, #0]
 800ac98:	6862      	ldr	r2, [r4, #4]
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	f7f5 fa97 	bl	80001d0 <memchr>
 800aca2:	b108      	cbz	r0, 800aca8 <_printf_i+0x1bc>
 800aca4:	1b40      	subs	r0, r0, r5
 800aca6:	6060      	str	r0, [r4, #4]
 800aca8:	6863      	ldr	r3, [r4, #4]
 800acaa:	6123      	str	r3, [r4, #16]
 800acac:	2300      	movs	r3, #0
 800acae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acb2:	e7a7      	b.n	800ac04 <_printf_i+0x118>
 800acb4:	6923      	ldr	r3, [r4, #16]
 800acb6:	462a      	mov	r2, r5
 800acb8:	4639      	mov	r1, r7
 800acba:	4630      	mov	r0, r6
 800acbc:	47c0      	blx	r8
 800acbe:	3001      	adds	r0, #1
 800acc0:	d0aa      	beq.n	800ac18 <_printf_i+0x12c>
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	079b      	lsls	r3, r3, #30
 800acc6:	d413      	bmi.n	800acf0 <_printf_i+0x204>
 800acc8:	68e0      	ldr	r0, [r4, #12]
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	4298      	cmp	r0, r3
 800acce:	bfb8      	it	lt
 800acd0:	4618      	movlt	r0, r3
 800acd2:	e7a3      	b.n	800ac1c <_printf_i+0x130>
 800acd4:	2301      	movs	r3, #1
 800acd6:	464a      	mov	r2, r9
 800acd8:	4639      	mov	r1, r7
 800acda:	4630      	mov	r0, r6
 800acdc:	47c0      	blx	r8
 800acde:	3001      	adds	r0, #1
 800ace0:	d09a      	beq.n	800ac18 <_printf_i+0x12c>
 800ace2:	3501      	adds	r5, #1
 800ace4:	68e3      	ldr	r3, [r4, #12]
 800ace6:	9a03      	ldr	r2, [sp, #12]
 800ace8:	1a9b      	subs	r3, r3, r2
 800acea:	42ab      	cmp	r3, r5
 800acec:	dcf2      	bgt.n	800acd4 <_printf_i+0x1e8>
 800acee:	e7eb      	b.n	800acc8 <_printf_i+0x1dc>
 800acf0:	2500      	movs	r5, #0
 800acf2:	f104 0919 	add.w	r9, r4, #25
 800acf6:	e7f5      	b.n	800ace4 <_printf_i+0x1f8>
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1ac      	bne.n	800ac56 <_printf_i+0x16a>
 800acfc:	7803      	ldrb	r3, [r0, #0]
 800acfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad06:	e76c      	b.n	800abe2 <_printf_i+0xf6>
 800ad08:	080107d9 	.word	0x080107d9
 800ad0c:	080107ea 	.word	0x080107ea

0800ad10 <_putc_r>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	460d      	mov	r5, r1
 800ad14:	4614      	mov	r4, r2
 800ad16:	4606      	mov	r6, r0
 800ad18:	b118      	cbz	r0, 800ad22 <_putc_r+0x12>
 800ad1a:	6983      	ldr	r3, [r0, #24]
 800ad1c:	b90b      	cbnz	r3, 800ad22 <_putc_r+0x12>
 800ad1e:	f7ff fb99 	bl	800a454 <__sinit>
 800ad22:	4b13      	ldr	r3, [pc, #76]	; (800ad70 <_putc_r+0x60>)
 800ad24:	429c      	cmp	r4, r3
 800ad26:	d112      	bne.n	800ad4e <_putc_r+0x3e>
 800ad28:	6874      	ldr	r4, [r6, #4]
 800ad2a:	68a3      	ldr	r3, [r4, #8]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	60a3      	str	r3, [r4, #8]
 800ad32:	da16      	bge.n	800ad62 <_putc_r+0x52>
 800ad34:	69a2      	ldr	r2, [r4, #24]
 800ad36:	4293      	cmp	r3, r2
 800ad38:	db02      	blt.n	800ad40 <_putc_r+0x30>
 800ad3a:	b2eb      	uxtb	r3, r5
 800ad3c:	2b0a      	cmp	r3, #10
 800ad3e:	d110      	bne.n	800ad62 <_putc_r+0x52>
 800ad40:	4622      	mov	r2, r4
 800ad42:	4629      	mov	r1, r5
 800ad44:	4630      	mov	r0, r6
 800ad46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad4a:	f7ff b9d3 	b.w	800a0f4 <__swbuf_r>
 800ad4e:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <_putc_r+0x64>)
 800ad50:	429c      	cmp	r4, r3
 800ad52:	d101      	bne.n	800ad58 <_putc_r+0x48>
 800ad54:	68b4      	ldr	r4, [r6, #8]
 800ad56:	e7e8      	b.n	800ad2a <_putc_r+0x1a>
 800ad58:	4b07      	ldr	r3, [pc, #28]	; (800ad78 <_putc_r+0x68>)
 800ad5a:	429c      	cmp	r4, r3
 800ad5c:	bf08      	it	eq
 800ad5e:	68f4      	ldreq	r4, [r6, #12]
 800ad60:	e7e3      	b.n	800ad2a <_putc_r+0x1a>
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	1c5a      	adds	r2, r3, #1
 800ad66:	6022      	str	r2, [r4, #0]
 800ad68:	701d      	strb	r5, [r3, #0]
 800ad6a:	b2e8      	uxtb	r0, r5
 800ad6c:	bd70      	pop	{r4, r5, r6, pc}
 800ad6e:	bf00      	nop
 800ad70:	08010788 	.word	0x08010788
 800ad74:	080107a8 	.word	0x080107a8
 800ad78:	08010768 	.word	0x08010768

0800ad7c <_sbrk_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4c06      	ldr	r4, [pc, #24]	; (800ad98 <_sbrk_r+0x1c>)
 800ad80:	2300      	movs	r3, #0
 800ad82:	4605      	mov	r5, r0
 800ad84:	4608      	mov	r0, r1
 800ad86:	6023      	str	r3, [r4, #0]
 800ad88:	f7f6 fd20 	bl	80017cc <_sbrk>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	d102      	bne.n	800ad96 <_sbrk_r+0x1a>
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	b103      	cbz	r3, 800ad96 <_sbrk_r+0x1a>
 800ad94:	602b      	str	r3, [r5, #0]
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	20000a94 	.word	0x20000a94

0800ad9c <__sread>:
 800ad9c:	b510      	push	{r4, lr}
 800ad9e:	460c      	mov	r4, r1
 800ada0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada4:	f000 f896 	bl	800aed4 <_read_r>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	bfab      	itete	ge
 800adac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adae:	89a3      	ldrhlt	r3, [r4, #12]
 800adb0:	181b      	addge	r3, r3, r0
 800adb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adb6:	bfac      	ite	ge
 800adb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800adba:	81a3      	strhlt	r3, [r4, #12]
 800adbc:	bd10      	pop	{r4, pc}

0800adbe <__swrite>:
 800adbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc2:	461f      	mov	r7, r3
 800adc4:	898b      	ldrh	r3, [r1, #12]
 800adc6:	05db      	lsls	r3, r3, #23
 800adc8:	4605      	mov	r5, r0
 800adca:	460c      	mov	r4, r1
 800adcc:	4616      	mov	r6, r2
 800adce:	d505      	bpl.n	800addc <__swrite+0x1e>
 800add0:	2302      	movs	r3, #2
 800add2:	2200      	movs	r2, #0
 800add4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add8:	f000 f868 	bl	800aeac <_lseek_r>
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ade2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	4632      	mov	r2, r6
 800adea:	463b      	mov	r3, r7
 800adec:	4628      	mov	r0, r5
 800adee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adf2:	f000 b817 	b.w	800ae24 <_write_r>

0800adf6 <__sseek>:
 800adf6:	b510      	push	{r4, lr}
 800adf8:	460c      	mov	r4, r1
 800adfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adfe:	f000 f855 	bl	800aeac <_lseek_r>
 800ae02:	1c43      	adds	r3, r0, #1
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	bf15      	itete	ne
 800ae08:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae12:	81a3      	strheq	r3, [r4, #12]
 800ae14:	bf18      	it	ne
 800ae16:	81a3      	strhne	r3, [r4, #12]
 800ae18:	bd10      	pop	{r4, pc}

0800ae1a <__sclose>:
 800ae1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae1e:	f000 b813 	b.w	800ae48 <_close_r>
	...

0800ae24 <_write_r>:
 800ae24:	b538      	push	{r3, r4, r5, lr}
 800ae26:	4c07      	ldr	r4, [pc, #28]	; (800ae44 <_write_r+0x20>)
 800ae28:	4605      	mov	r5, r0
 800ae2a:	4608      	mov	r0, r1
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	2200      	movs	r2, #0
 800ae30:	6022      	str	r2, [r4, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	f7f6 fc79 	bl	800172a <_write>
 800ae38:	1c43      	adds	r3, r0, #1
 800ae3a:	d102      	bne.n	800ae42 <_write_r+0x1e>
 800ae3c:	6823      	ldr	r3, [r4, #0]
 800ae3e:	b103      	cbz	r3, 800ae42 <_write_r+0x1e>
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	bd38      	pop	{r3, r4, r5, pc}
 800ae44:	20000a94 	.word	0x20000a94

0800ae48 <_close_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4c06      	ldr	r4, [pc, #24]	; (800ae64 <_close_r+0x1c>)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4605      	mov	r5, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	f7f6 fc85 	bl	8001762 <_close>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d102      	bne.n	800ae62 <_close_r+0x1a>
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	b103      	cbz	r3, 800ae62 <_close_r+0x1a>
 800ae60:	602b      	str	r3, [r5, #0]
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	20000a94 	.word	0x20000a94

0800ae68 <_fstat_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4c07      	ldr	r4, [pc, #28]	; (800ae88 <_fstat_r+0x20>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4605      	mov	r5, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	4611      	mov	r1, r2
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	f7f6 fc80 	bl	800177a <_fstat>
 800ae7a:	1c43      	adds	r3, r0, #1
 800ae7c:	d102      	bne.n	800ae84 <_fstat_r+0x1c>
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	b103      	cbz	r3, 800ae84 <_fstat_r+0x1c>
 800ae82:	602b      	str	r3, [r5, #0]
 800ae84:	bd38      	pop	{r3, r4, r5, pc}
 800ae86:	bf00      	nop
 800ae88:	20000a94 	.word	0x20000a94

0800ae8c <_isatty_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	4c06      	ldr	r4, [pc, #24]	; (800aea8 <_isatty_r+0x1c>)
 800ae90:	2300      	movs	r3, #0
 800ae92:	4605      	mov	r5, r0
 800ae94:	4608      	mov	r0, r1
 800ae96:	6023      	str	r3, [r4, #0]
 800ae98:	f7f6 fc7f 	bl	800179a <_isatty>
 800ae9c:	1c43      	adds	r3, r0, #1
 800ae9e:	d102      	bne.n	800aea6 <_isatty_r+0x1a>
 800aea0:	6823      	ldr	r3, [r4, #0]
 800aea2:	b103      	cbz	r3, 800aea6 <_isatty_r+0x1a>
 800aea4:	602b      	str	r3, [r5, #0]
 800aea6:	bd38      	pop	{r3, r4, r5, pc}
 800aea8:	20000a94 	.word	0x20000a94

0800aeac <_lseek_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4c07      	ldr	r4, [pc, #28]	; (800aecc <_lseek_r+0x20>)
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	4608      	mov	r0, r1
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	6022      	str	r2, [r4, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	f7f6 fc78 	bl	80017b0 <_lseek>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_lseek_r+0x1e>
 800aec4:	6823      	ldr	r3, [r4, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_lseek_r+0x1e>
 800aec8:	602b      	str	r3, [r5, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	20000a94 	.word	0x20000a94

0800aed0 <__malloc_lock>:
 800aed0:	4770      	bx	lr

0800aed2 <__malloc_unlock>:
 800aed2:	4770      	bx	lr

0800aed4 <_read_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4c07      	ldr	r4, [pc, #28]	; (800aef4 <_read_r+0x20>)
 800aed8:	4605      	mov	r5, r0
 800aeda:	4608      	mov	r0, r1
 800aedc:	4611      	mov	r1, r2
 800aede:	2200      	movs	r2, #0
 800aee0:	6022      	str	r2, [r4, #0]
 800aee2:	461a      	mov	r2, r3
 800aee4:	f7f6 fc04 	bl	80016f0 <_read>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_read_r+0x1e>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_read_r+0x1e>
 800aef0:	602b      	str	r3, [r5, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	20000a94 	.word	0x20000a94

0800aef8 <_init>:
 800aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefa:	bf00      	nop
 800aefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefe:	bc08      	pop	{r3}
 800af00:	469e      	mov	lr, r3
 800af02:	4770      	bx	lr

0800af04 <_fini>:
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	bf00      	nop
 800af08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af0a:	bc08      	pop	{r3}
 800af0c:	469e      	mov	lr, r3
 800af0e:	4770      	bx	lr
