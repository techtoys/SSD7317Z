
HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b24  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005108  08007cb0  08007cb0  00017cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdb8  0800cdb8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdb8  0800cdb8  0001cdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdc0  0800cdc0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdc0  0800cdc0  0001cdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdc4  0800cdc4  0001cdc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800cdc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009fc  20000094  0800ce5c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  0800ce5c  00020a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185ec  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ce2  00000000  00000000  000386b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001130  00000000  00000000  0003b398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc0  00000000  00000000  0003c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000233f3  00000000  00000000  0003d488  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101be  00000000  00000000  0006087b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf81d  00000000  00000000  00070a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140256  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c20  00000000  00000000  001402d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000094 	.word	0x20000094
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007c98 	.word	0x08007c98

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000098 	.word	0x20000098
 80001c8:	08007c98 	.word	0x08007c98

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__io_putchar>:
 *  	generated by STM32CubeIDE if you choose Nucleo Standard EVK as the hw platform
 */
#ifdef USE_FULL_ASSERT
/* @note Override __io_putchar() in syscalls.c */
int __io_putchar(int ch)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80004d4:	1d39      	adds	r1, r7, #4
 80004d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004da:	2201      	movs	r2, #1
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <__io_putchar+0x20>)
 80004de:	f004 fd87 	bl	8004ff0 <HAL_UART_Transmit>
	return ch;
 80004e2:	687b      	ldr	r3, [r7, #4]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200003c0 	.word	0x200003c0

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fb9c 	bl	8000c32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f829 	bl	8000550 <SystemClock_Config>
  //MX_USART2_UART_Init();
  //MX_I2C1_Init();
  //MX_SPI1_Init();
  //MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  ssd7317_init();
 80004fe:	f005 feeb 	bl	80062d8 <ssd7317_init>
  rpc_uart_init();
 8000502:	f006 fe01 	bl	8007108 <rpc_uart_init>

  uint16_t w, h;
  ssd7317_get_stringsize(&Tahoma_12h, "Hello World", &w, &h);
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	f107 020e 	add.w	r2, r7, #14
 800050e:	490e      	ldr	r1, [pc, #56]	; (8000548 <main+0x58>)
 8000510:	480e      	ldr	r0, [pc, #56]	; (800054c <main+0x5c>)
 8000512:	f006 fd41 	bl	8006f98 <ssd7317_get_stringsize>
  ssd7317_put_string((OLED_HOR_RES-w)/2,(OLED_VER_RES-h)/2,&Tahoma_12h,"Hello World",0);
 8000516:	89fb      	ldrh	r3, [r7, #14]
 8000518:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 800051c:	0fda      	lsrs	r2, r3, #31
 800051e:	4413      	add	r3, r2
 8000520:	105b      	asrs	r3, r3, #1
 8000522:	b299      	uxth	r1, r3
 8000524:	89bb      	ldrh	r3, [r7, #12]
 8000526:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800052a:	0fda      	lsrs	r2, r3, #31
 800052c:	4413      	add	r3, r2
 800052e:	105b      	asrs	r3, r3, #1
 8000530:	b29a      	uxth	r2, r3
 8000532:	4638      	mov	r0, r7
 8000534:	2300      	movs	r3, #0
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <main+0x58>)
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <main+0x5c>)
 800053e:	f006 fc7f 	bl	8006e40 <ssd7317_put_string>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//Remote Procedure Call for spi_write_command() and spi_write_data()
	rpc_main_task();
 8000542:	f006 fe61 	bl	8007208 <rpc_main_task>
 8000546:	e7fc      	b.n	8000542 <main+0x52>
 8000548:	08007cb0 	.word	0x08007cb0
 800054c:	08008da4 	.word	0x08008da4

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b0ac      	sub	sp, #176	; 0xb0
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800055a:	2244      	movs	r2, #68	; 0x44
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fee0 	bl	8007324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2254      	movs	r2, #84	; 0x54
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f006 fed2 	bl	8007324 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000580:	2310      	movs	r3, #16
 8000582:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000590:	2360      	movs	r3, #96	; 0x60
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800059c:	2301      	movs	r3, #1
 800059e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005a8:	2310      	movs	r3, #16
 80005aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fad7 	bl	8002b78 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d0:	f000 f831 	bl	8000636 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2303      	movs	r3, #3
 80005da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005ec:	2101      	movs	r1, #1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f838 	bl	8003664 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005fa:	f000 f81c 	bl	8000636 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005fe:	2342      	movs	r3, #66	; 0x42
 8000600:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000602:	2300      	movs	r3, #0
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000606:	2300      	movs	r3, #0
 8000608:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f003 facd 	bl	8003bac <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000618:	f000 f80d 	bl	8000636 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000620:	f002 fa48 	bl	8002ab4 <HAL_PWREx_ControlVoltageScaling>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800062a:	f000 f804 	bl	8000636 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	37b0      	adds	r7, #176	; 0xb0
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //   printf("Wrong parameters value: file %s on line %d\r\n", file, line);
  /* USER CODE END 6 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_MspInit+0x44>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_MspInit+0x44>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6613      	str	r3, [r2, #96]	; 0x60
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_MspInit+0x44>)
 8000670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_MspInit+0x44>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <HAL_MspInit+0x44>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	6593      	str	r3, [r2, #88]	; 0x58
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_MspInit+0x44>)
 8000688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a17      	ldr	r2, [pc, #92]	; (8000720 <HAL_I2C_MspInit+0x7c>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d127      	bne.n	8000716 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_I2C_MspInit+0x80>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <HAL_I2C_MspInit+0x80>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_I2C_MspInit+0x80>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TCH_SCL_Pin|TCH_SDA_Pin;
 80006de:	23c0      	movs	r3, #192	; 0xc0
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e2:	2312      	movs	r3, #18
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ee:	2304      	movs	r3, #4
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <HAL_I2C_MspInit+0x84>)
 80006fa:	f001 f801 	bl	8001700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_I2C_MspInit+0x80>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_I2C_MspInit+0x80>)
 8000704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000708:	6593      	str	r3, [r2, #88]	; 0x58
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_I2C_MspInit+0x80>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40005400 	.word	0x40005400
 8000724:	40021000 	.word	0x40021000
 8000728:	48000400 	.word	0x48000400

0800072c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a3a      	ldr	r2, [pc, #232]	; (8000834 <HAL_SPI_MspInit+0x108>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d16e      	bne.n	800082c <HAL_SPI_MspInit+0x100>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 8000750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000752:	4a39      	ldr	r2, [pc, #228]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 8000754:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000758:	6613      	str	r3, [r2, #96]	; 0x60
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 800075c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a33      	ldr	r2, [pc, #204]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a2d      	ldr	r2, [pc, #180]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_DCS_Pin;
 8000796:	2310      	movs	r3, #16
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007a6:	2305      	movs	r3, #5
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OLED_DCS_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f000 ffa4 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MOSI_Pin;
 80007b8:	2328      	movs	r3, #40	; 0x28
 80007ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007c8:	2305      	movs	r3, #5
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	481a      	ldr	r0, [pc, #104]	; (800083c <HAL_SPI_MspInit+0x110>)
 80007d4:	f000 ff94 	bl	8001700 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007da:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <HAL_SPI_MspInit+0x118>)
 80007dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_SPI_MspInit+0x114>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_SPI_MspInit+0x114>)
 800080a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000810:	480b      	ldr	r0, [pc, #44]	; (8000840 <HAL_SPI_MspInit+0x114>)
 8000812:	f000 fbe5 	bl	8000fe0 <HAL_DMA_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 800081c:	f7ff ff0b 	bl	8000636 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_SPI_MspInit+0x114>)
 8000824:	655a      	str	r2, [r3, #84]	; 0x54
 8000826:	4a06      	ldr	r2, [pc, #24]	; (8000840 <HAL_SPI_MspInit+0x114>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40013000 	.word	0x40013000
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400
 8000840:	20000440 	.word	0x20000440
 8000844:	40020030 	.word	0x40020030

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a39      	ldr	r2, [pc, #228]	; (800094c <HAL_UART_MspInit+0x104>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d16b      	bne.n	8000942 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086a:	4b39      	ldr	r3, [pc, #228]	; (8000950 <HAL_UART_MspInit+0x108>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086e:	4a38      	ldr	r2, [pc, #224]	; (8000950 <HAL_UART_MspInit+0x108>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	6593      	str	r3, [r2, #88]	; 0x58
 8000876:	4b36      	ldr	r3, [pc, #216]	; (8000950 <HAL_UART_MspInit+0x108>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b33      	ldr	r3, [pc, #204]	; (8000950 <HAL_UART_MspInit+0x108>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a32      	ldr	r2, [pc, #200]	; (8000950 <HAL_UART_MspInit+0x108>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <HAL_UART_MspInit+0x108>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800089a:	2304      	movs	r3, #4
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f000 ff22 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80008bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80008ce:	2303      	movs	r3, #3
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f000 ff10 	bl	8001700 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <HAL_UART_MspInit+0x10c>)
 80008e2:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <HAL_UART_MspInit+0x110>)
 80008e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <HAL_UART_MspInit+0x10c>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <HAL_UART_MspInit+0x10c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <HAL_UART_MspInit+0x10c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <HAL_UART_MspInit+0x10c>)
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_UART_MspInit+0x10c>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <HAL_UART_MspInit+0x10c>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_UART_MspInit+0x10c>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <HAL_UART_MspInit+0x10c>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <HAL_UART_MspInit+0x10c>)
 8000918:	f000 fb62 	bl	8000fe0 <HAL_DMA_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8000922:	f7ff fe88 	bl	8000636 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_UART_MspInit+0x10c>)
 800092a:	66da      	str	r2, [r3, #108]	; 0x6c
 800092c:	4a09      	ldr	r2, [pc, #36]	; (8000954 <HAL_UART_MspInit+0x10c>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2026      	movs	r0, #38	; 0x26
 8000938:	f000 fb02 	bl	8000f40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800093c:	2026      	movs	r0, #38	; 0x26
 800093e:	f000 fb2b 	bl	8000f98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	; 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40004400 	.word	0x40004400
 8000950:	40021000 	.word	0x40021000
 8000954:	2000027c 	.word	0x2000027c
 8000958:	4002006c 	.word	0x4002006c

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f994 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009bc:	2001      	movs	r0, #1
 80009be:	f001 f8f5 	bl	8001bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <DMA1_Channel3_IRQHandler+0x10>)
 80009ce:	f000 fdac 	bl	800152a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000440 	.word	0x20000440

080009dc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <DMA1_Channel6_IRQHandler+0x10>)
 80009e2:	f000 fda2 	bl	800152a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000027c 	.word	0x2000027c

080009f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009f4:	4808      	ldr	r0, [pc, #32]	; (8000a18 <USART2_IRQHandler+0x28>)
 80009f6:	f004 fd19 	bl	800542c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if(RESET!=__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <USART2_IRQHandler+0x28>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	69db      	ldr	r3, [r3, #28]
 8000a00:	f003 0310 	and.w	r3, r3, #16
 8000a04:	2b10      	cmp	r3, #16
 8000a06:	d105      	bne.n	8000a14 <USART2_IRQHandler+0x24>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <USART2_IRQHandler+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2210      	movs	r2, #16
 8000a0e:	621a      	str	r2, [r3, #32]
	  rpc_idle_callback();
 8000a10:	f006 fbdc 	bl	80071cc <rpc_idle_callback>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200003c0 	.word	0x200003c0

08000a1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000a20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a24:	f001 f8c2 	bl	8001bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	e00a      	b.n	8000a54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a3e:	f3af 8000 	nop.w
 8000a42:	4601      	mov	r1, r0
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	60ba      	str	r2, [r7, #8]
 8000a4a:	b2ca      	uxtb	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbf0      	blt.n	8000a3e <_read+0x12>
	}

return len;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	e009      	b.n	8000a8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fd23 	bl	80004cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf1      	blt.n	8000a78 <_write+0x12>
	}
	return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_close>:

int _close(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	return -1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_isatty>:

int _isatty(int file)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f006 fbca 	bl	80072d0 <__errno>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	230c      	movs	r3, #12
 8000b40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20010000 	.word	0x20010000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	200000b0 	.word	0x200000b0
 8000b70:	20000a90 	.word	0x20000a90

08000b74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <SystemInit+0x64>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <SystemInit+0x64>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <SystemInit+0x68>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <SystemInit+0x68>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <SystemInit+0x68>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <SystemInit+0x68>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <SystemInit+0x68>)
 8000ba0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ba4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ba8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <SystemInit+0x68>)
 8000bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <SystemInit+0x68>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <SystemInit+0x68>)
 8000bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <SystemInit+0x68>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SystemInit+0x64>)
 8000bc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bca:	609a      	str	r2, [r3, #8]
#endif
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00
 8000bdc:	40021000 	.word	0x40021000

08000be0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000be4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000be6:	e003      	b.n	8000bf0 <LoopCopyDataInit>

08000be8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bee:	3104      	adds	r1, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bf4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bf6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bf8:	d3f6      	bcc.n	8000be8 <CopyDataInit>
	ldr	r2, =_sbss
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bfc:	e002      	b.n	8000c04 <LoopFillZerobss>

08000bfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bfe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c00:	f842 3b04 	str.w	r3, [r2], #4

08000c04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <LoopForever+0x16>)
	cmp	r2, r3
 8000c06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c08:	d3f9      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c0a:	f7ff ffb3 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f006 fb65 	bl	80072dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c12:	f7ff fc6d 	bl	80004f0 <main>

08000c16 <LoopForever>:

LoopForever:
    b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c18:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000c1c:	0800cdc8 	.word	0x0800cdc8
	ldr	r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c24:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 8000c28:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 8000c2c:	20000a90 	.word	0x20000a90

08000c30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_IRQHandler>

08000c32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f95f 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f80e 	bl	8000c64 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	e001      	b.n	8000c58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c54:	f7ff fd02 	bl	800065c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d023      	beq.n	8000cc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_InitTick+0x70>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f99a 	bl	8000fc8 <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10f      	bne.n	8000cba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d809      	bhi.n	8000cb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 f94a 	bl	8000f40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_InitTick+0x74>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e007      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e004      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	e001      	b.n	8000cc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000488 	.word	0x20000488

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000488 	.word	0x20000488

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_Delay+0x40>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000008 	.word	0x20000008

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	; (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	d00f      	beq.n	8000f2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b06      	cmp	r3, #6
 8000f12:	d00c      	beq.n	8000f2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	d009      	beq.n	8000f2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d006      	beq.n	8000f2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d003      	beq.n	8000f2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f26:	21a7      	movs	r1, #167	; 0xa7
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000f2a:	f7ff fb8b 	bl	8000644 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff16 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	08007cbc 	.word	0x08007cbc

08000f40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d903      	bls.n	8000f60 <HAL_NVIC_SetPriority+0x20>
 8000f58:	21bf      	movs	r1, #191	; 0xbf
 8000f5a:	480e      	ldr	r0, [pc, #56]	; (8000f94 <HAL_NVIC_SetPriority+0x54>)
 8000f5c:	f7ff fb72 	bl	8000644 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	d903      	bls.n	8000f6e <HAL_NVIC_SetPriority+0x2e>
 8000f66:	21c0      	movs	r1, #192	; 0xc0
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <HAL_NVIC_SetPriority+0x54>)
 8000f6a:	f7ff fb6b 	bl	8000644 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6e:	f7ff ff1b 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000f72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	6978      	ldr	r0, [r7, #20]
 8000f7a:	f7ff ff6b 	bl	8000e54 <NVIC_EncodePriority>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff3a 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	08007cbc 	.word	0x08007cbc

08000f98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	da03      	bge.n	8000fb2 <HAL_NVIC_EnableIRQ+0x1a>
 8000faa:	21d3      	movs	r1, #211	; 0xd3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <HAL_NVIC_EnableIRQ+0x2c>)
 8000fae:	f7ff fb49 	bl	8000644 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff04 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	08007cbc 	.word	0x08007cbc

08000fc8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff73 	bl	8000ebc <SysTick_Config>
 8000fd6:	4603      	mov	r3, r0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e19d      	b.n	800132e <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a79      	ldr	r2, [pc, #484]	; (80011dc <HAL_DMA_Init+0x1fc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d044      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a77      	ldr	r2, [pc, #476]	; (80011e0 <HAL_DMA_Init+0x200>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d03f      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a76      	ldr	r2, [pc, #472]	; (80011e4 <HAL_DMA_Init+0x204>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d03a      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a74      	ldr	r2, [pc, #464]	; (80011e8 <HAL_DMA_Init+0x208>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d035      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a73      	ldr	r2, [pc, #460]	; (80011ec <HAL_DMA_Init+0x20c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d030      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a71      	ldr	r2, [pc, #452]	; (80011f0 <HAL_DMA_Init+0x210>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d02b      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a70      	ldr	r2, [pc, #448]	; (80011f4 <HAL_DMA_Init+0x214>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d026      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a6e      	ldr	r2, [pc, #440]	; (80011f8 <HAL_DMA_Init+0x218>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d021      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a6d      	ldr	r2, [pc, #436]	; (80011fc <HAL_DMA_Init+0x21c>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d01c      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a6b      	ldr	r2, [pc, #428]	; (8001200 <HAL_DMA_Init+0x220>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d017      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a6a      	ldr	r2, [pc, #424]	; (8001204 <HAL_DMA_Init+0x224>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d012      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a68      	ldr	r2, [pc, #416]	; (8001208 <HAL_DMA_Init+0x228>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a67      	ldr	r2, [pc, #412]	; (800120c <HAL_DMA_Init+0x22c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d008      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a65      	ldr	r2, [pc, #404]	; (8001210 <HAL_DMA_Init+0x230>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d003      	beq.n	8001086 <HAL_DMA_Init+0xa6>
 800107e:	21a4      	movs	r1, #164	; 0xa4
 8001080:	4864      	ldr	r0, [pc, #400]	; (8001214 <HAL_DMA_Init+0x234>)
 8001082:	f7ff fadf 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00c      	beq.n	80010a8 <HAL_DMA_Init+0xc8>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b10      	cmp	r3, #16
 8001094:	d008      	beq.n	80010a8 <HAL_DMA_Init+0xc8>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800109e:	d003      	beq.n	80010a8 <HAL_DMA_Init+0xc8>
 80010a0:	21a5      	movs	r1, #165	; 0xa5
 80010a2:	485c      	ldr	r0, [pc, #368]	; (8001214 <HAL_DMA_Init+0x234>)
 80010a4:	f7ff face 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b40      	cmp	r3, #64	; 0x40
 80010ae:	d007      	beq.n	80010c0 <HAL_DMA_Init+0xe0>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_DMA_Init+0xe0>
 80010b8:	21a6      	movs	r1, #166	; 0xa6
 80010ba:	4856      	ldr	r0, [pc, #344]	; (8001214 <HAL_DMA_Init+0x234>)
 80010bc:	f7ff fac2 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b80      	cmp	r3, #128	; 0x80
 80010c6:	d007      	beq.n	80010d8 <HAL_DMA_Init+0xf8>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_DMA_Init+0xf8>
 80010d0:	21a7      	movs	r1, #167	; 0xa7
 80010d2:	4850      	ldr	r0, [pc, #320]	; (8001214 <HAL_DMA_Init+0x234>)
 80010d4:	f7ff fab6 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00d      	beq.n	80010fc <HAL_DMA_Init+0x11c>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010e8:	d008      	beq.n	80010fc <HAL_DMA_Init+0x11c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f2:	d003      	beq.n	80010fc <HAL_DMA_Init+0x11c>
 80010f4:	21a8      	movs	r1, #168	; 0xa8
 80010f6:	4847      	ldr	r0, [pc, #284]	; (8001214 <HAL_DMA_Init+0x234>)
 80010f8:	f7ff faa4 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00d      	beq.n	8001120 <HAL_DMA_Init+0x140>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110c:	d008      	beq.n	8001120 <HAL_DMA_Init+0x140>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001116:	d003      	beq.n	8001120 <HAL_DMA_Init+0x140>
 8001118:	21a9      	movs	r1, #169	; 0xa9
 800111a:	483e      	ldr	r0, [pc, #248]	; (8001214 <HAL_DMA_Init+0x234>)
 800111c:	f7ff fa92 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d007      	beq.n	8001138 <HAL_DMA_Init+0x158>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	2b20      	cmp	r3, #32
 800112e:	d003      	beq.n	8001138 <HAL_DMA_Init+0x158>
 8001130:	21aa      	movs	r1, #170	; 0xaa
 8001132:	4838      	ldr	r0, [pc, #224]	; (8001214 <HAL_DMA_Init+0x234>)
 8001134:	f7ff fa86 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d012      	beq.n	8001166 <HAL_DMA_Init+0x186>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001148:	d00d      	beq.n	8001166 <HAL_DMA_Init+0x186>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001152:	d008      	beq.n	8001166 <HAL_DMA_Init+0x186>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800115c:	d003      	beq.n	8001166 <HAL_DMA_Init+0x186>
 800115e:	21ab      	movs	r1, #171	; 0xab
 8001160:	482c      	ldr	r0, [pc, #176]	; (8001214 <HAL_DMA_Init+0x234>)
 8001162:	f7ff fa6f 	bl	8000644 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d01f      	beq.n	80011ae <HAL_DMA_Init+0x1ce>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d01b      	beq.n	80011ae <HAL_DMA_Init+0x1ce>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d017      	beq.n	80011ae <HAL_DMA_Init+0x1ce>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b03      	cmp	r3, #3
 8001184:	d013      	beq.n	80011ae <HAL_DMA_Init+0x1ce>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b04      	cmp	r3, #4
 800118c:	d00f      	beq.n	80011ae <HAL_DMA_Init+0x1ce>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b05      	cmp	r3, #5
 8001194:	d00b      	beq.n	80011ae <HAL_DMA_Init+0x1ce>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b06      	cmp	r3, #6
 800119c:	d007      	beq.n	80011ae <HAL_DMA_Init+0x1ce>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	d003      	beq.n	80011ae <HAL_DMA_Init+0x1ce>
 80011a6:	21ad      	movs	r1, #173	; 0xad
 80011a8:	481a      	ldr	r0, [pc, #104]	; (8001214 <HAL_DMA_Init+0x234>)
 80011aa:	f7ff fa4b 	bl	8000644 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_DMA_Init+0x238>)
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d836      	bhi.n	8001228 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_DMA_Init+0x23c>)
 80011c2:	4413      	add	r3, r2
 80011c4:	4a16      	ldr	r2, [pc, #88]	; (8001220 <HAL_DMA_Init+0x240>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	091b      	lsrs	r3, r3, #4
 80011cc:	009a      	lsls	r2, r3, #2
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a13      	ldr	r2, [pc, #76]	; (8001224 <HAL_DMA_Init+0x244>)
 80011d6:	641a      	str	r2, [r3, #64]	; 0x40
 80011d8:	e035      	b.n	8001246 <HAL_DMA_Init+0x266>
 80011da:	bf00      	nop
 80011dc:	40020008 	.word	0x40020008
 80011e0:	4002001c 	.word	0x4002001c
 80011e4:	40020030 	.word	0x40020030
 80011e8:	40020044 	.word	0x40020044
 80011ec:	40020058 	.word	0x40020058
 80011f0:	4002006c 	.word	0x4002006c
 80011f4:	40020080 	.word	0x40020080
 80011f8:	40020408 	.word	0x40020408
 80011fc:	4002041c 	.word	0x4002041c
 8001200:	40020430 	.word	0x40020430
 8001204:	40020444 	.word	0x40020444
 8001208:	40020458 	.word	0x40020458
 800120c:	4002046c 	.word	0x4002046c
 8001210:	40020480 	.word	0x40020480
 8001214:	08007cf8 	.word	0x08007cf8
 8001218:	40020407 	.word	0x40020407
 800121c:	bffdfff8 	.word	0xbffdfff8
 8001220:	cccccccd 	.word	0xcccccccd
 8001224:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b42      	ldr	r3, [pc, #264]	; (8001338 <HAL_DMA_Init+0x358>)
 8001230:	4413      	add	r3, r2
 8001232:	4a42      	ldr	r2, [pc, #264]	; (800133c <HAL_DMA_Init+0x35c>)
 8001234:	fba2 2303 	umull	r2, r3, r2, r3
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	009a      	lsls	r2, r3, #2
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a3f      	ldr	r2, [pc, #252]	; (8001340 <HAL_DMA_Init+0x360>)
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2202      	movs	r2, #2
 800124a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800125c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001260:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800126a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012a0:	d039      	beq.n	8001316 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a27      	ldr	r2, [pc, #156]	; (8001344 <HAL_DMA_Init+0x364>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d11a      	bne.n	80012e2 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_DMA_Init+0x368>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b4:	f003 031c 	and.w	r3, r3, #28
 80012b8:	210f      	movs	r1, #15
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	4921      	ldr	r1, [pc, #132]	; (8001348 <HAL_DMA_Init+0x368>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_DMA_Init+0x368>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6859      	ldr	r1, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f003 031c 	and.w	r3, r3, #28
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	491b      	ldr	r1, [pc, #108]	; (8001348 <HAL_DMA_Init+0x368>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e019      	b.n	8001316 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_DMA_Init+0x36c>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f003 031c 	and.w	r3, r3, #28
 80012ee:	210f      	movs	r1, #15
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	4915      	ldr	r1, [pc, #84]	; (800134c <HAL_DMA_Init+0x36c>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_DMA_Init+0x36c>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6859      	ldr	r1, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001308:	f003 031c 	and.w	r3, r3, #28
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	490e      	ldr	r1, [pc, #56]	; (800134c <HAL_DMA_Init+0x36c>)
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	bffdfbf8 	.word	0xbffdfbf8
 800133c:	cccccccd 	.word	0xcccccccd
 8001340:	40020400 	.word	0x40020400
 8001344:	40020000 	.word	0x40020000
 8001348:	400200a8 	.word	0x400200a8
 800134c:	400204a8 	.word	0x400204a8

08001350 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_DMA_Start_IT+0x20>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136e:	d304      	bcc.n	800137a <HAL_DMA_Start_IT+0x2a>
 8001370:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8001374:	482c      	ldr	r0, [pc, #176]	; (8001428 <HAL_DMA_Start_IT+0xd8>)
 8001376:	f7ff f965 	bl	8000644 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_DMA_Start_IT+0x38>
 8001384:	2302      	movs	r3, #2
 8001386:	e04b      	b.n	8001420 <HAL_DMA_Start_IT+0xd0>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d13a      	bne.n	8001412 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0201 	bic.w	r2, r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f96d 	bl	80016a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 020e 	orr.w	r2, r2, #14
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e00f      	b.n	8001400 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0204 	bic.w	r2, r2, #4
 80013ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 020a 	orr.w	r2, r2, #10
 80013fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e005      	b.n	800141e <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800141a:	2302      	movs	r3, #2
 800141c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800141e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	08007cf8 	.word	0x08007cf8

0800142c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d008      	beq.n	8001456 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2204      	movs	r2, #4
 8001448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e022      	b.n	800149c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 020e 	bic.w	r2, r2, #14
 8001464:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0201 	bic.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f003 021c 	and.w	r2, r3, #28
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	2101      	movs	r1, #1
 8001484:	fa01 f202 	lsl.w	r2, r1, r2
 8001488:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d005      	beq.n	80014cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2204      	movs	r2, #4
 80014c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e029      	b.n	8001520 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 020e 	bic.w	r2, r2, #14
 80014da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0201 	bic.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f0:	f003 021c 	and.w	r2, r3, #28
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	2101      	movs	r1, #1
 80014fa:	fa01 f202 	lsl.w	r2, r1, r2
 80014fe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
    }
  }
  return status;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f003 031c 	and.w	r3, r3, #28
 800154a:	2204      	movs	r2, #4
 800154c:	409a      	lsls	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d026      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x7a>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d021      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	2b00      	cmp	r3, #0
 800156c:	d107      	bne.n	800157e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0204 	bic.w	r2, r2, #4
 800157c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f003 021c 	and.w	r2, r3, #28
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	2104      	movs	r1, #4
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	2b00      	cmp	r3, #0
 8001598:	d071      	beq.n	800167e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80015a2:	e06c      	b.n	800167e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	f003 031c 	and.w	r3, r3, #28
 80015ac:	2202      	movs	r2, #2
 80015ae:	409a      	lsls	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d02e      	beq.n	8001616 <HAL_DMA_IRQHandler+0xec>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d029      	beq.n	8001616 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10b      	bne.n	80015e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 020a 	bic.w	r2, r2, #10
 80015de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f003 021c 	and.w	r2, r3, #28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	2102      	movs	r1, #2
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	2b00      	cmp	r3, #0
 800160a:	d038      	beq.n	800167e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001614:	e033      	b.n	800167e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f003 031c 	and.w	r3, r3, #28
 800161e:	2208      	movs	r2, #8
 8001620:	409a      	lsls	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d02a      	beq.n	8001680 <HAL_DMA_IRQHandler+0x156>
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d025      	beq.n	8001680 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 020e 	bic.w	r2, r2, #14
 8001642:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	f003 021c 	and.w	r2, r3, #28
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	2101      	movs	r1, #1
 8001652:	fa01 f202 	lsl.w	r2, r1, r2
 8001656:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001672:	2b00      	cmp	r3, #0
 8001674:	d004      	beq.n	8001680 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800167e:	bf00      	nop
 8001680:	bf00      	nop
}
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f003 021c 	and.w	r2, r3, #28
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	2101      	movs	r1, #1
 80016bc:	fa01 f202 	lsl.w	r2, r1, r2
 80016c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d108      	bne.n	80016e4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016e2:	e007      	b.n	80016f4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	60da      	str	r2, [r3, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001714:	d00f      	beq.n	8001736 <HAL_GPIO_Init+0x36>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a37      	ldr	r2, [pc, #220]	; (80017f8 <HAL_GPIO_Init+0xf8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00b      	beq.n	8001736 <HAL_GPIO_Init+0x36>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a36      	ldr	r2, [pc, #216]	; (80017fc <HAL_GPIO_Init+0xfc>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d007      	beq.n	8001736 <HAL_GPIO_Init+0x36>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a35      	ldr	r2, [pc, #212]	; (8001800 <HAL_GPIO_Init+0x100>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x36>
 800172e:	21b3      	movs	r1, #179	; 0xb3
 8001730:	4834      	ldr	r0, [pc, #208]	; (8001804 <HAL_GPIO_Init+0x104>)
 8001732:	f7fe ff87 	bl	8000644 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_GPIO_Init+0x4c>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x54>
 800174c:	21b4      	movs	r1, #180	; 0xb4
 800174e:	482d      	ldr	r0, [pc, #180]	; (8001804 <HAL_GPIO_Init+0x104>)
 8001750:	f7fe ff78 	bl	8000644 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d039      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d035      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b11      	cmp	r3, #17
 800176a:	d031      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d02d      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b12      	cmp	r3, #18
 800177a:	d029      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a21      	ldr	r2, [pc, #132]	; (8001808 <HAL_GPIO_Init+0x108>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d024      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4a20      	ldr	r2, [pc, #128]	; (800180c <HAL_GPIO_Init+0x10c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d01f      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <HAL_GPIO_Init+0x110>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01a      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <HAL_GPIO_Init+0x114>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d015      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <HAL_GPIO_Init+0x118>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d010      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a1a      	ldr	r2, [pc, #104]	; (800181c <HAL_GPIO_Init+0x11c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d00b      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d007      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b0b      	cmp	r3, #11
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0xd0>
 80017c8:	21b5      	movs	r1, #181	; 0xb5
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <HAL_GPIO_Init+0x104>)
 80017cc:	f7fe ff3a 	bl	8000644 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 81a8 	beq.w	8001b2a <HAL_GPIO_Init+0x42a>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	f000 81a3 	beq.w	8001b2a <HAL_GPIO_Init+0x42a>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	f000 819e 	beq.w	8001b2a <HAL_GPIO_Init+0x42a>
 80017ee:	21b6      	movs	r1, #182	; 0xb6
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <HAL_GPIO_Init+0x104>)
 80017f2:	f7fe ff27 	bl	8000644 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e198      	b.n	8001b2a <HAL_GPIO_Init+0x42a>
 80017f8:	48000400 	.word	0x48000400
 80017fc:	48000800 	.word	0x48000800
 8001800:	48001c00 	.word	0x48001c00
 8001804:	08007d30 	.word	0x08007d30
 8001808:	10110000 	.word	0x10110000
 800180c:	10210000 	.word	0x10210000
 8001810:	10310000 	.word	0x10310000
 8001814:	10120000 	.word	0x10120000
 8001818:	10220000 	.word	0x10220000
 800181c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8176 	beq.w	8001b24 <HAL_GPIO_Init+0x424>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d00b      	beq.n	8001858 <HAL_GPIO_Init+0x158>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x158>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184c:	2b11      	cmp	r3, #17
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x158>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b12      	cmp	r3, #18
 8001856:	d144      	bne.n	80018e2 <HAL_GPIO_Init+0x1e2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00f      	beq.n	8001880 <HAL_GPIO_Init+0x180>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d00b      	beq.n	8001880 <HAL_GPIO_Init+0x180>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x180>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x180>
 8001878:	21c6      	movs	r1, #198	; 0xc6
 800187a:	4872      	ldr	r0, [pc, #456]	; (8001a44 <HAL_GPIO_Init+0x344>)
 800187c:	f7fe fee2 	bl	8000644 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2203      	movs	r2, #3
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018b6:	2201      	movs	r2, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	f003 0201 	and.w	r2, r3, #1
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x222>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b12      	cmp	r3, #18
 8001920:	d13f      	bne.n	80019a2 <HAL_GPIO_Init+0x2a2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001928:	d00f      	beq.n	800194a <HAL_GPIO_Init+0x24a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a46      	ldr	r2, [pc, #280]	; (8001a48 <HAL_GPIO_Init+0x348>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00b      	beq.n	800194a <HAL_GPIO_Init+0x24a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a45      	ldr	r2, [pc, #276]	; (8001a4c <HAL_GPIO_Init+0x34c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d007      	beq.n	800194a <HAL_GPIO_Init+0x24a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a44      	ldr	r2, [pc, #272]	; (8001a50 <HAL_GPIO_Init+0x350>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x24a>
 8001942:	21ec      	movs	r1, #236	; 0xec
 8001944:	483f      	ldr	r0, [pc, #252]	; (8001a44 <HAL_GPIO_Init+0x344>)
 8001946:	f7fe fe7d 	bl	8000644 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	2b0f      	cmp	r3, #15
 8001950:	d903      	bls.n	800195a <HAL_GPIO_Init+0x25a>
 8001952:	21ed      	movs	r1, #237	; 0xed
 8001954:	483b      	ldr	r0, [pc, #236]	; (8001a44 <HAL_GPIO_Init+0x344>)
 8001956:	f7fe fe75 	bl	8000644 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	220f      	movs	r2, #15
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	691a      	ldr	r2, [r3, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	08da      	lsrs	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	6939      	ldr	r1, [r7, #16]
 800199e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0203 	and.w	r2, r3, #3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80a0 	beq.w	8001b24 <HAL_GPIO_Init+0x424>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_GPIO_Init+0x354>)
 80019e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e8:	4a1a      	ldr	r2, [pc, #104]	; (8001a54 <HAL_GPIO_Init+0x354>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6613      	str	r3, [r2, #96]	; 0x60
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_GPIO_Init+0x354>)
 80019f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019fc:	4a16      	ldr	r2, [pc, #88]	; (8001a58 <HAL_GPIO_Init+0x358>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a26:	d019      	beq.n	8001a5c <HAL_GPIO_Init+0x35c>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_GPIO_Init+0x348>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d007      	beq.n	8001a40 <HAL_GPIO_Init+0x340>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <HAL_GPIO_Init+0x34c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d101      	bne.n	8001a3c <HAL_GPIO_Init+0x33c>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e010      	b.n	8001a5e <HAL_GPIO_Init+0x35e>
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	e00e      	b.n	8001a5e <HAL_GPIO_Init+0x35e>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e00c      	b.n	8001a5e <HAL_GPIO_Init+0x35e>
 8001a44:	08007d30 	.word	0x08007d30
 8001a48:	48000400 	.word	0x48000400
 8001a4c:	48000800 	.word	0x48000800
 8001a50:	48001c00 	.word	0x48001c00
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	f002 0203 	and.w	r2, r2, #3
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	4093      	lsls	r3, r2
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a6e:	4935      	ldr	r1, [pc, #212]	; (8001b44 <HAL_GPIO_Init+0x444>)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	3302      	adds	r3, #2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a7c:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <HAL_GPIO_Init+0x448>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x3a0>
        {
          temp |= iocurrent;
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aa0:	4a29      	ldr	r2, [pc, #164]	; (8001b48 <HAL_GPIO_Init+0x448>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_GPIO_Init+0x448>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x3ca>
        {
          temp |= iocurrent;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aca:	4a1f      	ldr	r2, [pc, #124]	; (8001b48 <HAL_GPIO_Init+0x448>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_GPIO_Init+0x448>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x3f4>
        {
          temp |= iocurrent;
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <HAL_GPIO_Init+0x448>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HAL_GPIO_Init+0x448>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x41e>
        {
          temp |= iocurrent;
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_GPIO_Init+0x448>)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f47f ae73 	bne.w	8001820 <HAL_GPIO_Init+0x120>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40010000 	.word	0x40010000
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <HAL_GPIO_WritePin+0x20>
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	0c1b      	lsrs	r3, r3, #16
 8001b66:	041b      	lsls	r3, r3, #16
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d004      	beq.n	8001b76 <HAL_GPIO_WritePin+0x2a>
 8001b6c:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <HAL_GPIO_WritePin+0x5c>)
 8001b72:	f7fe fd67 	bl	8000644 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001b76:	787b      	ldrb	r3, [r7, #1]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <HAL_GPIO_WritePin+0x40>
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d004      	beq.n	8001b8c <HAL_GPIO_WritePin+0x40>
 8001b82:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001b86:	4808      	ldr	r0, [pc, #32]	; (8001ba8 <HAL_GPIO_WritePin+0x5c>)
 8001b88:	f7fe fd5c 	bl	8000644 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b98:	e002      	b.n	8001ba0 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	08007d30 	.word	0x08007d30

08001bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f004 fb64 	bl	8006298 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40010400 	.word	0x40010400

08001bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0ff      	b.n	8001dee <HAL_I2C_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a81      	ldr	r2, [pc, #516]	; (8001df8 <HAL_I2C_Init+0x21c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_I2C_Init+0x30>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a7f      	ldr	r2, [pc, #508]	; (8001dfc <HAL_I2C_Init+0x220>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_I2C_Init+0x30>
 8001c02:	f240 11e5 	movw	r1, #485	; 0x1e5
 8001c06:	487e      	ldr	r0, [pc, #504]	; (8001e00 <HAL_I2C_Init+0x224>)
 8001c08:	f7fe fd1c 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c14:	d304      	bcc.n	8001c20 <HAL_I2C_Init+0x44>
 8001c16:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8001c1a:	4879      	ldr	r0, [pc, #484]	; (8001e00 <HAL_I2C_Init+0x224>)
 8001c1c:	f7fe fd12 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d008      	beq.n	8001c3a <HAL_I2C_Init+0x5e>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d004      	beq.n	8001c3a <HAL_I2C_Init+0x5e>
 8001c30:	f240 11e7 	movw	r1, #487	; 0x1e7
 8001c34:	4872      	ldr	r0, [pc, #456]	; (8001e00 <HAL_I2C_Init+0x224>)
 8001c36:	f7fe fd05 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_I2C_Init+0x7a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c4a:	d004      	beq.n	8001c56 <HAL_I2C_Init+0x7a>
 8001c4c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8001c50:	486b      	ldr	r0, [pc, #428]	; (8001e00 <HAL_I2C_Init+0x224>)
 8001c52:	f7fe fcf7 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	2bff      	cmp	r3, #255	; 0xff
 8001c5c:	d904      	bls.n	8001c68 <HAL_I2C_Init+0x8c>
 8001c5e:	f240 11e9 	movw	r1, #489	; 0x1e9
 8001c62:	4867      	ldr	r0, [pc, #412]	; (8001e00 <HAL_I2C_Init+0x224>)
 8001c64:	f7fe fcee 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_I2C_Init+0xd6>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d01c      	beq.n	8001cb2 <HAL_I2C_Init+0xd6>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d018      	beq.n	8001cb2 <HAL_I2C_Init+0xd6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d014      	beq.n	8001cb2 <HAL_I2C_Init+0xd6>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d010      	beq.n	8001cb2 <HAL_I2C_Init+0xd6>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d00c      	beq.n	8001cb2 <HAL_I2C_Init+0xd6>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b06      	cmp	r3, #6
 8001c9e:	d008      	beq.n	8001cb2 <HAL_I2C_Init+0xd6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b07      	cmp	r3, #7
 8001ca6:	d004      	beq.n	8001cb2 <HAL_I2C_Init+0xd6>
 8001ca8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8001cac:	4854      	ldr	r0, [pc, #336]	; (8001e00 <HAL_I2C_Init+0x224>)
 8001cae:	f7fe fcc9 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <HAL_I2C_Init+0xf2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cc2:	d004      	beq.n	8001cce <HAL_I2C_Init+0xf2>
 8001cc4:	f240 11eb 	movw	r1, #491	; 0x1eb
 8001cc8:	484d      	ldr	r0, [pc, #308]	; (8001e00 <HAL_I2C_Init+0x224>)
 8001cca:	f7fe fcbb 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_I2C_Init+0x10e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cde:	d004      	beq.n	8001cea <HAL_I2C_Init+0x10e>
 8001ce0:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001ce4:	4846      	ldr	r0, [pc, #280]	; (8001e00 <HAL_I2C_Init+0x224>)
 8001ce6:	f7fe fcad 	bl	8000644 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7fe fcd0 	bl	80006a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2224      	movs	r2, #36	; 0x24
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d107      	bne.n	8001d52 <HAL_I2C_Init+0x176>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	e006      	b.n	8001d60 <HAL_I2C_Init+0x184>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d104      	bne.n	8001d72 <HAL_I2C_Init+0x196>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	ea42 0103 	orr.w	r1, r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	021a      	lsls	r2, r3, #8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69d9      	ldr	r1, [r3, #28]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40005400 	.word	0x40005400
 8001dfc:	40005c00 	.word	0x40005c00
 8001e00:	08007d6c 	.word	0x08007d6c

08001e04 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	460b      	mov	r3, r1
 8001e12:	817b      	strh	r3, [r7, #10]
 8001e14:	4613      	mov	r3, r2
 8001e16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	f040 80da 	bne.w	8001fda <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_I2C_Master_Transmit+0x30>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e0d3      	b.n	8001fdc <HAL_I2C_Master_Transmit+0x1d8>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e3c:	f7fe ff62 	bl	8000d04 <HAL_GetTick>
 8001e40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2319      	movs	r3, #25
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 fb5c 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0be      	b.n	8001fdc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2221      	movs	r2, #33	; 0x21
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2210      	movs	r2, #16
 8001e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	893a      	ldrh	r2, [r7, #8]
 8001e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2bff      	cmp	r3, #255	; 0xff
 8001e8e:	d90e      	bls.n	8001eae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	22ff      	movs	r2, #255	; 0xff
 8001e94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	8979      	ldrh	r1, [r7, #10]
 8001e9e:	4b51      	ldr	r3, [pc, #324]	; (8001fe4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fcbe 	bl	8002828 <I2C_TransferConfig>
 8001eac:	e06c      	b.n	8001f88 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	8979      	ldrh	r1, [r7, #10]
 8001ec0:	4b48      	ldr	r3, [pc, #288]	; (8001fe4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 fcad 	bl	8002828 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ece:	e05b      	b.n	8001f88 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	6a39      	ldr	r1, [r7, #32]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 fb59 	bl	800258c <I2C_WaitOnTXISFlagUntilTimeout>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e07b      	b.n	8001fdc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d034      	beq.n	8001f88 <HAL_I2C_Master_Transmit+0x184>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d130      	bne.n	8001f88 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2180      	movs	r1, #128	; 0x80
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 faeb 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e04d      	b.n	8001fdc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d90e      	bls.n	8001f68 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	22ff      	movs	r2, #255	; 0xff
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	8979      	ldrh	r1, [r7, #10]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 fc61 	bl	8002828 <I2C_TransferConfig>
 8001f66:	e00f      	b.n	8001f88 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	8979      	ldrh	r1, [r7, #10]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fc50 	bl	8002828 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d19e      	bne.n	8001ed0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	6a39      	ldr	r1, [r7, #32]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 fb38 	bl	800260c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e01a      	b.n	8001fdc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2220      	movs	r2, #32
 8001fac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001fba:	400b      	ands	r3, r1
 8001fbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
  }
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	80002000 	.word	0x80002000
 8001fe8:	fe00e800 	.word	0xfe00e800

08001fec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	817b      	strh	r3, [r7, #10]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b20      	cmp	r3, #32
 800200a:	f040 80db 	bne.w	80021c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_I2C_Master_Receive+0x30>
 8002018:	2302      	movs	r3, #2
 800201a:	e0d4      	b.n	80021c6 <HAL_I2C_Master_Receive+0x1da>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002024:	f7fe fe6e 	bl	8000d04 <HAL_GetTick>
 8002028:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2319      	movs	r3, #25
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 fa68 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e0bf      	b.n	80021c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2222      	movs	r2, #34	; 0x22
 800204a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2210      	movs	r2, #16
 8002052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	893a      	ldrh	r2, [r7, #8]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	2bff      	cmp	r3, #255	; 0xff
 8002076:	d90e      	bls.n	8002096 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	22ff      	movs	r2, #255	; 0xff
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	b2da      	uxtb	r2, r3
 8002084:	8979      	ldrh	r1, [r7, #10]
 8002086:	4b52      	ldr	r3, [pc, #328]	; (80021d0 <HAL_I2C_Master_Receive+0x1e4>)
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fbca 	bl	8002828 <I2C_TransferConfig>
 8002094:	e06d      	b.n	8002172 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	8979      	ldrh	r1, [r7, #10]
 80020a8:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <HAL_I2C_Master_Receive+0x1e4>)
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fbb9 	bl	8002828 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80020b6:	e05c      	b.n	8002172 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	6a39      	ldr	r1, [r7, #32]
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fae1 	bl	8002684 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e07c      	b.n	80021c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d034      	beq.n	8002172 <HAL_I2C_Master_Receive+0x186>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	d130      	bne.n	8002172 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	2200      	movs	r2, #0
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f9f6 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e04d      	b.n	80021c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212e:	b29b      	uxth	r3, r3
 8002130:	2bff      	cmp	r3, #255	; 0xff
 8002132:	d90e      	bls.n	8002152 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	22ff      	movs	r2, #255	; 0xff
 8002138:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	b2da      	uxtb	r2, r3
 8002140:	8979      	ldrh	r1, [r7, #10]
 8002142:	2300      	movs	r3, #0
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fb6c 	bl	8002828 <I2C_TransferConfig>
 8002150:	e00f      	b.n	8002172 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002160:	b2da      	uxtb	r2, r3
 8002162:	8979      	ldrh	r1, [r7, #10]
 8002164:	2300      	movs	r3, #0
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 fb5b 	bl	8002828 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d19d      	bne.n	80020b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	6a39      	ldr	r1, [r7, #32]
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fa43 	bl	800260c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e01a      	b.n	80021c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2220      	movs	r2, #32
 8002196:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6859      	ldr	r1, [r3, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_I2C_Master_Receive+0x1e8>)
 80021a4:	400b      	ands	r3, r1
 80021a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	80002400 	.word	0x80002400
 80021d4:	fe00e800 	.word	0xfe00e800

080021d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af02      	add	r7, sp, #8
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	4608      	mov	r0, r1
 80021e2:	4611      	mov	r1, r2
 80021e4:	461a      	mov	r2, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	817b      	strh	r3, [r7, #10]
 80021ea:	460b      	mov	r3, r1
 80021ec:	813b      	strh	r3, [r7, #8]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d007      	beq.n	8002208 <HAL_I2C_Mem_Write+0x30>
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d004      	beq.n	8002208 <HAL_I2C_Mem_Write+0x30>
 80021fe:	f640 01fb 	movw	r1, #2299	; 0x8fb
 8002202:	4884      	ldr	r0, [pc, #528]	; (8002414 <HAL_I2C_Mem_Write+0x23c>)
 8002204:	f7fe fa1e 	bl	8000644 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b20      	cmp	r3, #32
 8002212:	f040 80f9 	bne.w	8002408 <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_I2C_Mem_Write+0x4a>
 800221c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800221e:	2b00      	cmp	r3, #0
 8002220:	d105      	bne.n	800222e <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0ed      	b.n	800240a <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_I2C_Mem_Write+0x64>
 8002238:	2302      	movs	r3, #2
 800223a:	e0e6      	b.n	800240a <HAL_I2C_Mem_Write+0x232>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002244:	f7fe fd5e 	bl	8000d04 <HAL_GetTick>
 8002248:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2319      	movs	r3, #25
 8002250:	2201      	movs	r2, #1
 8002252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f958 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0d1      	b.n	800240a <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2221      	movs	r2, #33	; 0x21
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2240      	movs	r2, #64	; 0x40
 8002272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a3a      	ldr	r2, [r7, #32]
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800228e:	88f8      	ldrh	r0, [r7, #6]
 8002290:	893a      	ldrh	r2, [r7, #8]
 8002292:	8979      	ldrh	r1, [r7, #10]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	4603      	mov	r3, r0
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f8bc 	bl	800241c <I2C_RequestMemoryWrite>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0a9      	b.n	800240a <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2bff      	cmp	r3, #255	; 0xff
 80022be:	d90e      	bls.n	80022de <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	8979      	ldrh	r1, [r7, #10]
 80022ce:	2300      	movs	r3, #0
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 faa6 	bl	8002828 <I2C_TransferConfig>
 80022dc:	e00f      	b.n	80022fe <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	8979      	ldrh	r1, [r7, #10]
 80022f0:	2300      	movs	r3, #0
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 fa95 	bl	8002828 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f942 	bl	800258c <I2C_WaitOnTXISFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e07b      	b.n	800240a <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d034      	beq.n	80023b6 <HAL_I2C_Mem_Write+0x1de>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	2b00      	cmp	r3, #0
 8002352:	d130      	bne.n	80023b6 <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235a:	2200      	movs	r2, #0
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f8d4 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e04d      	b.n	800240a <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	2bff      	cmp	r3, #255	; 0xff
 8002376:	d90e      	bls.n	8002396 <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	22ff      	movs	r2, #255	; 0xff
 800237c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	b2da      	uxtb	r2, r3
 8002384:	8979      	ldrh	r1, [r7, #10]
 8002386:	2300      	movs	r3, #0
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fa4a 	bl	8002828 <I2C_TransferConfig>
 8002394:	e00f      	b.n	80023b6 <HAL_I2C_Mem_Write+0x1de>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	8979      	ldrh	r1, [r7, #10]
 80023a8:	2300      	movs	r3, #0
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fa39 	bl	8002828 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d19e      	bne.n	80022fe <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f921 	bl	800260c <I2C_WaitOnSTOPFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e01a      	b.n	800240a <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2220      	movs	r2, #32
 80023da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <HAL_I2C_Mem_Write+0x240>)
 80023e8:	400b      	ands	r3, r1
 80023ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 8002408:	2302      	movs	r3, #2
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	08007d6c 	.word	0x08007d6c
 8002418:	fe00e800 	.word	0xfe00e800

0800241c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4603      	mov	r3, r0
 800242c:	817b      	strh	r3, [r7, #10]
 800242e:	460b      	mov	r3, r1
 8002430:	813b      	strh	r3, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	8979      	ldrh	r1, [r7, #10]
 800243c:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <I2C_RequestMemoryWrite+0xa4>)
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f9ef 	bl	8002828 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	69b9      	ldr	r1, [r7, #24]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f89c 	bl	800258c <I2C_WaitOnTXISFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e02c      	b.n	80024b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002464:	893b      	ldrh	r3, [r7, #8]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
 800246e:	e015      	b.n	800249c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002470:	893b      	ldrh	r3, [r7, #8]
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	b29b      	uxth	r3, r3
 8002476:	b2da      	uxtb	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	69b9      	ldr	r1, [r7, #24]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f882 	bl	800258c <I2C_WaitOnTXISFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e012      	b.n	80024b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002492:	893b      	ldrh	r3, [r7, #8]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2200      	movs	r2, #0
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f830 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	80002000 	.word	0x80002000

080024c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d103      	bne.n	80024e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d007      	beq.n	8002500 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	619a      	str	r2, [r3, #24]
  }
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800251c:	e022      	b.n	8002564 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d01e      	beq.n	8002564 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002526:	f7fe fbed 	bl	8000d04 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d302      	bcc.n	800253c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d113      	bne.n	8002564 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	f043 0220 	orr.w	r2, r3, #32
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e00f      	b.n	8002584 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	4013      	ands	r3, r2
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	429a      	cmp	r2, r3
 8002572:	bf0c      	ite	eq
 8002574:	2301      	moveq	r3, #1
 8002576:	2300      	movne	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	429a      	cmp	r2, r3
 8002580:	d0cd      	beq.n	800251e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002598:	e02c      	b.n	80025f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f8dc 	bl	800275c <I2C_IsAcknowledgeFailed>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e02a      	b.n	8002604 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d01e      	beq.n	80025f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b6:	f7fe fba5 	bl	8000d04 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d302      	bcc.n	80025cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d113      	bne.n	80025f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e007      	b.n	8002604 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d1cb      	bne.n	800259a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002618:	e028      	b.n	800266c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f89c 	bl	800275c <I2C_IsAcknowledgeFailed>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e026      	b.n	800267c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262e:	f7fe fb69 	bl	8000d04 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	429a      	cmp	r2, r3
 800263c:	d302      	bcc.n	8002644 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d113      	bne.n	800266c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	f043 0220 	orr.w	r2, r3, #32
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e007      	b.n	800267c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b20      	cmp	r3, #32
 8002678:	d1cf      	bne.n	800261a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002690:	e055      	b.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f860 	bl	800275c <I2C_IsAcknowledgeFailed>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e053      	b.n	800274e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d129      	bne.n	8002708 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d105      	bne.n	80026ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e03f      	b.n	800274e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2220      	movs	r2, #32
 80026d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80026e2:	400b      	ands	r3, r1
 80026e4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e022      	b.n	800274e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002708:	f7fe fafc 	bl	8000d04 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	429a      	cmp	r2, r3
 8002716:	d302      	bcc.n	800271e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f043 0220 	orr.w	r2, r3, #32
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e007      	b.n	800274e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b04      	cmp	r3, #4
 800274a:	d1a2      	bne.n	8002692 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	fe00e800 	.word	0xfe00e800

0800275c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b10      	cmp	r3, #16
 8002774:	d151      	bne.n	800281a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002776:	e022      	b.n	80027be <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277e:	d01e      	beq.n	80027be <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002780:	f7fe fac0 	bl	8000d04 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d302      	bcc.n	8002796 <I2C_IsAcknowledgeFailed+0x3a>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d113      	bne.n	80027be <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f043 0220 	orr.w	r2, r3, #32
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e02e      	b.n	800281c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d1d5      	bne.n	8002778 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2220      	movs	r2, #32
 80027da:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7ff fe71 	bl	80024c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <I2C_IsAcknowledgeFailed+0xc8>)
 80027ee:	400b      	ands	r3, r1
 80027f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f043 0204 	orr.w	r2, r3, #4
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	fe00e800 	.word	0xfe00e800

08002828 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	817b      	strh	r3, [r7, #10]
 8002836:	4613      	mov	r3, r2
 8002838:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a28      	ldr	r2, [pc, #160]	; (80028e0 <I2C_TransferConfig+0xb8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d009      	beq.n	8002858 <I2C_TransferConfig+0x30>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <I2C_TransferConfig+0xbc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <I2C_TransferConfig+0x30>
 800284e:	f641 1139 	movw	r1, #6457	; 0x1939
 8002852:	4825      	ldr	r0, [pc, #148]	; (80028e8 <I2C_TransferConfig+0xc0>)
 8002854:	f7fd fef6 	bl	8000644 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800285e:	d00b      	beq.n	8002878 <I2C_TransferConfig+0x50>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002866:	d007      	beq.n	8002878 <I2C_TransferConfig+0x50>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d004      	beq.n	8002878 <I2C_TransferConfig+0x50>
 800286e:	f641 113a 	movw	r1, #6458	; 0x193a
 8002872:	481d      	ldr	r0, [pc, #116]	; (80028e8 <I2C_TransferConfig+0xc0>)
 8002874:	f7fd fee6 	bl	8000644 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <I2C_TransferConfig+0xc4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00f      	beq.n	80028a0 <I2C_TransferConfig+0x78>
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <I2C_TransferConfig+0xc8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00b      	beq.n	80028a0 <I2C_TransferConfig+0x78>
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <I2C_TransferConfig+0xcc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d007      	beq.n	80028a0 <I2C_TransferConfig+0x78>
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <I2C_TransferConfig+0x78>
 8002896:	f641 113b 	movw	r1, #6459	; 0x193b
 800289a:	4813      	ldr	r0, [pc, #76]	; (80028e8 <I2C_TransferConfig+0xc0>)
 800289c:	f7fd fed2 	bl	8000644 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	0d5b      	lsrs	r3, r3, #21
 80028aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <I2C_TransferConfig+0xd0>)
 80028b0:	430b      	orrs	r3, r1
 80028b2:	43db      	mvns	r3, r3
 80028b4:	ea02 0103 	and.w	r1, r2, r3
 80028b8:	897b      	ldrh	r3, [r7, #10]
 80028ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028be:	7a7b      	ldrb	r3, [r7, #9]
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40005400 	.word	0x40005400
 80028e4:	40005c00 	.word	0x40005c00
 80028e8:	08007d6c 	.word	0x08007d6c
 80028ec:	80004000 	.word	0x80004000
 80028f0:	80002400 	.word	0x80002400
 80028f4:	80002000 	.word	0x80002000
 80028f8:	03ff63ff 	.word	0x03ff63ff

080028fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2d      	ldr	r2, [pc, #180]	; (80029c0 <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d008      	beq.n	8002922 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2b      	ldr	r2, [pc, #172]	; (80029c4 <HAL_I2CEx_ConfigAnalogFilter+0xc8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d003      	beq.n	8002922 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 800291a:	2164      	movs	r1, #100	; 0x64
 800291c:	482a      	ldr	r0, [pc, #168]	; (80029c8 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 800291e:	f7fd fe91 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292e:	d003      	beq.n	8002938 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 8002930:	2165      	movs	r1, #101	; 0x65
 8002932:	4825      	ldr	r0, [pc, #148]	; (80029c8 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 8002934:	f7fd fe86 	bl	8000644 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b20      	cmp	r3, #32
 8002942:	d138      	bne.n	80029b6 <HAL_I2CEx_ConfigAnalogFilter+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_I2CEx_ConfigAnalogFilter+0x56>
 800294e:	2302      	movs	r3, #2
 8002950:	e032      	b.n	80029b8 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2224      	movs	r2, #36	; 0x24
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002980:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6819      	ldr	r1, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
  }
  else
  {
    return HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40005400 	.word	0x40005400
 80029c4:	40005c00 	.word	0x40005c00
 80029c8:	08007da4 	.word	0x08007da4

080029cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2c      	ldr	r2, [pc, #176]	; (8002a8c <HAL_I2CEx_ConfigDigitalFilter+0xc0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d008      	beq.n	80029f2 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2a      	ldr	r2, [pc, #168]	; (8002a90 <HAL_I2CEx_ConfigDigitalFilter+0xc4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 80029ea:	2192      	movs	r1, #146	; 0x92
 80029ec:	4829      	ldr	r0, [pc, #164]	; (8002a94 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80029ee:	f7fd fe29 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b0f      	cmp	r3, #15
 80029f6:	d903      	bls.n	8002a00 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 80029f8:	2193      	movs	r1, #147	; 0x93
 80029fa:	4826      	ldr	r0, [pc, #152]	; (8002a94 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80029fc:	f7fd fe22 	bl	8000644 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d139      	bne.n	8002a80 <HAL_I2CEx_ConfigDigitalFilter+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e033      	b.n	8002a82 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2224      	movs	r2, #36	; 0x24
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0201 	bic.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40005400 	.word	0x40005400
 8002a90:	40005c00 	.word	0x40005c00
 8002a94:	08007da4 	.word	0x08007da4

08002a98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40007000 	.word	0x40007000

08002ab4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac2:	d007      	beq.n	8002ad4 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aca:	d003      	beq.n	8002ad4 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002acc:	21a8      	movs	r1, #168	; 0xa8
 8002ace:	4826      	ldr	r0, [pc, #152]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002ad0:	f7fd fdb8 	bl	8000644 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ada:	d130      	bne.n	8002b3e <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002adc:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae8:	d038      	beq.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002af2:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2232      	movs	r2, #50	; 0x32
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	0c9b      	lsrs	r3, r3, #18
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b10:	e002      	b.n	8002b18 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b24:	d102      	bne.n	8002b2c <HAL_PWREx_ControlVoltageScaling+0x78>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f2      	bne.n	8002b12 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b38:	d110      	bne.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e00f      	b.n	8002b5e <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4a:	d007      	beq.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b4c:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b54:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	08007de0 	.word	0x08007de0
 8002b6c:	40007000 	.word	0x40007000
 8002b70:	20000000 	.word	0x20000000
 8002b74:	431bde83 	.word	0x431bde83

08002b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f000 bd65 	b.w	8003656 <HAL_RCC_OscConfig+0xade>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d028      	beq.n	8002be6 <HAL_RCC_OscConfig+0x6e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d122      	bne.n	8002be6 <HAL_RCC_OscConfig+0x6e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d11c      	bne.n	8002be6 <HAL_RCC_OscConfig+0x6e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d116      	bne.n	8002be6 <HAL_RCC_OscConfig+0x6e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d110      	bne.n	8002be6 <HAL_RCC_OscConfig+0x6e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10a      	bne.n	8002be6 <HAL_RCC_OscConfig+0x6e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d104      	bne.n	8002be6 <HAL_RCC_OscConfig+0x6e>
 8002bdc:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8002be0:	48a3      	ldr	r0, [pc, #652]	; (8002e70 <HAL_RCC_OscConfig+0x2f8>)
 8002be2:	f7fd fd2f 	bl	8000644 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be6:	4ba3      	ldr	r3, [pc, #652]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf0:	4ba0      	ldr	r3, [pc, #640]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 813f 	beq.w	8002e86 <HAL_RCC_OscConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_OscConfig+0xaa>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d004      	beq.n	8002c22 <HAL_RCC_OscConfig+0xaa>
 8002c18:	f240 11ab 	movw	r1, #427	; 0x1ab
 8002c1c:	4894      	ldr	r0, [pc, #592]	; (8002e70 <HAL_RCC_OscConfig+0x2f8>)
 8002c1e:	f7fd fd11 	bl	8000644 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	2bff      	cmp	r3, #255	; 0xff
 8002c28:	d904      	bls.n	8002c34 <HAL_RCC_OscConfig+0xbc>
 8002c2a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002c2e:	4890      	ldr	r0, [pc, #576]	; (8002e70 <HAL_RCC_OscConfig+0x2f8>)
 8002c30:	f7fd fd08 	bl	8000644 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d030      	beq.n	8002c9e <HAL_RCC_OscConfig+0x126>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d02c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x126>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d028      	beq.n	8002c9e <HAL_RCC_OscConfig+0x126>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	2b30      	cmp	r3, #48	; 0x30
 8002c52:	d024      	beq.n	8002c9e <HAL_RCC_OscConfig+0x126>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	2b40      	cmp	r3, #64	; 0x40
 8002c5a:	d020      	beq.n	8002c9e <HAL_RCC_OscConfig+0x126>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	2b50      	cmp	r3, #80	; 0x50
 8002c62:	d01c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x126>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	2b60      	cmp	r3, #96	; 0x60
 8002c6a:	d018      	beq.n	8002c9e <HAL_RCC_OscConfig+0x126>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	2b70      	cmp	r3, #112	; 0x70
 8002c72:	d014      	beq.n	8002c9e <HAL_RCC_OscConfig+0x126>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d010      	beq.n	8002c9e <HAL_RCC_OscConfig+0x126>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	2b90      	cmp	r3, #144	; 0x90
 8002c82:	d00c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x126>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	2ba0      	cmp	r3, #160	; 0xa0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCC_OscConfig+0x126>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	2bb0      	cmp	r3, #176	; 0xb0
 8002c92:	d004      	beq.n	8002c9e <HAL_RCC_OscConfig+0x126>
 8002c94:	f240 11ad 	movw	r1, #429	; 0x1ad
 8002c98:	4875      	ldr	r0, [pc, #468]	; (8002e70 <HAL_RCC_OscConfig+0x2f8>)
 8002c9a:	f7fd fcd3 	bl	8000644 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x13c>
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	f040 808f 	bne.w	8002dca <HAL_RCC_OscConfig+0x252>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	f040 808b 	bne.w	8002dca <HAL_RCC_OscConfig+0x252>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cb4:	4b6f      	ldr	r3, [pc, #444]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d006      	beq.n	8002cce <HAL_RCC_OscConfig+0x156>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f000 bcc4 	b.w	8003656 <HAL_RCC_OscConfig+0xade>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	4b68      	ldr	r3, [pc, #416]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x170>
 8002cde:	4b65      	ldr	r3, [pc, #404]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce6:	e005      	b.n	8002cf4 <HAL_RCC_OscConfig+0x17c>
 8002ce8:	4b62      	ldr	r3, [pc, #392]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d224      	bcs.n	8002d42 <HAL_RCC_OscConfig+0x1ca>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fef5 	bl	8003aec <RCC_SetFlashLatencyFromMSIRange>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_RCC_OscConfig+0x196>
          {
            return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f000 bca4 	b.w	8003656 <HAL_RCC_OscConfig+0xade>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d0e:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a58      	ldr	r2, [pc, #352]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d14:	f043 0308 	orr.w	r3, r3, #8
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4953      	ldr	r1, [pc, #332]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d2c:	4b51      	ldr	r3, [pc, #324]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	494e      	ldr	r1, [pc, #312]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
 8002d40:	e026      	b.n	8002d90 <HAL_RCC_OscConfig+0x218>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d42:	4b4c      	ldr	r3, [pc, #304]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a4b      	ldr	r2, [pc, #300]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d48:	f043 0308 	orr.w	r3, r3, #8
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b49      	ldr	r3, [pc, #292]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	4946      	ldr	r1, [pc, #280]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d60:	4b44      	ldr	r3, [pc, #272]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	4941      	ldr	r1, [pc, #260]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10a      	bne.n	8002d90 <HAL_RCC_OscConfig+0x218>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 feb4 	bl	8003aec <RCC_SetFlashLatencyFromMSIRange>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_RCC_OscConfig+0x218>
            {
              return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f000 bc63 	b.w	8003656 <HAL_RCC_OscConfig+0xade>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d90:	f000 fdea 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8002d94:	4601      	mov	r1, r0
 8002d96:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	4a35      	ldr	r2, [pc, #212]	; (8002e78 <HAL_RCC_OscConfig+0x300>)
 8002da2:	5cd3      	ldrb	r3, [r2, r3]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	fa21 f303 	lsr.w	r3, r1, r3
 8002dac:	4a33      	ldr	r2, [pc, #204]	; (8002e7c <HAL_RCC_OscConfig+0x304>)
 8002dae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002db0:	4b33      	ldr	r3, [pc, #204]	; (8002e80 <HAL_RCC_OscConfig+0x308>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd ff55 	bl	8000c64 <HAL_InitTick>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d05f      	beq.n	8002e84 <HAL_RCC_OscConfig+0x30c>
        {
          return status;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	f000 bc46 	b.w	8003656 <HAL_RCC_OscConfig+0xade>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d033      	beq.n	8002e3a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dd2:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a27      	ldr	r2, [pc, #156]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dde:	f7fd ff91 	bl	8000d04 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002de4:	e009      	b.n	8002dfa <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002de6:	f7fd ff8d 	bl	8000d04 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d902      	bls.n	8002dfa <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	f000 bc2e 	b.w	8003656 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0ef      	beq.n	8002de6 <HAL_RCC_OscConfig+0x26e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e06:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002e0c:	f043 0308 	orr.w	r3, r3, #8
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4915      	ldr	r1, [pc, #84]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e24:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	4910      	ldr	r1, [pc, #64]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
 8002e38:	e025      	b.n	8002e86 <HAL_RCC_OscConfig+0x30e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a0d      	ldr	r2, [pc, #52]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e46:	f7fd ff5d 	bl	8000d04 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x2e8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e4e:	f7fd ff59 	bl	8000d04 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e3fa      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <HAL_RCC_OscConfig+0x2fc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2d6>
 8002e6c:	e00b      	b.n	8002e86 <HAL_RCC_OscConfig+0x30e>
 8002e6e:	bf00      	nop
 8002e70:	08007e1c 	.word	0x08007e1c
 8002e74:	40021000 	.word	0x40021000
 8002e78:	08008dac 	.word	0x08008dac
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	20000004 	.word	0x20000004
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d07e      	beq.n	8002f90 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00e      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x340>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea2:	d009      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x340>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eac:	d004      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x340>
 8002eae:	f240 2119 	movw	r1, #537	; 0x219
 8002eb2:	489b      	ldr	r0, [pc, #620]	; (8003120 <HAL_RCC_OscConfig+0x5a8>)
 8002eb4:	f7fd fbc6 	bl	8000644 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d005      	beq.n	8002eca <HAL_RCC_OscConfig+0x352>
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d10e      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x36a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x36a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eca:	4b96      	ldr	r3, [pc, #600]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d05b      	beq.n	8002f8e <HAL_RCC_OscConfig+0x416>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d157      	bne.n	8002f8e <HAL_RCC_OscConfig+0x416>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e3b9      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x382>
 8002eec:	4b8d      	ldr	r3, [pc, #564]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a8c      	ldr	r2, [pc, #560]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	e01d      	b.n	8002f36 <HAL_RCC_OscConfig+0x3be>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f02:	d10c      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3a6>
 8002f04:	4b87      	ldr	r3, [pc, #540]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a86      	ldr	r2, [pc, #536]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b84      	ldr	r3, [pc, #528]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a83      	ldr	r2, [pc, #524]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	e00b      	b.n	8002f36 <HAL_RCC_OscConfig+0x3be>
 8002f1e:	4b81      	ldr	r3, [pc, #516]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a80      	ldr	r2, [pc, #512]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b7e      	ldr	r3, [pc, #504]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a7d      	ldr	r2, [pc, #500]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d013      	beq.n	8002f66 <HAL_RCC_OscConfig+0x3ee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7fd fee1 	bl	8000d04 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x3e0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f46:	f7fd fedd 	bl	8000d04 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b64      	cmp	r3, #100	; 0x64
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x3e0>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e37e      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f58:	4b72      	ldr	r3, [pc, #456]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x3ce>
 8002f64:	e014      	b.n	8002f90 <HAL_RCC_OscConfig+0x418>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fd fecd 	bl	8000d04 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x408>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6e:	f7fd fec9 	bl	8000d04 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	; 0x64
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e36a      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f80:	4b68      	ldr	r3, [pc, #416]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f0      	bne.n	8002f6e <HAL_RCC_OscConfig+0x3f6>
 8002f8c:	e000      	b.n	8002f90 <HAL_RCC_OscConfig+0x418>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d077      	beq.n	800308c <HAL_RCC_OscConfig+0x514>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x440>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fac:	d004      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x440>
 8002fae:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8002fb2:	485b      	ldr	r0, [pc, #364]	; (8003120 <HAL_RCC_OscConfig+0x5a8>)
 8002fb4:	f7fd fb46 	bl	8000644 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8002fbe:	d904      	bls.n	8002fca <HAL_RCC_OscConfig+0x452>
 8002fc0:	f240 214d 	movw	r1, #589	; 0x24d
 8002fc4:	4856      	ldr	r0, [pc, #344]	; (8003120 <HAL_RCC_OscConfig+0x5a8>)
 8002fc6:	f7fd fb3d 	bl	8000644 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_OscConfig+0x464>
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d119      	bne.n	800300a <HAL_RCC_OscConfig+0x492>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d116      	bne.n	800300a <HAL_RCC_OscConfig+0x492>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fdc:	4b51      	ldr	r3, [pc, #324]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x47c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e330      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b4b      	ldr	r3, [pc, #300]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	4948      	ldr	r1, [pc, #288]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003008:	e040      	b.n	800308c <HAL_RCC_OscConfig+0x514>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d023      	beq.n	800305a <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003012:	4b44      	ldr	r3, [pc, #272]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a43      	ldr	r2, [pc, #268]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fd fe71 	bl	8000d04 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003026:	f7fd fe6d 	bl	8000d04 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e30e      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003038:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x4ae>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003044:	4b37      	ldr	r3, [pc, #220]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	061b      	lsls	r3, r3, #24
 8003052:	4934      	ldr	r1, [pc, #208]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]
 8003058:	e018      	b.n	800308c <HAL_RCC_OscConfig+0x514>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305a:	4b32      	ldr	r3, [pc, #200]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a31      	ldr	r2, [pc, #196]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8003060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fd fe4d 	bl	8000d04 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x508>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306e:	f7fd fe49 	bl	8000d04 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x508>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e2ea      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003080:	4b28      	ldr	r3, [pc, #160]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f0      	bne.n	800306e <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d04e      	beq.n	8003136 <HAL_RCC_OscConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCC_OscConfig+0x53a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d004      	beq.n	80030b2 <HAL_RCC_OscConfig+0x53a>
 80030a8:	f240 218d 	movw	r1, #653	; 0x28d
 80030ac:	481c      	ldr	r0, [pc, #112]	; (8003120 <HAL_RCC_OscConfig+0x5a8>)
 80030ae:	f7fd fac9 	bl	8000644 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01c      	beq.n	80030f4 <HAL_RCC_OscConfig+0x57c>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ba:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 80030bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c0:	4a18      	ldr	r2, [pc, #96]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fd fe1b 	bl	8000d04 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d2:	f7fd fe17 	bl	8000d04 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e2b8      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 80030e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0ef      	beq.n	80030d2 <HAL_RCC_OscConfig+0x55a>
 80030f2:	e020      	b.n	8003136 <HAL_RCC_OscConfig+0x5be>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 80030f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_RCC_OscConfig+0x5ac>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fd fdfe 	bl	8000d04 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800310a:	e00d      	b.n	8003128 <HAL_RCC_OscConfig+0x5b0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310c:	f7fd fdfa 	bl	8000d04 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d906      	bls.n	8003128 <HAL_RCC_OscConfig+0x5b0>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e29b      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
 800311e:	bf00      	nop
 8003120:	08007e1c 	.word	0x08007e1c
 8003124:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003128:	4b84      	ldr	r3, [pc, #528]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 800312a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1ea      	bne.n	800310c <HAL_RCC_OscConfig+0x594>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80b2 	beq.w	80032a8 <HAL_RCC_OscConfig+0x730>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003144:	2300      	movs	r3, #0
 8003146:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00c      	beq.n	800316a <HAL_RCC_OscConfig+0x5f2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d008      	beq.n	800316a <HAL_RCC_OscConfig+0x5f2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b05      	cmp	r3, #5
 800315e:	d004      	beq.n	800316a <HAL_RCC_OscConfig+0x5f2>
 8003160:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003164:	4876      	ldr	r0, [pc, #472]	; (8003340 <HAL_RCC_OscConfig+0x7c8>)
 8003166:	f7fd fa6d 	bl	8000644 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800316a:	4b74      	ldr	r3, [pc, #464]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <HAL_RCC_OscConfig+0x61a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003176:	4b71      	ldr	r3, [pc, #452]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	4a70      	ldr	r2, [pc, #448]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 800317c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003180:	6593      	str	r3, [r2, #88]	; 0x58
 8003182:	4b6e      	ldr	r3, [pc, #440]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318e:	2301      	movs	r3, #1
 8003190:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003192:	4b6c      	ldr	r3, [pc, #432]	; (8003344 <HAL_RCC_OscConfig+0x7cc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d118      	bne.n	80031d0 <HAL_RCC_OscConfig+0x658>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800319e:	4b69      	ldr	r3, [pc, #420]	; (8003344 <HAL_RCC_OscConfig+0x7cc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a68      	ldr	r2, [pc, #416]	; (8003344 <HAL_RCC_OscConfig+0x7cc>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031aa:	f7fd fdab 	bl	8000d04 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b2:	f7fd fda7 	bl	8000d04 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e248      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c4:	4b5f      	ldr	r3, [pc, #380]	; (8003344 <HAL_RCC_OscConfig+0x7cc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x63a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d108      	bne.n	80031ea <HAL_RCC_OscConfig+0x672>
 80031d8:	4b58      	ldr	r3, [pc, #352]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	4a57      	ldr	r2, [pc, #348]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031e8:	e024      	b.n	8003234 <HAL_RCC_OscConfig+0x6bc>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b05      	cmp	r3, #5
 80031f0:	d110      	bne.n	8003214 <HAL_RCC_OscConfig+0x69c>
 80031f2:	4b52      	ldr	r3, [pc, #328]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	4a50      	ldr	r2, [pc, #320]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003202:	4b4e      	ldr	r3, [pc, #312]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	4a4c      	ldr	r2, [pc, #304]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003212:	e00f      	b.n	8003234 <HAL_RCC_OscConfig+0x6bc>
 8003214:	4b49      	ldr	r3, [pc, #292]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	4a48      	ldr	r2, [pc, #288]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003224:	4b45      	ldr	r3, [pc, #276]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	4a44      	ldr	r2, [pc, #272]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d016      	beq.n	800326a <HAL_RCC_OscConfig+0x6f2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fd fd62 	bl	8000d04 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x6e2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fd fd5e 	bl	8000d04 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x6e2>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e1fd      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325a:	4b38      	ldr	r3, [pc, #224]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ed      	beq.n	8003244 <HAL_RCC_OscConfig+0x6cc>
 8003268:	e015      	b.n	8003296 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fd fd4b 	bl	8000d04 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_OscConfig+0x710>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fd fd47 	bl	8000d04 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x710>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e1e6      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003288:	4b2c      	ldr	r3, [pc, #176]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1ed      	bne.n	8003272 <HAL_RCC_OscConfig+0x6fa>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003296:	7ffb      	ldrb	r3, [r7, #31]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_RCC_OscConfig+0x730>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329c:	4b27      	ldr	r3, [pc, #156]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	4a26      	ldr	r2, [pc, #152]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 80032a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d050      	beq.n	8003356 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_RCC_OscConfig+0x756>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d004      	beq.n	80032ce <HAL_RCC_OscConfig+0x756>
 80032c4:	f240 3145 	movw	r1, #837	; 0x345
 80032c8:	481d      	ldr	r0, [pc, #116]	; (8003340 <HAL_RCC_OscConfig+0x7c8>)
 80032ca:	f7fd f9bb 	bl	8000644 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d01c      	beq.n	8003310 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 80032d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032dc:	4a17      	ldr	r2, [pc, #92]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e6:	f7fd fd0d 	bl	8000d04 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x788>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ee:	f7fd fd09 	bl	8000d04 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x788>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e1aa      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003300:	4b0e      	ldr	r3, [pc, #56]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 8003302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0ef      	beq.n	80032ee <HAL_RCC_OscConfig+0x776>
 800330e:	e022      	b.n	8003356 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 8003312:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003316:	4a09      	ldr	r2, [pc, #36]	; (800333c <HAL_RCC_OscConfig+0x7c4>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fd fcf0 	bl	8000d04 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003326:	e00f      	b.n	8003348 <HAL_RCC_OscConfig+0x7d0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003328:	f7fd fcec 	bl	8000d04 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d908      	bls.n	8003348 <HAL_RCC_OscConfig+0x7d0>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e18d      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
 8003340:	08007e1c 	.word	0x08007e1c
 8003344:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003348:	4ba2      	ldr	r3, [pc, #648]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 800334a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e8      	bne.n	8003328 <HAL_RCC_OscConfig+0x7b0>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00c      	beq.n	8003378 <HAL_RCC_OscConfig+0x800>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	2b01      	cmp	r3, #1
 8003364:	d008      	beq.n	8003378 <HAL_RCC_OscConfig+0x800>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	2b02      	cmp	r3, #2
 800336c:	d004      	beq.n	8003378 <HAL_RCC_OscConfig+0x800>
 800336e:	f240 316e 	movw	r1, #878	; 0x36e
 8003372:	4899      	ldr	r0, [pc, #612]	; (80035d8 <HAL_RCC_OscConfig+0xa60>)
 8003374:	f7fd f966 	bl	8000644 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8169 	beq.w	8003654 <HAL_RCC_OscConfig+0xadc>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	2b02      	cmp	r3, #2
 8003388:	f040 8131 	bne.w	80035ee <HAL_RCC_OscConfig+0xa76>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d010      	beq.n	80033b6 <HAL_RCC_OscConfig+0x83e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	2b01      	cmp	r3, #1
 800339a:	d00c      	beq.n	80033b6 <HAL_RCC_OscConfig+0x83e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_OscConfig+0x83e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d004      	beq.n	80033b6 <HAL_RCC_OscConfig+0x83e>
 80033ac:	f240 3176 	movw	r1, #886	; 0x376
 80033b0:	4889      	ldr	r0, [pc, #548]	; (80035d8 <HAL_RCC_OscConfig+0xa60>)
 80033b2:	f7fd f947 	bl	8000644 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_RCC_OscConfig+0x84e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d904      	bls.n	80033d0 <HAL_RCC_OscConfig+0x858>
 80033c6:	f240 3177 	movw	r1, #887	; 0x377
 80033ca:	4883      	ldr	r0, [pc, #524]	; (80035d8 <HAL_RCC_OscConfig+0xa60>)
 80033cc:	f7fd f93a 	bl	8000644 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	2b07      	cmp	r3, #7
 80033d6:	d903      	bls.n	80033e0 <HAL_RCC_OscConfig+0x868>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033dc:	2b56      	cmp	r3, #86	; 0x56
 80033de:	d904      	bls.n	80033ea <HAL_RCC_OscConfig+0x872>
 80033e0:	f44f 715e 	mov.w	r1, #888	; 0x378
 80033e4:	487c      	ldr	r0, [pc, #496]	; (80035d8 <HAL_RCC_OscConfig+0xa60>)
 80033e6:	f7fd f92d 	bl	8000644 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d903      	bls.n	80033fa <HAL_RCC_OscConfig+0x882>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	2b1f      	cmp	r3, #31
 80033f8:	d904      	bls.n	8003404 <HAL_RCC_OscConfig+0x88c>
 80033fa:	f240 317a 	movw	r1, #890	; 0x37a
 80033fe:	4876      	ldr	r0, [pc, #472]	; (80035d8 <HAL_RCC_OscConfig+0xa60>)
 8003400:	f7fd f920 	bl	8000644 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	2b02      	cmp	r3, #2
 800340a:	d010      	beq.n	800342e <HAL_RCC_OscConfig+0x8b6>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	2b04      	cmp	r3, #4
 8003412:	d00c      	beq.n	800342e <HAL_RCC_OscConfig+0x8b6>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	2b06      	cmp	r3, #6
 800341a:	d008      	beq.n	800342e <HAL_RCC_OscConfig+0x8b6>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	2b08      	cmp	r3, #8
 8003422:	d004      	beq.n	800342e <HAL_RCC_OscConfig+0x8b6>
 8003424:	f44f 715f 	mov.w	r1, #892	; 0x37c
 8003428:	486b      	ldr	r0, [pc, #428]	; (80035d8 <HAL_RCC_OscConfig+0xa60>)
 800342a:	f7fd f90b 	bl	8000644 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b02      	cmp	r3, #2
 8003434:	d010      	beq.n	8003458 <HAL_RCC_OscConfig+0x8e0>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	2b04      	cmp	r3, #4
 800343c:	d00c      	beq.n	8003458 <HAL_RCC_OscConfig+0x8e0>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2b06      	cmp	r3, #6
 8003444:	d008      	beq.n	8003458 <HAL_RCC_OscConfig+0x8e0>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2b08      	cmp	r3, #8
 800344c:	d004      	beq.n	8003458 <HAL_RCC_OscConfig+0x8e0>
 800344e:	f240 317d 	movw	r1, #893	; 0x37d
 8003452:	4861      	ldr	r0, [pc, #388]	; (80035d8 <HAL_RCC_OscConfig+0xa60>)
 8003454:	f7fd f8f6 	bl	8000644 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003458:	4b5e      	ldr	r3, [pc, #376]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0203 	and.w	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	429a      	cmp	r2, r3
 800346a:	d12c      	bne.n	80034c6 <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	3b01      	subs	r3, #1
 8003478:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d123      	bne.n	80034c6 <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003488:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d11b      	bne.n	80034c6 <HAL_RCC_OscConfig+0x94e>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d113      	bne.n	80034c6 <HAL_RCC_OscConfig+0x94e>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	3b01      	subs	r3, #1
 80034ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d109      	bne.n	80034c6 <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	3b01      	subs	r3, #1
 80034c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d067      	beq.n	8003596 <HAL_RCC_OscConfig+0xa1e>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b0c      	cmp	r3, #12
 80034ca:	d062      	beq.n	8003592 <HAL_RCC_OscConfig+0xa1a>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034cc:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_OscConfig+0x964>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0bc      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034dc:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a3c      	ldr	r2, [pc, #240]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 80034e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e8:	f7fd fc0c 	bl	8000d04 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x98a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fd fc08 	bl	8000d04 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x98a>
              {
                return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0a9      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003502:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x978>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350e:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	4b32      	ldr	r3, [pc, #200]	; (80035dc <HAL_RCC_OscConfig+0xa64>)
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800351e:	3a01      	subs	r2, #1
 8003520:	0112      	lsls	r2, r2, #4
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003528:	0212      	lsls	r2, r2, #8
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003530:	0852      	lsrs	r2, r2, #1
 8003532:	3a01      	subs	r2, #1
 8003534:	0552      	lsls	r2, r2, #21
 8003536:	4311      	orrs	r1, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800353c:	0852      	lsrs	r2, r2, #1
 800353e:	3a01      	subs	r2, #1
 8003540:	0652      	lsls	r2, r2, #25
 8003542:	4311      	orrs	r1, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003548:	06d2      	lsls	r2, r2, #27
 800354a:	430a      	orrs	r2, r1
 800354c:	4921      	ldr	r1, [pc, #132]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 800354e:	4313      	orrs	r3, r2
 8003550:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1f      	ldr	r2, [pc, #124]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 8003558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800355c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 8003564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003568:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800356a:	f7fd fbcb 	bl	8000d04 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0xa0c>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fd fbc7 	bl	8000d04 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0xa0c>
              {
                return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e068      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x9fa>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003590:	e060      	b.n	8003654 <HAL_RCC_OscConfig+0xadc>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e05f      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d158      	bne.n	8003654 <HAL_RCC_OscConfig+0xadc>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035a2:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a0b      	ldr	r2, [pc, #44]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 80035a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ac:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035ae:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	4a08      	ldr	r2, [pc, #32]	; (80035d4 <HAL_RCC_OscConfig+0xa5c>)
 80035b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035ba:	f7fd fba3 	bl	8000d04 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c0:	e00e      	b.n	80035e0 <HAL_RCC_OscConfig+0xa68>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fd fb9f 	bl	8000d04 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d907      	bls.n	80035e0 <HAL_RCC_OscConfig+0xa68>
            {
              return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e040      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
 80035d4:	40021000 	.word	0x40021000
 80035d8:	08007e1c 	.word	0x08007e1c
 80035dc:	019d808c 	.word	0x019d808c
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e0:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <HAL_RCC_OscConfig+0xae8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0ea      	beq.n	80035c2 <HAL_RCC_OscConfig+0xa4a>
 80035ec:	e032      	b.n	8003654 <HAL_RCC_OscConfig+0xadc>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	d02d      	beq.n	8003650 <HAL_RCC_OscConfig+0xad8>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_RCC_OscConfig+0xae8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a19      	ldr	r2, [pc, #100]	; (8003660 <HAL_RCC_OscConfig+0xae8>)
 80035fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035fe:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003600:	4b17      	ldr	r3, [pc, #92]	; (8003660 <HAL_RCC_OscConfig+0xae8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d105      	bne.n	8003618 <HAL_RCC_OscConfig+0xaa0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800360c:	4b14      	ldr	r3, [pc, #80]	; (8003660 <HAL_RCC_OscConfig+0xae8>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a13      	ldr	r2, [pc, #76]	; (8003660 <HAL_RCC_OscConfig+0xae8>)
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003618:	4b11      	ldr	r3, [pc, #68]	; (8003660 <HAL_RCC_OscConfig+0xae8>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a10      	ldr	r2, [pc, #64]	; (8003660 <HAL_RCC_OscConfig+0xae8>)
 800361e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fd fb6c 	bl	8000d04 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xaca>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7fd fb68 	bl	8000d04 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xaca>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e009      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003642:	4b07      	ldr	r3, [pc, #28]	; (8003660 <HAL_RCC_OscConfig+0xae8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0xab8>
 800364e:	e001      	b.n	8003654 <HAL_RCC_OscConfig+0xadc>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0xade>
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000

08003664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e168      	b.n	800394a <HAL_RCC_ClockConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_RCC_ClockConfig+0x24>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b0f      	cmp	r3, #15
 8003686:	d904      	bls.n	8003692 <HAL_RCC_ClockConfig+0x2e>
 8003688:	f240 4162 	movw	r1, #1122	; 0x462
 800368c:	4873      	ldr	r0, [pc, #460]	; (800385c <HAL_RCC_ClockConfig+0x1f8>)
 800368e:	f7fc ffd9 	bl	8000644 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d010      	beq.n	80036ba <HAL_RCC_ClockConfig+0x56>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d00d      	beq.n	80036ba <HAL_RCC_ClockConfig+0x56>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d00a      	beq.n	80036ba <HAL_RCC_ClockConfig+0x56>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d007      	beq.n	80036ba <HAL_RCC_ClockConfig+0x56>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d004      	beq.n	80036ba <HAL_RCC_ClockConfig+0x56>
 80036b0:	f240 4163 	movw	r1, #1123	; 0x463
 80036b4:	4869      	ldr	r0, [pc, #420]	; (800385c <HAL_RCC_ClockConfig+0x1f8>)
 80036b6:	f7fc ffc5 	bl	8000644 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036ba:	4b69      	ldr	r3, [pc, #420]	; (8003860 <HAL_RCC_ClockConfig+0x1fc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d910      	bls.n	80036ea <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c8:	4b65      	ldr	r3, [pc, #404]	; (8003860 <HAL_RCC_ClockConfig+0x1fc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 0207 	bic.w	r2, r3, #7
 80036d0:	4963      	ldr	r1, [pc, #396]	; (8003860 <HAL_RCC_ClockConfig+0x1fc>)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d8:	4b61      	ldr	r3, [pc, #388]	; (8003860 <HAL_RCC_ClockConfig+0x1fc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e12f      	b.n	800394a <HAL_RCC_ClockConfig+0x2e6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d061      	beq.n	80037ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d010      	beq.n	8003720 <HAL_RCC_ClockConfig+0xbc>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d00c      	beq.n	8003720 <HAL_RCC_ClockConfig+0xbc>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d008      	beq.n	8003720 <HAL_RCC_ClockConfig+0xbc>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d004      	beq.n	8003720 <HAL_RCC_ClockConfig+0xbc>
 8003716:	f240 417a 	movw	r1, #1146	; 0x47a
 800371a:	4850      	ldr	r0, [pc, #320]	; (800385c <HAL_RCC_ClockConfig+0x1f8>)
 800371c:	f7fc ff92 	bl	8000644 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d107      	bne.n	8003738 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003728:	4b4e      	ldr	r3, [pc, #312]	; (8003864 <HAL_RCC_ClockConfig+0x200>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d121      	bne.n	8003778 <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e108      	b.n	800394a <HAL_RCC_ClockConfig+0x2e6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d107      	bne.n	8003750 <HAL_RCC_ClockConfig+0xec>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003740:	4b48      	ldr	r3, [pc, #288]	; (8003864 <HAL_RCC_ClockConfig+0x200>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d115      	bne.n	8003778 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0fc      	b.n	800394a <HAL_RCC_ClockConfig+0x2e6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d107      	bne.n	8003768 <HAL_RCC_ClockConfig+0x104>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003758:	4b42      	ldr	r3, [pc, #264]	; (8003864 <HAL_RCC_ClockConfig+0x200>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0f0      	b.n	800394a <HAL_RCC_ClockConfig+0x2e6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003768:	4b3e      	ldr	r3, [pc, #248]	; (8003864 <HAL_RCC_ClockConfig+0x200>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0e8      	b.n	800394a <HAL_RCC_ClockConfig+0x2e6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003778:	4b3a      	ldr	r3, [pc, #232]	; (8003864 <HAL_RCC_ClockConfig+0x200>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 0203 	bic.w	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4937      	ldr	r1, [pc, #220]	; (8003864 <HAL_RCC_ClockConfig+0x200>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378a:	f7fd fabb 	bl	8000d04 <HAL_GetTick>
 800378e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003790:	e00a      	b.n	80037a8 <HAL_RCC_ClockConfig+0x144>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003792:	f7fd fab7 	bl	8000d04 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e0d0      	b.n	800394a <HAL_RCC_ClockConfig+0x2e6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a8:	4b2e      	ldr	r3, [pc, #184]	; (8003864 <HAL_RCC_ClockConfig+0x200>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 020c 	and.w	r2, r3, #12
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d1eb      	bne.n	8003792 <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d031      	beq.n	800382a <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d024      	beq.n	8003818 <HAL_RCC_ClockConfig+0x1b4>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b80      	cmp	r3, #128	; 0x80
 80037d4:	d020      	beq.n	8003818 <HAL_RCC_ClockConfig+0x1b4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b90      	cmp	r3, #144	; 0x90
 80037dc:	d01c      	beq.n	8003818 <HAL_RCC_ClockConfig+0x1b4>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2ba0      	cmp	r3, #160	; 0xa0
 80037e4:	d018      	beq.n	8003818 <HAL_RCC_ClockConfig+0x1b4>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2bb0      	cmp	r3, #176	; 0xb0
 80037ec:	d014      	beq.n	8003818 <HAL_RCC_ClockConfig+0x1b4>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2bc0      	cmp	r3, #192	; 0xc0
 80037f4:	d010      	beq.n	8003818 <HAL_RCC_ClockConfig+0x1b4>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2bd0      	cmp	r3, #208	; 0xd0
 80037fc:	d00c      	beq.n	8003818 <HAL_RCC_ClockConfig+0x1b4>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2be0      	cmp	r3, #224	; 0xe0
 8003804:	d008      	beq.n	8003818 <HAL_RCC_ClockConfig+0x1b4>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2bf0      	cmp	r3, #240	; 0xf0
 800380c:	d004      	beq.n	8003818 <HAL_RCC_ClockConfig+0x1b4>
 800380e:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8003812:	4812      	ldr	r0, [pc, #72]	; (800385c <HAL_RCC_ClockConfig+0x1f8>)
 8003814:	f7fc ff16 	bl	8000644 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003818:	4b12      	ldr	r3, [pc, #72]	; (8003864 <HAL_RCC_ClockConfig+0x200>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	490f      	ldr	r1, [pc, #60]	; (8003864 <HAL_RCC_ClockConfig+0x200>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <HAL_RCC_ClockConfig+0x1fc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d217      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x204>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x1fc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 0207 	bic.w	r2, r3, #7
 8003840:	4907      	ldr	r1, [pc, #28]	; (8003860 <HAL_RCC_ClockConfig+0x1fc>)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_RCC_ClockConfig+0x1fc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d008      	beq.n	8003868 <HAL_RCC_ClockConfig+0x204>
    {
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e077      	b.n	800394a <HAL_RCC_ClockConfig+0x2e6>
 800385a:	bf00      	nop
 800385c:	08007e1c 	.word	0x08007e1c
 8003860:	40022000 	.word	0x40022000
 8003864:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d025      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x25c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d018      	beq.n	80038ae <HAL_RCC_ClockConfig+0x24a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003884:	d013      	beq.n	80038ae <HAL_RCC_ClockConfig+0x24a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800388e:	d00e      	beq.n	80038ae <HAL_RCC_ClockConfig+0x24a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003898:	d009      	beq.n	80038ae <HAL_RCC_ClockConfig+0x24a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038a2:	d004      	beq.n	80038ae <HAL_RCC_ClockConfig+0x24a>
 80038a4:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 80038a8:	482a      	ldr	r0, [pc, #168]	; (8003954 <HAL_RCC_ClockConfig+0x2f0>)
 80038aa:	f7fc fecb 	bl	8000644 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ae:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <HAL_RCC_ClockConfig+0x2f4>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	4927      	ldr	r1, [pc, #156]	; (8003958 <HAL_RCC_ClockConfig+0x2f4>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d026      	beq.n	800391a <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d018      	beq.n	8003906 <HAL_RCC_ClockConfig+0x2a2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038dc:	d013      	beq.n	8003906 <HAL_RCC_ClockConfig+0x2a2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80038e6:	d00e      	beq.n	8003906 <HAL_RCC_ClockConfig+0x2a2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038f0:	d009      	beq.n	8003906 <HAL_RCC_ClockConfig+0x2a2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038fa:	d004      	beq.n	8003906 <HAL_RCC_ClockConfig+0x2a2>
 80038fc:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8003900:	4814      	ldr	r0, [pc, #80]	; (8003954 <HAL_RCC_ClockConfig+0x2f0>)
 8003902:	f7fc fe9f 	bl	8000644 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003906:	4b14      	ldr	r3, [pc, #80]	; (8003958 <HAL_RCC_ClockConfig+0x2f4>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4910      	ldr	r1, [pc, #64]	; (8003958 <HAL_RCC_ClockConfig+0x2f4>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800391a:	f000 f825 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 800391e:	4601      	mov	r1, r0
 8003920:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <HAL_RCC_ClockConfig+0x2f4>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	4a0c      	ldr	r2, [pc, #48]	; (800395c <HAL_RCC_ClockConfig+0x2f8>)
 800392c:	5cd3      	ldrb	r3, [r2, r3]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	fa21 f303 	lsr.w	r3, r1, r3
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <HAL_RCC_ClockConfig+0x2fc>)
 8003938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <HAL_RCC_ClockConfig+0x300>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd f990 	bl	8000c64 <HAL_InitTick>
 8003944:	4603      	mov	r3, r0
 8003946:	72fb      	strb	r3, [r7, #11]

  return status;
 8003948:	7afb      	ldrb	r3, [r7, #11]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	08007e1c 	.word	0x08007e1c
 8003958:	40021000 	.word	0x40021000
 800395c:	08008dac 	.word	0x08008dac
 8003960:	20000000 	.word	0x20000000
 8003964:	20000004 	.word	0x20000004

08003968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	b089      	sub	sp, #36	; 0x24
 800396c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	2300      	movs	r3, #0
 8003974:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003976:	4b3d      	ldr	r3, [pc, #244]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003980:	4b3a      	ldr	r3, [pc, #232]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x34>
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d121      	bne.n	80039da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d11e      	bne.n	80039da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800399c:	4b33      	ldr	r3, [pc, #204]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x104>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039a8:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x104>)
 80039aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	e005      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039b8:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x104>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039c4:	4a2a      	ldr	r2, [pc, #168]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10d      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d102      	bne.n	80039e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039e0:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	e004      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039ec:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x110>)
 80039ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d133      	bne.n	8003a5e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039f6:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x104>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d002      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0xa4>
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d003      	beq.n	8003a12 <HAL_RCC_GetSysClockFreq+0xaa>
 8003a0a:	e005      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a0c:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a0e:	617b      	str	r3, [r7, #20]
      break;
 8003a10:	e005      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a12:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a14:	617b      	str	r3, [r7, #20]
      break;
 8003a16:	e002      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	617b      	str	r3, [r7, #20]
      break;
 8003a1c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a1e:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	3301      	adds	r3, #1
 8003a2a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	fb02 f203 	mul.w	r2, r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a42:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a44:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	0e5b      	lsrs	r3, r3, #25
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3724      	adds	r7, #36	; 0x24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	08008dc4 	.word	0x08008dc4
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	007a1200 	.word	0x007a1200

08003a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000000 	.word	0x20000000

08003a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a98:	f7ff fff0 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003a9c:	4601      	mov	r1, r0
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0a1b      	lsrs	r3, r3, #8
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4a04      	ldr	r2, [pc, #16]	; (8003abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aaa:	5cd3      	ldrb	r3, [r2, r3]
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	08008dbc 	.word	0x08008dbc

08003ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ac4:	f7ff ffda 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003ac8:	4601      	mov	r1, r0
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0adb      	lsrs	r3, r3, #11
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4a04      	ldr	r2, [pc, #16]	; (8003ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ad6:	5cd3      	ldrb	r3, [r2, r3]
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	08008dbc 	.word	0x08008dbc

08003aec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003af4:	2300      	movs	r3, #0
 8003af6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003af8:	4b2a      	ldr	r3, [pc, #168]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b04:	f7fe ffc8 	bl	8002a98 <HAL_PWREx_GetVoltageRange>
 8003b08:	6178      	str	r0, [r7, #20]
 8003b0a:	e014      	b.n	8003b36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b0c:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b10:	4a24      	ldr	r2, [pc, #144]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b16:	6593      	str	r3, [r2, #88]	; 0x58
 8003b18:	4b22      	ldr	r3, [pc, #136]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b24:	f7fe ffb8 	bl	8002a98 <HAL_PWREx_GetVoltageRange>
 8003b28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b3c:	d10b      	bne.n	8003b56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b80      	cmp	r3, #128	; 0x80
 8003b42:	d919      	bls.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2ba0      	cmp	r3, #160	; 0xa0
 8003b48:	d902      	bls.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	e013      	b.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b50:	2301      	movs	r3, #1
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	e010      	b.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b80      	cmp	r3, #128	; 0x80
 8003b5a:	d902      	bls.n	8003b62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	e00a      	b.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b80      	cmp	r3, #128	; 0x80
 8003b66:	d102      	bne.n	8003b6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b68:	2302      	movs	r3, #2
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	e004      	b.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b70      	cmp	r3, #112	; 0x70
 8003b72:	d101      	bne.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b74:	2301      	movs	r3, #1
 8003b76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f023 0207 	bic.w	r2, r3, #7
 8003b80:	4909      	ldr	r1, [pc, #36]	; (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b88:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d001      	beq.n	8003b9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40022000 	.word	0x40022000

08003bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bb8:	2300      	movs	r3, #0
 8003bba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d14b      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d145      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d13f      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d139      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d133      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d12d      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d127      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d121      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d11b      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d115      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10f      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d103      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c58:	21cb      	movs	r1, #203	; 0xcb
 8003c5a:	487c      	ldr	r0, [pc, #496]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003c5c:	f7fc fcf2 	bl	8000644 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d041      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c7c:	d008      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c86:	d003      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003c88:	21d3      	movs	r1, #211	; 0xd3
 8003c8a:	4870      	ldr	r0, [pc, #448]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003c8c:	f7fc fcda 	bl	8000644 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c98:	d005      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003c9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c9e:	d015      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x120>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003ca4:	e00f      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003ca6:	4b6a      	ldr	r3, [pc, #424]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	4a69      	ldr	r2, [pc, #420]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb2:	e00c      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x122>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fad8 	bl	8004270 <RCCEx_PLLSAI1_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x122>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x122>
      break;
 8003ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cd4:	4b5e      	ldr	r3, [pc, #376]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	495b      	ldr	r1, [pc, #364]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cea:	e001      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80b8 	beq.w	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d013      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d12:	d00e      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1c:	d009      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d26:	d004      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d28:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003d2c:	4847      	ldr	r0, [pc, #284]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003d2e:	f7fc fc89 	bl	8000644 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d32:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d48:	4b41      	ldr	r3, [pc, #260]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	4a40      	ldr	r2, [pc, #256]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d52:	6593      	str	r3, [r2, #88]	; 0x58
 8003d54:	4b3e      	ldr	r3, [pc, #248]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d60:	2301      	movs	r3, #1
 8003d62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d64:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a3a      	ldr	r2, [pc, #232]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d70:	f7fc ffc8 	bl	8000d04 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d76:	e009      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fc ffc4 	bl	8000d04 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d902      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        ret = HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	74fb      	strb	r3, [r7, #19]
        break;
 8003d8a:	e005      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d8c:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ef      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      }
    }

    if(ret == HAL_OK)
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d15c      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01e      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d019      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dba:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dcc:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003de6:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d016      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fc ff84 	bl	8000d04 <HAL_GetTick>
 8003dfc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fc ff80 	bl	8000d04 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d902      	bls.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
          {
            ret = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	74fb      	strb	r3, [r7, #19]
            break;
 8003e16:	e006      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e18:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ec      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x254>
          }
        }
      }

      if(ret == HAL_OK)
 8003e26:	7cfb      	ldrb	r3, [r7, #19]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10b      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x298>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e2c:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3a:	4905      	ldr	r1, [pc, #20]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e42:	e00b      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	74bb      	strb	r3, [r7, #18]
 8003e48:	e008      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003e4a:	bf00      	nop
 8003e4c:	08007e54 	.word	0x08007e54
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e5c:	7c7b      	ldrb	r3, [r7, #17]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d105      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e62:	4ba5      	ldr	r3, [pc, #660]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	4aa4      	ldr	r2, [pc, #656]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01f      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d010      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d00c      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d008      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d004      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003e9a:	f240 119b 	movw	r1, #411	; 0x19b
 8003e9e:	4897      	ldr	r0, [pc, #604]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ea0:	f7fc fbd0 	bl	8000644 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ea4:	4b94      	ldr	r3, [pc, #592]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	f023 0203 	bic.w	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4991      	ldr	r1, [pc, #580]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01f      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d010      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	2b0c      	cmp	r3, #12
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d004      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ee6:	f240 11a5 	movw	r1, #421	; 0x1a5
 8003eea:	4884      	ldr	r0, [pc, #528]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003eec:	f7fc fbaa 	bl	8000644 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ef0:	4b81      	ldr	r3, [pc, #516]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	f023 020c 	bic.w	r2, r3, #12
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	497e      	ldr	r1, [pc, #504]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d022      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d013      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f22:	d00e      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f2c:	d009      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f36:	d004      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8003f38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003f3c:	486f      	ldr	r0, [pc, #444]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f3e:	f7fc fb81 	bl	8000644 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f42:	4b6d      	ldr	r3, [pc, #436]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	4969      	ldr	r1, [pc, #420]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d022      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d013      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f74:	d00e      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f7e:	d009      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f88:	d004      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f8a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003f8e:	485b      	ldr	r0, [pc, #364]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f90:	f7fc fb58 	bl	8000644 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f94:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa2:	4955      	ldr	r1, [pc, #340]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d022      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x450>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d013      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fd0:	d009      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fda:	d004      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fdc:	f240 11e9 	movw	r1, #489	; 0x1e9
 8003fe0:	4846      	ldr	r0, [pc, #280]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003fe2:	f7fc fb2f 	bl	8000644 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fe6:	4b44      	ldr	r3, [pc, #272]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	4940      	ldr	r1, [pc, #256]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01d      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x498>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00e      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004018:	d009      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x482>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004022:	d004      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004024:	f240 11f1 	movw	r1, #497	; 0x1f1
 8004028:	4834      	ldr	r0, [pc, #208]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800402a:	f7fc fb0b 	bl	8000644 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800402e:	4b32      	ldr	r3, [pc, #200]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	492e      	ldr	r1, [pc, #184]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01d      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00e      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004060:	d009      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800406a:	d004      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800406c:	f240 2109 	movw	r1, #521	; 0x209
 8004070:	4822      	ldr	r0, [pc, #136]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004072:	f7fc fae7 	bl	8000644 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004076:	4b20      	ldr	r3, [pc, #128]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	491c      	ldr	r1, [pc, #112]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d045      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d013      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040a8:	d00e      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040b2:	d009      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80040bc:	d004      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80040be:	f240 2122 	movw	r1, #546	; 0x222
 80040c2:	480e      	ldr	r0, [pc, #56]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80040c4:	f7fc fabe 	bl	8000644 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	4908      	ldr	r1, [pc, #32]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040e6:	d10b      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4a02      	ldr	r2, [pc, #8]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80040ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040f2:	60d3      	str	r3, [r2, #12]
 80040f4:	e016      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x578>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	08007e54 	.word	0x08007e54
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004108:	d10c      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3304      	adds	r3, #4
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f8ad 	bl	8004270 <RCCEx_PLLSAI1_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x578>
        {
          /* set overall return value */
          status = ret;
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d040      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x606>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004140:	d00e      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800414a:	d009      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004150:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004154:	d004      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004156:	f44f 711a 	mov.w	r1, #616	; 0x268
 800415a:	4843      	ldr	r0, [pc, #268]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800415c:	f7fc fa72 	bl	8000644 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004160:	4b42      	ldr	r3, [pc, #264]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	493f      	ldr	r1, [pc, #252]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800417e:	d106      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004180:	4b3a      	ldr	r3, [pc, #232]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4a39      	ldr	r2, [pc, #228]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800418a:	60d3      	str	r3, [r2, #12]
 800418c:	e011      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x606>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004196:	d10c      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x606>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	2101      	movs	r1, #1
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f866 	bl	8004270 <RCCEx_PLLSAI1_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x606>
      {
        /* set overall return value */
        status = ret;
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02f      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x672>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00e      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ce:	d009      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041d8:	d004      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80041da:	f44f 7122 	mov.w	r1, #648	; 0x288
 80041de:	4822      	ldr	r0, [pc, #136]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80041e0:	f7fc fa30 	bl	8000644 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041e4:	4b21      	ldr	r3, [pc, #132]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f2:	491e      	ldr	r1, [pc, #120]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004202:	d10c      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	2102      	movs	r1, #2
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f830 	bl	8004270 <RCCEx_PLLSAI1_Config>
 8004210:	4603      	mov	r3, r0
 8004212:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x672>
      {
        /* set overall return value */
        status = ret;
 800421a:	7cfb      	ldrb	r3, [r7, #19]
 800421c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d018      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423a:	d004      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 800423c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8004240:	4809      	ldr	r0, [pc, #36]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004242:	f7fc f9ff 	bl	8000644 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004254:	4905      	ldr	r1, [pc, #20]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800425c:	7cbb      	ldrb	r3, [r7, #18]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	08007e54 	.word	0x08007e54
 800426c:	40021000 	.word	0x40021000

08004270 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d010      	beq.n	80042a8 <RCCEx_PLLSAI1_Config+0x38>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d00c      	beq.n	80042a8 <RCCEx_PLLSAI1_Config+0x38>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d008      	beq.n	80042a8 <RCCEx_PLLSAI1_Config+0x38>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b03      	cmp	r3, #3
 800429c:	d004      	beq.n	80042a8 <RCCEx_PLLSAI1_Config+0x38>
 800429e:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80042a2:	48a3      	ldr	r0, [pc, #652]	; (8004530 <RCCEx_PLLSAI1_Config+0x2c0>)
 80042a4:	f7fc f9ce 	bl	8000644 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <RCCEx_PLLSAI1_Config+0x48>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d904      	bls.n	80042c2 <RCCEx_PLLSAI1_Config+0x52>
 80042b8:	f640 3161 	movw	r1, #2913	; 0xb61
 80042bc:	489c      	ldr	r0, [pc, #624]	; (8004530 <RCCEx_PLLSAI1_Config+0x2c0>)
 80042be:	f7fc f9c1 	bl	8000644 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b07      	cmp	r3, #7
 80042c8:	d903      	bls.n	80042d2 <RCCEx_PLLSAI1_Config+0x62>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b56      	cmp	r3, #86	; 0x56
 80042d0:	d904      	bls.n	80042dc <RCCEx_PLLSAI1_Config+0x6c>
 80042d2:	f640 3162 	movw	r1, #2914	; 0xb62
 80042d6:	4896      	ldr	r0, [pc, #600]	; (8004530 <RCCEx_PLLSAI1_Config+0x2c0>)
 80042d8:	f7fc f9b4 	bl	8000644 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <RCCEx_PLLSAI1_Config+0x90>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d105      	bne.n	8004300 <RCCEx_PLLSAI1_Config+0x90>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <RCCEx_PLLSAI1_Config+0xa0>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <RCCEx_PLLSAI1_Config+0xaa>
 8004310:	f640 3163 	movw	r1, #2915	; 0xb63
 8004314:	4886      	ldr	r0, [pc, #536]	; (8004530 <RCCEx_PLLSAI1_Config+0x2c0>)
 8004316:	f7fc f995 	bl	8000644 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800431a:	4b86      	ldr	r3, [pc, #536]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d018      	beq.n	8004358 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004326:	4b83      	ldr	r3, [pc, #524]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0203 	and.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d10d      	bne.n	8004352 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
       ||
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800433e:	4b7d      	ldr	r3, [pc, #500]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
       ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d044      	beq.n	80043dc <RCCEx_PLLSAI1_Config+0x16c>
#endif
      )
    {
      status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
 8004356:	e041      	b.n	80043dc <RCCEx_PLLSAI1_Config+0x16c>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d00c      	beq.n	800437a <RCCEx_PLLSAI1_Config+0x10a>
 8004360:	2b03      	cmp	r3, #3
 8004362:	d013      	beq.n	800438c <RCCEx_PLLSAI1_Config+0x11c>
 8004364:	2b01      	cmp	r3, #1
 8004366:	d120      	bne.n	80043aa <RCCEx_PLLSAI1_Config+0x13a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004368:	4b72      	ldr	r3, [pc, #456]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d11d      	bne.n	80043b0 <RCCEx_PLLSAI1_Config+0x140>
      {
        status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004378:	e01a      	b.n	80043b0 <RCCEx_PLLSAI1_Config+0x140>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800437a:	4b6e      	ldr	r3, [pc, #440]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004382:	2b00      	cmp	r3, #0
 8004384:	d116      	bne.n	80043b4 <RCCEx_PLLSAI1_Config+0x144>
      {
        status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800438a:	e013      	b.n	80043b4 <RCCEx_PLLSAI1_Config+0x144>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800438c:	4b69      	ldr	r3, [pc, #420]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10f      	bne.n	80043b8 <RCCEx_PLLSAI1_Config+0x148>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004398:	4b66      	ldr	r3, [pc, #408]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <RCCEx_PLLSAI1_Config+0x148>
        {
          status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043a8:	e006      	b.n	80043b8 <RCCEx_PLLSAI1_Config+0x148>
    default:
      status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
      break;
 80043ae:	e004      	b.n	80043ba <RCCEx_PLLSAI1_Config+0x14a>
      break;
 80043b0:	bf00      	nop
 80043b2:	e002      	b.n	80043ba <RCCEx_PLLSAI1_Config+0x14a>
      break;
 80043b4:	bf00      	nop
 80043b6:	e000      	b.n	80043ba <RCCEx_PLLSAI1_Config+0x14a>
      break;
 80043b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10d      	bne.n	80043dc <RCCEx_PLLSAI1_Config+0x16c>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043c0:	4b5c      	ldr	r3, [pc, #368]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6819      	ldr	r1, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	430b      	orrs	r3, r1
 80043d6:	4957      	ldr	r1, [pc, #348]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f040 80ba 	bne.w	8004558 <RCCEx_PLLSAI1_Config+0x2e8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043e4:	4b53      	ldr	r3, [pc, #332]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a52      	ldr	r2, [pc, #328]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 80043ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f0:	f7fc fc88 	bl	8000d04 <HAL_GetTick>
 80043f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043f6:	e009      	b.n	800440c <RCCEx_PLLSAI1_Config+0x19c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043f8:	f7fc fc84 	bl	8000d04 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d902      	bls.n	800440c <RCCEx_PLLSAI1_Config+0x19c>
      {
        status = HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	73fb      	strb	r3, [r7, #15]
        break;
 800440a:	e005      	b.n	8004418 <RCCEx_PLLSAI1_Config+0x1a8>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800440c:	4b49      	ldr	r3, [pc, #292]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ef      	bne.n	80043f8 <RCCEx_PLLSAI1_Config+0x188>
      }
    }

    if(status == HAL_OK)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f040 809c 	bne.w	8004558 <RCCEx_PLLSAI1_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d11d      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0x1f2>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d903      	bls.n	8004436 <RCCEx_PLLSAI1_Config+0x1c6>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b1f      	cmp	r3, #31
 8004434:	d904      	bls.n	8004440 <RCCEx_PLLSAI1_Config+0x1d0>
 8004436:	f640 31b6 	movw	r1, #2998	; 0xbb6
 800443a:	483d      	ldr	r0, [pc, #244]	; (8004530 <RCCEx_PLLSAI1_Config+0x2c0>)
 800443c:	f7fc f902 	bl	8000644 <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004440:	4b3c      	ldr	r3, [pc, #240]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004448:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6892      	ldr	r2, [r2, #8]
 8004450:	0211      	lsls	r1, r2, #8
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68d2      	ldr	r2, [r2, #12]
 8004456:	06d2      	lsls	r2, r2, #27
 8004458:	430a      	orrs	r2, r1
 800445a:	4936      	ldr	r1, [pc, #216]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 800445c:	4313      	orrs	r3, r2
 800445e:	610b      	str	r3, [r1, #16]
 8004460:	e051      	b.n	8004506 <RCCEx_PLLSAI1_Config+0x296>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d127      	bne.n	80044b8 <RCCEx_PLLSAI1_Config+0x248>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d010      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x222>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b04      	cmp	r3, #4
 8004476:	d00c      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x222>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b06      	cmp	r3, #6
 800447e:	d008      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x222>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	2b08      	cmp	r3, #8
 8004486:	d004      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x222>
 8004488:	f640 31da 	movw	r1, #3034	; 0xbda
 800448c:	4828      	ldr	r0, [pc, #160]	; (8004530 <RCCEx_PLLSAI1_Config+0x2c0>)
 800448e:	f7fc f8d9 	bl	8000644 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004492:	4b28      	ldr	r3, [pc, #160]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800449a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6892      	ldr	r2, [r2, #8]
 80044a2:	0211      	lsls	r1, r2, #8
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6912      	ldr	r2, [r2, #16]
 80044a8:	0852      	lsrs	r2, r2, #1
 80044aa:	3a01      	subs	r2, #1
 80044ac:	0552      	lsls	r2, r2, #21
 80044ae:	430a      	orrs	r2, r1
 80044b0:	4920      	ldr	r1, [pc, #128]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	610b      	str	r3, [r1, #16]
 80044b6:	e026      	b.n	8004506 <RCCEx_PLLSAI1_Config+0x296>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d010      	beq.n	80044e2 <RCCEx_PLLSAI1_Config+0x272>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d00c      	beq.n	80044e2 <RCCEx_PLLSAI1_Config+0x272>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	2b06      	cmp	r3, #6
 80044ce:	d008      	beq.n	80044e2 <RCCEx_PLLSAI1_Config+0x272>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d004      	beq.n	80044e2 <RCCEx_PLLSAI1_Config+0x272>
 80044d8:	f640 31ec 	movw	r1, #3052	; 0xbec
 80044dc:	4814      	ldr	r0, [pc, #80]	; (8004530 <RCCEx_PLLSAI1_Config+0x2c0>)
 80044de:	f7fc f8b1 	bl	8000644 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e2:	4b14      	ldr	r3, [pc, #80]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6892      	ldr	r2, [r2, #8]
 80044f2:	0211      	lsls	r1, r2, #8
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6952      	ldr	r2, [r2, #20]
 80044f8:	0852      	lsrs	r2, r2, #1
 80044fa:	3a01      	subs	r2, #1
 80044fc:	0652      	lsls	r2, r2, #25
 80044fe:	430a      	orrs	r2, r1
 8004500:	490c      	ldr	r1, [pc, #48]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <RCCEx_PLLSAI1_Config+0x2c4>)
 800450c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004510:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004512:	f7fc fbf7 	bl	8000d04 <HAL_GetTick>
 8004516:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004518:	e00e      	b.n	8004538 <RCCEx_PLLSAI1_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800451a:	f7fc fbf3 	bl	8000d04 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d907      	bls.n	8004538 <RCCEx_PLLSAI1_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	73fb      	strb	r3, [r7, #15]
          break;
 800452c:	e00a      	b.n	8004544 <RCCEx_PLLSAI1_Config+0x2d4>
 800452e:	bf00      	nop
 8004530:	08007e54 	.word	0x08007e54
 8004534:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <RCCEx_PLLSAI1_Config+0x2f4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ea      	beq.n	800451a <RCCEx_PLLSAI1_Config+0x2aa>
        }
      }

      if(status == HAL_OK)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <RCCEx_PLLSAI1_Config+0x2e8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <RCCEx_PLLSAI1_Config+0x2f4>)
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	4904      	ldr	r1, [pc, #16]	; (8004564 <RCCEx_PLLSAI1_Config+0x2f4>)
 8004554:	4313      	orrs	r3, r2
 8004556:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000

08004568 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e1d6      	b.n	8004928 <HAL_SPI_Init+0x3c0>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a90      	ldr	r2, [pc, #576]	; (80047c0 <HAL_SPI_Init+0x258>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d009      	beq.n	8004598 <HAL_SPI_Init+0x30>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a8e      	ldr	r2, [pc, #568]	; (80047c4 <HAL_SPI_Init+0x25c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <HAL_SPI_Init+0x30>
 800458e:	f240 1147 	movw	r1, #327	; 0x147
 8004592:	488d      	ldr	r0, [pc, #564]	; (80047c8 <HAL_SPI_Init+0x260>)
 8004594:	f7fc f856 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <HAL_SPI_Init+0x4c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a8:	d004      	beq.n	80045b4 <HAL_SPI_Init+0x4c>
 80045aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80045ae:	4886      	ldr	r0, [pc, #536]	; (80047c8 <HAL_SPI_Init+0x260>)
 80045b0:	f7fc f848 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00e      	beq.n	80045da <HAL_SPI_Init+0x72>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c4:	d009      	beq.n	80045da <HAL_SPI_Init+0x72>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ce:	d004      	beq.n	80045da <HAL_SPI_Init+0x72>
 80045d0:	f240 1149 	movw	r1, #329	; 0x149
 80045d4:	487c      	ldr	r0, [pc, #496]	; (80047c8 <HAL_SPI_Init+0x260>)
 80045d6:	f7fc f835 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045e2:	d040      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80045ec:	d03b      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80045f6:	d036      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004600:	d031      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800460a:	d02c      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004614:	d027      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800461e:	d022      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004628:	d01d      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004632:	d018      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800463c:	d013      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004646:	d00e      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004650:	d009      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465a:	d004      	beq.n	8004666 <HAL_SPI_Init+0xfe>
 800465c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004660:	4859      	ldr	r0, [pc, #356]	; (80047c8 <HAL_SPI_Init+0x260>)
 8004662:	f7fb ffef 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466e:	d00d      	beq.n	800468c <HAL_SPI_Init+0x124>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_SPI_Init+0x124>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004680:	d004      	beq.n	800468c <HAL_SPI_Init+0x124>
 8004682:	f240 114b 	movw	r1, #331	; 0x14b
 8004686:	4850      	ldr	r0, [pc, #320]	; (80047c8 <HAL_SPI_Init+0x260>)
 8004688:	f7fb ffdc 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004690:	2b08      	cmp	r3, #8
 8004692:	d008      	beq.n	80046a6 <HAL_SPI_Init+0x13e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <HAL_SPI_Init+0x13e>
 800469c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80046a0:	4849      	ldr	r0, [pc, #292]	; (80047c8 <HAL_SPI_Init+0x260>)
 80046a2:	f7fb ffcf 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d020      	beq.n	80046f0 <HAL_SPI_Init+0x188>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d01c      	beq.n	80046f0 <HAL_SPI_Init+0x188>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d018      	beq.n	80046f0 <HAL_SPI_Init+0x188>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	2b18      	cmp	r3, #24
 80046c4:	d014      	beq.n	80046f0 <HAL_SPI_Init+0x188>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d010      	beq.n	80046f0 <HAL_SPI_Init+0x188>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	2b28      	cmp	r3, #40	; 0x28
 80046d4:	d00c      	beq.n	80046f0 <HAL_SPI_Init+0x188>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	2b30      	cmp	r3, #48	; 0x30
 80046dc:	d008      	beq.n	80046f0 <HAL_SPI_Init+0x188>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	2b38      	cmp	r3, #56	; 0x38
 80046e4:	d004      	beq.n	80046f0 <HAL_SPI_Init+0x188>
 80046e6:	f240 114d 	movw	r1, #333	; 0x14d
 80046ea:	4837      	ldr	r0, [pc, #220]	; (80047c8 <HAL_SPI_Init+0x260>)
 80046ec:	f7fb ffaa 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d008      	beq.n	800470a <HAL_SPI_Init+0x1a2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	2b80      	cmp	r3, #128	; 0x80
 80046fe:	d004      	beq.n	800470a <HAL_SPI_Init+0x1a2>
 8004700:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8004704:	4830      	ldr	r0, [pc, #192]	; (80047c8 <HAL_SPI_Init+0x260>)
 8004706:	f7fb ff9d 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <HAL_SPI_Init+0x1bc>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b10      	cmp	r3, #16
 8004718:	d004      	beq.n	8004724 <HAL_SPI_Init+0x1bc>
 800471a:	f240 114f 	movw	r1, #335	; 0x14f
 800471e:	482a      	ldr	r0, [pc, #168]	; (80047c8 <HAL_SPI_Init+0x260>)
 8004720:	f7fb ff90 	bl	8000644 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	2b00      	cmp	r3, #0
 800472a:	d14f      	bne.n	80047cc <HAL_SPI_Init+0x264>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_SPI_Init+0x1de>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d004      	beq.n	8004746 <HAL_SPI_Init+0x1de>
 800473c:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8004740:	4821      	ldr	r0, [pc, #132]	; (80047c8 <HAL_SPI_Init+0x260>)
 8004742:	f7fb ff7f 	bl	8000644 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_SPI_Init+0x1f8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d004      	beq.n	8004760 <HAL_SPI_Init+0x1f8>
 8004756:	f240 1153 	movw	r1, #339	; 0x153
 800475a:	481b      	ldr	r0, [pc, #108]	; (80047c8 <HAL_SPI_Init+0x260>)
 800475c:	f7fb ff72 	bl	8000644 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004768:	d125      	bne.n	80047b6 <HAL_SPI_Init+0x24e>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d057      	beq.n	8004822 <HAL_SPI_Init+0x2ba>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	2b08      	cmp	r3, #8
 8004778:	d053      	beq.n	8004822 <HAL_SPI_Init+0x2ba>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	2b10      	cmp	r3, #16
 8004780:	d04f      	beq.n	8004822 <HAL_SPI_Init+0x2ba>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	2b18      	cmp	r3, #24
 8004788:	d04b      	beq.n	8004822 <HAL_SPI_Init+0x2ba>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	2b20      	cmp	r3, #32
 8004790:	d047      	beq.n	8004822 <HAL_SPI_Init+0x2ba>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	2b28      	cmp	r3, #40	; 0x28
 8004798:	d043      	beq.n	8004822 <HAL_SPI_Init+0x2ba>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	2b30      	cmp	r3, #48	; 0x30
 80047a0:	d03f      	beq.n	8004822 <HAL_SPI_Init+0x2ba>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	2b38      	cmp	r3, #56	; 0x38
 80047a8:	d03b      	beq.n	8004822 <HAL_SPI_Init+0x2ba>
 80047aa:	f240 1157 	movw	r1, #343	; 0x157
 80047ae:	4806      	ldr	r0, [pc, #24]	; (80047c8 <HAL_SPI_Init+0x260>)
 80047b0:	f7fb ff48 	bl	8000644 <assert_failed>
 80047b4:	e035      	b.n	8004822 <HAL_SPI_Init+0x2ba>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	61da      	str	r2, [r3, #28]
 80047bc:	e031      	b.n	8004822 <HAL_SPI_Init+0x2ba>
 80047be:	bf00      	nop
 80047c0:	40013000 	.word	0x40013000
 80047c4:	40003c00 	.word	0x40003c00
 80047c8:	08007e90 	.word	0x08007e90
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_SPI_Init+0x2ae>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d01c      	beq.n	8004816 <HAL_SPI_Init+0x2ae>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d018      	beq.n	8004816 <HAL_SPI_Init+0x2ae>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	2b18      	cmp	r3, #24
 80047ea:	d014      	beq.n	8004816 <HAL_SPI_Init+0x2ae>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d010      	beq.n	8004816 <HAL_SPI_Init+0x2ae>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	2b28      	cmp	r3, #40	; 0x28
 80047fa:	d00c      	beq.n	8004816 <HAL_SPI_Init+0x2ae>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2b30      	cmp	r3, #48	; 0x30
 8004802:	d008      	beq.n	8004816 <HAL_SPI_Init+0x2ae>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	2b38      	cmp	r3, #56	; 0x38
 800480a:	d004      	beq.n	8004816 <HAL_SPI_Init+0x2ae>
 800480c:	f240 1161 	movw	r1, #353	; 0x161
 8004810:	4847      	ldr	r0, [pc, #284]	; (8004930 <HAL_SPI_Init+0x3c8>)
 8004812:	f7fb ff17 	bl	8000644 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <HAL_SPI_Init+0x2da>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7fb ff75 	bl	800072c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004858:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004862:	d902      	bls.n	800486a <HAL_SPI_Init+0x302>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e002      	b.n	8004870 <HAL_SPI_Init+0x308>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800486a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800486e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004878:	d007      	beq.n	800488a <HAL_SPI_Init+0x322>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004882:	d002      	beq.n	800488a <HAL_SPI_Init+0x322>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048cc:	ea42 0103 	orr.w	r1, r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	f003 0204 	and.w	r2, r3, #4
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004906:	ea42 0103 	orr.w	r1, r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	08007e90 	.word	0x08007e90

08004934 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d009      	beq.n	8004964 <HAL_SPI_Transmit+0x30>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004958:	d004      	beq.n	8004964 <HAL_SPI_Transmit+0x30>
 800495a:	f240 313e 	movw	r1, #830	; 0x33e
 800495e:	4890      	ldr	r0, [pc, #576]	; (8004ba0 <HAL_SPI_Transmit+0x26c>)
 8004960:	f7fb fe70 	bl	8000644 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_SPI_Transmit+0x3e>
 800496e:	2302      	movs	r3, #2
 8004970:	e15a      	b.n	8004c28 <HAL_SPI_Transmit+0x2f4>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800497a:	f7fc f9c3 	bl	8000d04 <HAL_GetTick>
 800497e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	d002      	beq.n	8004996 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8004990:	2302      	movs	r3, #2
 8004992:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004994:	e13f      	b.n	8004c16 <HAL_SPI_Transmit+0x2e2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_SPI_Transmit+0x6e>
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049a6:	e136      	b.n	8004c16 <HAL_SPI_Transmit+0x2e2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2203      	movs	r2, #3
 80049ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	88fa      	ldrh	r2, [r7, #6]
 80049c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f2:	d10f      	bne.n	8004a14 <HAL_SPI_Transmit+0xe0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d007      	beq.n	8004a32 <HAL_SPI_Transmit+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a3a:	d94b      	bls.n	8004ad4 <HAL_SPI_Transmit+0x1a0>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_SPI_Transmit+0x116>
 8004a44:	8afb      	ldrh	r3, [r7, #22]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d13e      	bne.n	8004ac8 <HAL_SPI_Transmit+0x194>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	881a      	ldrh	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	1c9a      	adds	r2, r3, #2
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a6e:	e02b      	b.n	8004ac8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d112      	bne.n	8004aa4 <HAL_SPI_Transmit+0x170>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	881a      	ldrh	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	1c9a      	adds	r2, r3, #2
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aa2:	e011      	b.n	8004ac8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aa4:	f7fc f92e 	bl	8000d04 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d803      	bhi.n	8004abc <HAL_SPI_Transmit+0x188>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d102      	bne.n	8004ac2 <HAL_SPI_Transmit+0x18e>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <HAL_SPI_Transmit+0x194>
        {
          errorcode = HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ac6:	e0a6      	b.n	8004c16 <HAL_SPI_Transmit+0x2e2>
    while (hspi->TxXferCount > 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1ce      	bne.n	8004a70 <HAL_SPI_Transmit+0x13c>
 8004ad2:	e07e      	b.n	8004bd2 <HAL_SPI_Transmit+0x29e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_SPI_Transmit+0x1ae>
 8004adc:	8afb      	ldrh	r3, [r7, #22]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d172      	bne.n	8004bc8 <HAL_SPI_Transmit+0x294>
    {
      if (hspi->TxXferCount > 1U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d912      	bls.n	8004b12 <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	881a      	ldrh	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	1c9a      	adds	r2, r3, #2
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b02      	subs	r3, #2
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b10:	e05a      	b.n	8004bc8 <HAL_SPI_Transmit+0x294>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	7812      	ldrb	r2, [r2, #0]
 8004b1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b38:	e046      	b.n	8004bc8 <HAL_SPI_Transmit+0x294>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d12d      	bne.n	8004ba4 <HAL_SPI_Transmit+0x270>
      {
        if (hspi->TxXferCount > 1U)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d912      	bls.n	8004b78 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	881a      	ldrh	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	1c9a      	adds	r2, r3, #2
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b02      	subs	r3, #2
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b76:	e027      	b.n	8004bc8 <HAL_SPI_Transmit+0x294>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	7812      	ldrb	r2, [r2, #0]
 8004b84:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b9e:	e013      	b.n	8004bc8 <HAL_SPI_Transmit+0x294>
 8004ba0:	08007e90 	.word	0x08007e90
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba4:	f7fc f8ae 	bl	8000d04 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d803      	bhi.n	8004bbc <HAL_SPI_Transmit+0x288>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d102      	bne.n	8004bc2 <HAL_SPI_Transmit+0x28e>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <HAL_SPI_Transmit+0x294>
        {
          errorcode = HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bc6:	e026      	b.n	8004c16 <HAL_SPI_Transmit+0x2e2>
    while (hspi->TxXferCount > 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1b3      	bne.n	8004b3a <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f940 	bl	8004e5c <SPI_EndRxTxTransaction>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_SPI_Transmit+0x2b4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <HAL_SPI_Transmit+0x2d2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_SPI_Transmit+0x2e0>
  {
    errorcode = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e000      	b.n	8004c16 <HAL_SPI_Transmit+0x2e2>
  }

error:
 8004c14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c26:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c40:	f7fc f860 	bl	8000d04 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c50:	f7fc f858 	bl	8000d04 <HAL_GetTick>
 8004c54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c56:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	015b      	lsls	r3, r3, #5
 8004c5c:	0d1b      	lsrs	r3, r3, #20
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	fb02 f303 	mul.w	r3, r2, r3
 8004c64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c66:	e054      	b.n	8004d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6e:	d050      	beq.n	8004d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c70:	f7fc f848 	bl	8000d04 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d902      	bls.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d13d      	bne.n	8004d02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c9e:	d111      	bne.n	8004cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca8:	d004      	beq.n	8004cb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb2:	d107      	bne.n	8004cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ccc:	d10f      	bne.n	8004cee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e017      	b.n	8004d32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	bf0c      	ite	eq
 8004d22:	2301      	moveq	r3, #1
 8004d24:	2300      	movne	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d19b      	bne.n	8004c68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000000 	.word	0x20000000

08004d40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d4e:	f7fb ffd9 	bl	8000d04 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d5e:	f7fb ffd1 	bl	8000d04 <HAL_GetTick>
 8004d62:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d64:	4b3c      	ldr	r3, [pc, #240]	; (8004e58 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	00da      	lsls	r2, r3, #3
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	0d1b      	lsrs	r3, r3, #20
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d7c:	e05f      	b.n	8004e3e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d84:	d106      	bne.n	8004d94 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d103      	bne.n	8004d94 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d050      	beq.n	8004e3e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d9c:	f7fb ffb2 	bl	8000d04 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d902      	bls.n	8004db2 <SPI_WaitFifoStateUntilTimeout+0x72>
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d13d      	bne.n	8004e2e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dca:	d111      	bne.n	8004df0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd4:	d004      	beq.n	8004de0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dde:	d107      	bne.n	8004df0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df8:	d10f      	bne.n	8004e1a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e010      	b.n	8004e50 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4013      	ands	r3, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d197      	bne.n	8004d7e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3720      	adds	r7, #32
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000000 	.word	0x20000000

08004e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7ff ff63 	bl	8004d40 <SPI_WaitFifoStateUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e84:	f043 0220 	orr.w	r2, r3, #32
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e027      	b.n	8004ee0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2200      	movs	r2, #0
 8004e98:	2180      	movs	r1, #128	; 0x80
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7ff fec8 	bl	8004c30 <SPI_WaitFlagStateUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eaa:	f043 0220 	orr.w	r2, r3, #32
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e014      	b.n	8004ee0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f7ff ff3c 	bl	8004d40 <SPI_WaitFifoStateUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e000      	b.n	8004ee0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e06d      	b.n	8004fd6 <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d014      	beq.n	8004f2c <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a36      	ldr	r2, [pc, #216]	; (8004fe0 <HAL_UART_Init+0xf8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d023      	beq.n	8004f54 <HAL_UART_Init+0x6c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a34      	ldr	r2, [pc, #208]	; (8004fe4 <HAL_UART_Init+0xfc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01e      	beq.n	8004f54 <HAL_UART_Init+0x6c>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a33      	ldr	r2, [pc, #204]	; (8004fe8 <HAL_UART_Init+0x100>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d019      	beq.n	8004f54 <HAL_UART_Init+0x6c>
 8004f20:	f240 1143 	movw	r1, #323	; 0x143
 8004f24:	4831      	ldr	r0, [pc, #196]	; (8004fec <HAL_UART_Init+0x104>)
 8004f26:	f7fb fb8d 	bl	8000644 <assert_failed>
 8004f2a:	e013      	b.n	8004f54 <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <HAL_UART_Init+0xf8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00e      	beq.n	8004f54 <HAL_UART_Init+0x6c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a2a      	ldr	r2, [pc, #168]	; (8004fe4 <HAL_UART_Init+0xfc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d009      	beq.n	8004f54 <HAL_UART_Init+0x6c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a28      	ldr	r2, [pc, #160]	; (8004fe8 <HAL_UART_Init+0x100>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d004      	beq.n	8004f54 <HAL_UART_Init+0x6c>
 8004f4a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004f4e:	4827      	ldr	r0, [pc, #156]	; (8004fec <HAL_UART_Init+0x104>)
 8004f50:	f7fb fb78 	bl	8000644 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d106      	bne.n	8004f6a <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fb fc6f 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2224      	movs	r2, #36	; 0x24
 8004f6e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0201 	bic.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fbc3 	bl	800570c <UART_SetConfig>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e022      	b.n	8004fd6 <HAL_UART_Init+0xee>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <HAL_UART_Init+0xb6>
  {
    UART_AdvFeatureConfig(huart);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fe69 	bl	8005c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fbc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0201 	orr.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 ff94 	bl	8005efc <UART_CheckIdleState>
 8004fd4:	4603      	mov	r3, r0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40013800 	.word	0x40013800
 8004fe4:	40004400 	.word	0x40004400
 8004fe8:	40008000 	.word	0x40008000
 8004fec:	08007ec8 	.word	0x08007ec8

08004ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005004:	2b20      	cmp	r3, #32
 8005006:	f040 8081 	bne.w	800510c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_UART_Transmit+0x26>
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e079      	b.n	800510e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_UART_Transmit+0x38>
 8005024:	2302      	movs	r3, #2
 8005026:	e072      	b.n	800510e <HAL_UART_Transmit+0x11e>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2221      	movs	r2, #33	; 0x21
 800503a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800503c:	f7fb fe62 	bl	8000d04 <HAL_GetTick>
 8005040:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	88fa      	ldrh	r2, [r7, #6]
 8005046:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	88fa      	ldrh	r2, [r7, #6]
 800504e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	d108      	bne.n	800506e <HAL_UART_Transmit+0x7e>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	e003      	b.n	8005076 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800507e:	e02d      	b.n	80050dc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2200      	movs	r2, #0
 8005088:	2180      	movs	r1, #128	; 0x80
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 ff7b 	bl	8005f86 <UART_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e039      	b.n	800510e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10b      	bne.n	80050b8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	881a      	ldrh	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ac:	b292      	uxth	r2, r2
 80050ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	3302      	adds	r3, #2
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	e008      	b.n	80050ca <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	781a      	ldrb	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	b292      	uxth	r2, r2
 80050c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	3301      	adds	r3, #1
 80050c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1cb      	bne.n	8005080 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2200      	movs	r2, #0
 80050f0:	2140      	movs	r1, #64	; 0x40
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 ff47 	bl	8005f86 <UART_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e005      	b.n	800510e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800512a:	2b20      	cmp	r3, #32
 800512c:	d16c      	bne.n	8005208 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_UART_Receive_DMA+0x22>
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e065      	b.n	800520a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_UART_Receive_DMA+0x34>
 8005148:	2302      	movs	r3, #2
 800514a:	e05e      	b.n	800520a <HAL_UART_Receive_DMA+0xf2>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	88fa      	ldrh	r2, [r7, #6]
 800515e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2222      	movs	r2, #34	; 0x22
 800516c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d02a      	beq.n	80051cc <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517a:	4a26      	ldr	r2, [pc, #152]	; (8005214 <HAL_UART_Receive_DMA+0xfc>)
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005182:	4a25      	ldr	r2, [pc, #148]	; (8005218 <HAL_UART_Receive_DMA+0x100>)
 8005184:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800518a:	4a24      	ldr	r2, [pc, #144]	; (800521c <HAL_UART_Receive_DMA+0x104>)
 800518c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005192:	2200      	movs	r2, #0
 8005194:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3324      	adds	r3, #36	; 0x24
 80051a0:	4619      	mov	r1, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	461a      	mov	r2, r3
 80051a8:	88fb      	ldrh	r3, [r7, #6]
 80051aa:	f7fc f8d1 	bl	8001350 <HAL_DMA_Start_IT>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2210      	movs	r2, #16
 80051b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e01e      	b.n	800520a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e2:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005202:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	e000      	b.n	800520a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005208:	2302      	movs	r3, #2
  }
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	080060e7 	.word	0x080060e7
 8005218:	0800614f 	.word	0x0800614f
 800521c:	0800616b 	.word	0x0800616b

08005220 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522c:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005232:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_UART_DMAPause+0x22>
 800523e:	2302      	movs	r3, #2
 8005240:	e03c      	b.n	80052bc <HAL_UART_DMAPause+0x9c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005254:	2b80      	cmp	r3, #128	; 0x80
 8005256:	d10a      	bne.n	800526e <HAL_UART_DMAPause+0x4e>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b21      	cmp	r3, #33	; 0x21
 800525c:	d107      	bne.n	800526e <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800526c:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d11a      	bne.n	80052b2 <HAL_UART_DMAPause+0x92>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b22      	cmp	r3, #34	; 0x22
 8005280:	d117      	bne.n	80052b2 <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005290:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0201 	bic.w	r2, r2, #1
 80052a0:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b0:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_UART_DMAResume+0x16>
 80052da:	2302      	movs	r3, #2
 80052dc:	e034      	b.n	8005348 <HAL_UART_DMAResume+0x80>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ea:	2b21      	cmp	r3, #33	; 0x21
 80052ec:	d107      	bne.n	80052fe <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052fc:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005302:	2b22      	cmp	r3, #34	; 0x22
 8005304:	d11b      	bne.n	800533e <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2208      	movs	r2, #8
 800530c:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800533c:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005360:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005366:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005372:	2b80      	cmp	r3, #128	; 0x80
 8005374:	d126      	bne.n	80053c4 <HAL_UART_DMAStop+0x70>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b21      	cmp	r3, #33	; 0x21
 800537a:	d123      	bne.n	80053c4 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800538a:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005390:	2b00      	cmp	r3, #0
 8005392:	d014      	beq.n	80053be <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005398:	4618      	mov	r0, r3
 800539a:	f7fc f847 	bl	800142c <HAL_DMA_Abort>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00c      	beq.n	80053be <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fc f96d 	bl	8001688 <HAL_DMA_GetError>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d104      	bne.n	80053be <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2210      	movs	r2, #16
 80053b8:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e031      	b.n	8005422 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fe5c 	bl	800607c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	d126      	bne.n	8005420 <HAL_UART_DMAStop+0xcc>
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2b22      	cmp	r3, #34	; 0x22
 80053d6:	d123      	bne.n	8005420 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d014      	beq.n	800541a <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fc f819 	bl	800142c <HAL_DMA_Abort>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00c      	beq.n	800541a <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005404:	4618      	mov	r0, r3
 8005406:	f7fc f93f 	bl	8001688 <HAL_DMA_GetError>
 800540a:	4603      	mov	r3, r0
 800540c:	2b20      	cmp	r3, #32
 800540e:	d104      	bne.n	800541a <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2210      	movs	r2, #16
 8005414:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e003      	b.n	8005422 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fe43 	bl	80060a6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005452:	4013      	ands	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d113      	bne.n	8005484 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00e      	beq.n	8005484 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d009      	beq.n	8005484 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8114 	beq.w	80056a2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4798      	blx	r3
      }
      return;
 8005482:	e10e      	b.n	80056a2 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 80d6 	beq.w	8005638 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d105      	bne.n	80054a2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	4b86      	ldr	r3, [pc, #536]	; (80056b4 <HAL_UART_IRQHandler+0x288>)
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 80cb 	beq.w	8005638 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00e      	beq.n	80054ca <HAL_UART_IRQHandler+0x9e>
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d009      	beq.n	80054ca <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2201      	movs	r2, #1
 80054bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c2:	f043 0201 	orr.w	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00e      	beq.n	80054f2 <HAL_UART_IRQHandler+0xc6>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2202      	movs	r2, #2
 80054e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ea:	f043 0204 	orr.w	r2, r3, #4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00e      	beq.n	800551a <HAL_UART_IRQHandler+0xee>
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2204      	movs	r2, #4
 800550c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005512:	f043 0202 	orr.w	r2, r3, #2
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d013      	beq.n	800554c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005534:	2b00      	cmp	r3, #0
 8005536:	d009      	beq.n	800554c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2208      	movs	r2, #8
 800553e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005544:	f043 0208 	orr.w	r2, r3, #8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00f      	beq.n	8005576 <HAL_UART_IRQHandler+0x14a>
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005568:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800556e:	f043 0220 	orr.w	r2, r3, #32
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8093 	beq.w	80056a6 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b4:	2b40      	cmp	r3, #64	; 0x40
 80055b6:	d004      	beq.n	80055c2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d031      	beq.n	8005626 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fd6f 	bl	80060a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d123      	bne.n	800561e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d013      	beq.n	8005616 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f2:	4a31      	ldr	r2, [pc, #196]	; (80056b8 <HAL_UART_IRQHandler+0x28c>)
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fb ff54 	bl	80014a8 <HAL_DMA_Abort_IT>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d016      	beq.n	8005634 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005610:	4610      	mov	r0, r2
 8005612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	e00e      	b.n	8005634 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f86e 	bl	80056f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800561c:	e00a      	b.n	8005634 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f86a 	bl	80056f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005624:	e006      	b.n	8005634 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f866 	bl	80056f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005632:	e038      	b.n	80056a6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005634:	bf00      	nop
    return;
 8005636:	e036      	b.n	80056a6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00d      	beq.n	800565e <HAL_UART_IRQHandler+0x232>
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fdf2 	bl	8006240 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800565c:	e026      	b.n	80056ac <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00d      	beq.n	8005684 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	d008      	beq.n	8005684 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005676:	2b00      	cmp	r3, #0
 8005678:	d017      	beq.n	80056aa <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4798      	blx	r3
    }
    return;
 8005682:	e012      	b.n	80056aa <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00e      	beq.n	80056ac <HAL_UART_IRQHandler+0x280>
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d009      	beq.n	80056ac <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fdb8 	bl	800620e <UART_EndTransmit_IT>
    return;
 800569e:	bf00      	nop
 80056a0:	e004      	b.n	80056ac <HAL_UART_IRQHandler+0x280>
      return;
 80056a2:	bf00      	nop
 80056a4:	e002      	b.n	80056ac <HAL_UART_IRQHandler+0x280>
    return;
 80056a6:	bf00      	nop
 80056a8:	e000      	b.n	80056ac <HAL_UART_IRQHandler+0x280>
    return;
 80056aa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80056ac:	3720      	adds	r7, #32
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	04000120 	.word	0x04000120
 80056b8:	080061e3 	.word	0x080061e3

080056bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800570c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005710:	b088      	sub	sp, #32
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	76bb      	strb	r3, [r7, #26]
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4aab      	ldr	r2, [pc, #684]	; (80059cc <UART_SetConfig+0x2c0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d904      	bls.n	800572e <UART_SetConfig+0x22>
 8005724:	f640 31b1 	movw	r1, #2993	; 0xbb1
 8005728:	48a9      	ldr	r0, [pc, #676]	; (80059d0 <UART_SetConfig+0x2c4>)
 800572a:	f7fa ff8b 	bl	8000644 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005736:	d00d      	beq.n	8005754 <UART_SetConfig+0x48>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d009      	beq.n	8005754 <UART_SetConfig+0x48>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005748:	d004      	beq.n	8005754 <UART_SetConfig+0x48>
 800574a:	f640 31b2 	movw	r1, #2994	; 0xbb2
 800574e:	48a0      	ldr	r0, [pc, #640]	; (80059d0 <UART_SetConfig+0x2c4>)
 8005750:	f7fa ff78 	bl	8000644 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a9e      	ldr	r2, [pc, #632]	; (80059d4 <UART_SetConfig+0x2c8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d10e      	bne.n	800577c <UART_SetConfig+0x70>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d030      	beq.n	80057c8 <UART_SetConfig+0xbc>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576e:	d02b      	beq.n	80057c8 <UART_SetConfig+0xbc>
 8005770:	f640 31b5 	movw	r1, #2997	; 0xbb5
 8005774:	4896      	ldr	r0, [pc, #600]	; (80059d0 <UART_SetConfig+0x2c4>)
 8005776:	f7fa ff65 	bl	8000644 <assert_failed>
 800577a:	e025      	b.n	80057c8 <UART_SetConfig+0xbc>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005784:	d012      	beq.n	80057ac <UART_SetConfig+0xa0>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00e      	beq.n	80057ac <UART_SetConfig+0xa0>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005796:	d009      	beq.n	80057ac <UART_SetConfig+0xa0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a0:	d004      	beq.n	80057ac <UART_SetConfig+0xa0>
 80057a2:	f640 31b9 	movw	r1, #3001	; 0xbb9
 80057a6:	488a      	ldr	r0, [pc, #552]	; (80059d0 <UART_SetConfig+0x2c4>)
 80057a8:	f7fa ff4c 	bl	8000644 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d009      	beq.n	80057c8 <UART_SetConfig+0xbc>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057bc:	d004      	beq.n	80057c8 <UART_SetConfig+0xbc>
 80057be:	f640 31ba 	movw	r1, #3002	; 0xbba
 80057c2:	4883      	ldr	r0, [pc, #524]	; (80059d0 <UART_SetConfig+0x2c4>)
 80057c4:	f7fa ff3e 	bl	8000644 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00e      	beq.n	80057ee <UART_SetConfig+0xe2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d8:	d009      	beq.n	80057ee <UART_SetConfig+0xe2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057e2:	d004      	beq.n	80057ee <UART_SetConfig+0xe2>
 80057e4:	f640 31bd 	movw	r1, #3005	; 0xbbd
 80057e8:	4879      	ldr	r0, [pc, #484]	; (80059d0 <UART_SetConfig+0x2c4>)
 80057ea:	f7fa ff2b 	bl	8000644 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f023 030c 	bic.w	r3, r3, #12
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d103      	bne.n	8005802 <UART_SetConfig+0xf6>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <UART_SetConfig+0x100>
 8005802:	f640 31be 	movw	r1, #3006	; 0xbbe
 8005806:	4872      	ldr	r0, [pc, #456]	; (80059d0 <UART_SetConfig+0x2c4>)
 8005808:	f7fa ff1c 	bl	8000644 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d013      	beq.n	800583c <UART_SetConfig+0x130>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800581c:	d00e      	beq.n	800583c <UART_SetConfig+0x130>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005826:	d009      	beq.n	800583c <UART_SetConfig+0x130>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005830:	d004      	beq.n	800583c <UART_SetConfig+0x130>
 8005832:	f640 31bf 	movw	r1, #3007	; 0xbbf
 8005836:	4866      	ldr	r0, [pc, #408]	; (80059d0 <UART_SetConfig+0x2c4>)
 8005838:	f7fa ff04 	bl	8000644 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d009      	beq.n	8005858 <UART_SetConfig+0x14c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584c:	d004      	beq.n	8005858 <UART_SetConfig+0x14c>
 800584e:	f44f 613c 	mov.w	r1, #3008	; 0xbc0
 8005852:	485f      	ldr	r0, [pc, #380]	; (80059d0 <UART_SetConfig+0x2c4>)
 8005854:	f7fa fef6 	bl	8000644 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	4313      	orrs	r3, r2
 800586e:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b58      	ldr	r3, [pc, #352]	; (80059d8 <UART_SetConfig+0x2cc>)
 8005878:	4013      	ands	r3, r2
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6812      	ldr	r2, [r2, #0]
 800587e:	69f9      	ldr	r1, [r7, #28]
 8005880:	430b      	orrs	r3, r1
 8005882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a4b      	ldr	r2, [pc, #300]	; (80059d4 <UART_SetConfig+0x2c8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <UART_SetConfig+0x1a8>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a43      	ldr	r2, [pc, #268]	; (80059dc <UART_SetConfig+0x2d0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d122      	bne.n	8005918 <UART_SetConfig+0x20c>
 80058d2:	4b43      	ldr	r3, [pc, #268]	; (80059e0 <UART_SetConfig+0x2d4>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d817      	bhi.n	8005910 <UART_SetConfig+0x204>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <UART_SetConfig+0x1dc>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	080058f9 	.word	0x080058f9
 80058ec:	08005905 	.word	0x08005905
 80058f0:	080058ff 	.word	0x080058ff
 80058f4:	0800590b 	.word	0x0800590b
 80058f8:	2301      	movs	r3, #1
 80058fa:	76fb      	strb	r3, [r7, #27]
 80058fc:	e080      	b.n	8005a00 <UART_SetConfig+0x2f4>
 80058fe:	2302      	movs	r3, #2
 8005900:	76fb      	strb	r3, [r7, #27]
 8005902:	e07d      	b.n	8005a00 <UART_SetConfig+0x2f4>
 8005904:	2304      	movs	r3, #4
 8005906:	76fb      	strb	r3, [r7, #27]
 8005908:	e07a      	b.n	8005a00 <UART_SetConfig+0x2f4>
 800590a:	2308      	movs	r3, #8
 800590c:	76fb      	strb	r3, [r7, #27]
 800590e:	e077      	b.n	8005a00 <UART_SetConfig+0x2f4>
 8005910:	2310      	movs	r3, #16
 8005912:	76fb      	strb	r3, [r7, #27]
 8005914:	bf00      	nop
 8005916:	e073      	b.n	8005a00 <UART_SetConfig+0x2f4>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a31      	ldr	r2, [pc, #196]	; (80059e4 <UART_SetConfig+0x2d8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d134      	bne.n	800598c <UART_SetConfig+0x280>
 8005922:	4b2f      	ldr	r3, [pc, #188]	; (80059e0 <UART_SetConfig+0x2d4>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b0c      	cmp	r3, #12
 800592e:	d829      	bhi.n	8005984 <UART_SetConfig+0x278>
 8005930:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <UART_SetConfig+0x22c>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	0800596d 	.word	0x0800596d
 800593c:	08005985 	.word	0x08005985
 8005940:	08005985 	.word	0x08005985
 8005944:	08005985 	.word	0x08005985
 8005948:	08005979 	.word	0x08005979
 800594c:	08005985 	.word	0x08005985
 8005950:	08005985 	.word	0x08005985
 8005954:	08005985 	.word	0x08005985
 8005958:	08005973 	.word	0x08005973
 800595c:	08005985 	.word	0x08005985
 8005960:	08005985 	.word	0x08005985
 8005964:	08005985 	.word	0x08005985
 8005968:	0800597f 	.word	0x0800597f
 800596c:	2300      	movs	r3, #0
 800596e:	76fb      	strb	r3, [r7, #27]
 8005970:	e046      	b.n	8005a00 <UART_SetConfig+0x2f4>
 8005972:	2302      	movs	r3, #2
 8005974:	76fb      	strb	r3, [r7, #27]
 8005976:	e043      	b.n	8005a00 <UART_SetConfig+0x2f4>
 8005978:	2304      	movs	r3, #4
 800597a:	76fb      	strb	r3, [r7, #27]
 800597c:	e040      	b.n	8005a00 <UART_SetConfig+0x2f4>
 800597e:	2308      	movs	r3, #8
 8005980:	76fb      	strb	r3, [r7, #27]
 8005982:	e03d      	b.n	8005a00 <UART_SetConfig+0x2f4>
 8005984:	2310      	movs	r3, #16
 8005986:	76fb      	strb	r3, [r7, #27]
 8005988:	bf00      	nop
 800598a:	e039      	b.n	8005a00 <UART_SetConfig+0x2f4>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a10      	ldr	r2, [pc, #64]	; (80059d4 <UART_SetConfig+0x2c8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d132      	bne.n	80059fc <UART_SetConfig+0x2f0>
 8005996:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <UART_SetConfig+0x2d4>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a4:	d020      	beq.n	80059e8 <UART_SetConfig+0x2dc>
 80059a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059aa:	d802      	bhi.n	80059b2 <UART_SetConfig+0x2a6>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <UART_SetConfig+0x2b4>
 80059b0:	e020      	b.n	80059f4 <UART_SetConfig+0x2e8>
 80059b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b6:	d006      	beq.n	80059c6 <UART_SetConfig+0x2ba>
 80059b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059bc:	d017      	beq.n	80059ee <UART_SetConfig+0x2e2>
 80059be:	e019      	b.n	80059f4 <UART_SetConfig+0x2e8>
 80059c0:	2300      	movs	r3, #0
 80059c2:	76fb      	strb	r3, [r7, #27]
 80059c4:	e01c      	b.n	8005a00 <UART_SetConfig+0x2f4>
 80059c6:	2302      	movs	r3, #2
 80059c8:	76fb      	strb	r3, [r7, #27]
 80059ca:	e019      	b.n	8005a00 <UART_SetConfig+0x2f4>
 80059cc:	00989680 	.word	0x00989680
 80059d0:	08007ec8 	.word	0x08007ec8
 80059d4:	40008000 	.word	0x40008000
 80059d8:	efff69f3 	.word	0xefff69f3
 80059dc:	40013800 	.word	0x40013800
 80059e0:	40021000 	.word	0x40021000
 80059e4:	40004400 	.word	0x40004400
 80059e8:	2304      	movs	r3, #4
 80059ea:	76fb      	strb	r3, [r7, #27]
 80059ec:	e008      	b.n	8005a00 <UART_SetConfig+0x2f4>
 80059ee:	2308      	movs	r3, #8
 80059f0:	76fb      	strb	r3, [r7, #27]
 80059f2:	e005      	b.n	8005a00 <UART_SetConfig+0x2f4>
 80059f4:	2310      	movs	r3, #16
 80059f6:	76fb      	strb	r3, [r7, #27]
 80059f8:	bf00      	nop
 80059fa:	e001      	b.n	8005a00 <UART_SetConfig+0x2f4>
 80059fc:	2310      	movs	r3, #16
 80059fe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a98      	ldr	r2, [pc, #608]	; (8005c68 <UART_SetConfig+0x55c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d174      	bne.n	8005af4 <UART_SetConfig+0x3e8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a0a:	7efb      	ldrb	r3, [r7, #27]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d824      	bhi.n	8005a5a <UART_SetConfig+0x34e>
 8005a10:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <UART_SetConfig+0x30c>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a5b 	.word	0x08005a5b
 8005a20:	08005a45 	.word	0x08005a45
 8005a24:	08005a5b 	.word	0x08005a5b
 8005a28:	08005a4b 	.word	0x08005a4b
 8005a2c:	08005a5b 	.word	0x08005a5b
 8005a30:	08005a5b 	.word	0x08005a5b
 8005a34:	08005a5b 	.word	0x08005a5b
 8005a38:	08005a53 	.word	0x08005a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3c:	f7fe f82a 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 8005a40:	6178      	str	r0, [r7, #20]
        break;
 8005a42:	e00f      	b.n	8005a64 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a44:	4b89      	ldr	r3, [pc, #548]	; (8005c6c <UART_SetConfig+0x560>)
 8005a46:	617b      	str	r3, [r7, #20]
        break;
 8005a48:	e00c      	b.n	8005a64 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a4a:	f7fd ff8d 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8005a4e:	6178      	str	r0, [r7, #20]
        break;
 8005a50:	e008      	b.n	8005a64 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a56:	617b      	str	r3, [r7, #20]
        break;
 8005a58:	e004      	b.n	8005a64 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	76bb      	strb	r3, [r7, #26]
        break;
 8005a62:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 80f2 	beq.w	8005c50 <UART_SetConfig+0x544>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4413      	add	r3, r2
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d305      	bcc.n	8005a88 <UART_SetConfig+0x37c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d902      	bls.n	8005a8e <UART_SetConfig+0x382>
      {
        ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	76bb      	strb	r3, [r7, #26]
 8005a8c:	e0e0      	b.n	8005c50 <UART_SetConfig+0x544>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	4619      	mov	r1, r3
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	f04f 0400 	mov.w	r4, #0
 8005a9e:	0214      	lsls	r4, r2, #8
 8005aa0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005aa4:	020b      	lsls	r3, r1, #8
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6852      	ldr	r2, [r2, #4]
 8005aaa:	0852      	lsrs	r2, r2, #1
 8005aac:	4611      	mov	r1, r2
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	eb13 0b01 	adds.w	fp, r3, r1
 8005ab6:	eb44 0c02 	adc.w	ip, r4, r2
 8005aba:	4658      	mov	r0, fp
 8005abc:	4661      	mov	r1, ip
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f04f 0400 	mov.w	r4, #0
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4623      	mov	r3, r4
 8005aca:	f7fa fb7f 	bl	80001cc <__aeabi_uldivmod>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ada:	d308      	bcc.n	8005aee <UART_SetConfig+0x3e2>
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ae2:	d204      	bcs.n	8005aee <UART_SetConfig+0x3e2>
        {
          huart->Instance->BRR = usartdiv;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	60da      	str	r2, [r3, #12]
 8005aec:	e0b0      	b.n	8005c50 <UART_SetConfig+0x544>
        }
        else
        {
          ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	76bb      	strb	r3, [r7, #26]
 8005af2:	e0ad      	b.n	8005c50 <UART_SetConfig+0x544>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afc:	d15c      	bne.n	8005bb8 <UART_SetConfig+0x4ac>
  {
    switch (clocksource)
 8005afe:	7efb      	ldrb	r3, [r7, #27]
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d828      	bhi.n	8005b56 <UART_SetConfig+0x44a>
 8005b04:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <UART_SetConfig+0x400>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b41 	.word	0x08005b41
 8005b18:	08005b57 	.word	0x08005b57
 8005b1c:	08005b47 	.word	0x08005b47
 8005b20:	08005b57 	.word	0x08005b57
 8005b24:	08005b57 	.word	0x08005b57
 8005b28:	08005b57 	.word	0x08005b57
 8005b2c:	08005b4f 	.word	0x08005b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b30:	f7fd ffb0 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 8005b34:	6178      	str	r0, [r7, #20]
        break;
 8005b36:	e013      	b.n	8005b60 <UART_SetConfig+0x454>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b38:	f7fd ffc2 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 8005b3c:	6178      	str	r0, [r7, #20]
        break;
 8005b3e:	e00f      	b.n	8005b60 <UART_SetConfig+0x454>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b40:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <UART_SetConfig+0x560>)
 8005b42:	617b      	str	r3, [r7, #20]
        break;
 8005b44:	e00c      	b.n	8005b60 <UART_SetConfig+0x454>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b46:	f7fd ff0f 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8005b4a:	6178      	str	r0, [r7, #20]
        break;
 8005b4c:	e008      	b.n	8005b60 <UART_SetConfig+0x454>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b52:	617b      	str	r3, [r7, #20]
        break;
 8005b54:	e004      	b.n	8005b60 <UART_SetConfig+0x454>
      default:
        pclk = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	76bb      	strb	r3, [r7, #26]
        break;
 8005b5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d074      	beq.n	8005c50 <UART_SetConfig+0x544>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	005a      	lsls	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	441a      	add	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2b0f      	cmp	r3, #15
 8005b82:	d916      	bls.n	8005bb2 <UART_SetConfig+0x4a6>
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8a:	d212      	bcs.n	8005bb2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f023 030f 	bic.w	r3, r3, #15
 8005b94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	085b      	lsrs	r3, r3, #1
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	89fb      	ldrh	r3, [r7, #14]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	89fa      	ldrh	r2, [r7, #14]
 8005bae:	60da      	str	r2, [r3, #12]
 8005bb0:	e04e      	b.n	8005c50 <UART_SetConfig+0x544>
      }
      else
      {
        ret = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	76bb      	strb	r3, [r7, #26]
 8005bb6:	e04b      	b.n	8005c50 <UART_SetConfig+0x544>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bb8:	7efb      	ldrb	r3, [r7, #27]
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d827      	bhi.n	8005c0e <UART_SetConfig+0x502>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0x4b8>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005c0f 	.word	0x08005c0f
 8005bd4:	08005bff 	.word	0x08005bff
 8005bd8:	08005c0f 	.word	0x08005c0f
 8005bdc:	08005c0f 	.word	0x08005c0f
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c07 	.word	0x08005c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be8:	f7fd ff54 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 8005bec:	6178      	str	r0, [r7, #20]
        break;
 8005bee:	e013      	b.n	8005c18 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7fd ff66 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 8005bf4:	6178      	str	r0, [r7, #20]
        break;
 8005bf6:	e00f      	b.n	8005c18 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <UART_SetConfig+0x560>)
 8005bfa:	617b      	str	r3, [r7, #20]
        break;
 8005bfc:	e00c      	b.n	8005c18 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7fd feb3 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8005c02:	6178      	str	r0, [r7, #20]
        break;
 8005c04:	e008      	b.n	8005c18 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c0a:	617b      	str	r3, [r7, #20]
        break;
 8005c0c:	e004      	b.n	8005c18 <UART_SetConfig+0x50c>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	76bb      	strb	r3, [r7, #26]
        break;
 8005c16:	bf00      	nop
    }

    if (pclk != 0U)
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d018      	beq.n	8005c50 <UART_SetConfig+0x544>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	085a      	lsrs	r2, r3, #1
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	441a      	add	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b0f      	cmp	r3, #15
 8005c38:	d908      	bls.n	8005c4c <UART_SetConfig+0x540>
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c40:	d204      	bcs.n	8005c4c <UART_SetConfig+0x540>
      {
        huart->Instance->BRR = usartdiv;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	e001      	b.n	8005c50 <UART_SetConfig+0x544>
      }
      else
      {
        ret = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005c5c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3720      	adds	r7, #32
 8005c62:	46bd      	mov	sp, r7
 8005c64:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005c68:	40008000 	.word	0x40008000
 8005c6c:	00f42400 	.word	0x00f42400

08005c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	2bff      	cmp	r3, #255	; 0xff
 8005c7e:	d904      	bls.n	8005c8a <UART_AdvFeatureConfig+0x1a>
 8005c80:	f640 41a8 	movw	r1, #3240	; 0xca8
 8005c84:	489a      	ldr	r0, [pc, #616]	; (8005ef0 <UART_AdvFeatureConfig+0x280>)
 8005c86:	f7fa fcdd 	bl	8000644 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d018      	beq.n	8005cc8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <UART_AdvFeatureConfig+0x42>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca6:	d004      	beq.n	8005cb2 <UART_AdvFeatureConfig+0x42>
 8005ca8:	f640 41ad 	movw	r1, #3245	; 0xcad
 8005cac:	4890      	ldr	r0, [pc, #576]	; (8005ef0 <UART_AdvFeatureConfig+0x280>)
 8005cae:	f7fa fcc9 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d018      	beq.n	8005d06 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <UART_AdvFeatureConfig+0x80>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce4:	d004      	beq.n	8005cf0 <UART_AdvFeatureConfig+0x80>
 8005ce6:	f640 41b4 	movw	r1, #3252	; 0xcb4
 8005cea:	4881      	ldr	r0, [pc, #516]	; (8005ef0 <UART_AdvFeatureConfig+0x280>)
 8005cec:	f7fa fcaa 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d018      	beq.n	8005d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d009      	beq.n	8005d2e <UART_AdvFeatureConfig+0xbe>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d22:	d004      	beq.n	8005d2e <UART_AdvFeatureConfig+0xbe>
 8005d24:	f640 41bb 	movw	r1, #3259	; 0xcbb
 8005d28:	4871      	ldr	r0, [pc, #452]	; (8005ef0 <UART_AdvFeatureConfig+0x280>)
 8005d2a:	f7fa fc8b 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d018      	beq.n	8005d82 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d009      	beq.n	8005d6c <UART_AdvFeatureConfig+0xfc>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d60:	d004      	beq.n	8005d6c <UART_AdvFeatureConfig+0xfc>
 8005d62:	f640 41c2 	movw	r1, #3266	; 0xcc2
 8005d66:	4862      	ldr	r0, [pc, #392]	; (8005ef0 <UART_AdvFeatureConfig+0x280>)
 8005d68:	f7fa fc6c 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	f003 0310 	and.w	r3, r3, #16
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d018      	beq.n	8005dc0 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <UART_AdvFeatureConfig+0x13a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9e:	d004      	beq.n	8005daa <UART_AdvFeatureConfig+0x13a>
 8005da0:	f640 41c9 	movw	r1, #3273	; 0xcc9
 8005da4:	4852      	ldr	r0, [pc, #328]	; (8005ef0 <UART_AdvFeatureConfig+0x280>)
 8005da6:	f7fa fc4d 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d018      	beq.n	8005dfe <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <UART_AdvFeatureConfig+0x178>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ddc:	d004      	beq.n	8005de8 <UART_AdvFeatureConfig+0x178>
 8005dde:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
 8005de2:	4843      	ldr	r0, [pc, #268]	; (8005ef0 <UART_AdvFeatureConfig+0x280>)
 8005de4:	f7fa fc2e 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d04f      	beq.n	8005eaa <UART_AdvFeatureConfig+0x23a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a39      	ldr	r2, [pc, #228]	; (8005ef4 <UART_AdvFeatureConfig+0x284>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d009      	beq.n	8005e28 <UART_AdvFeatureConfig+0x1b8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a37      	ldr	r2, [pc, #220]	; (8005ef8 <UART_AdvFeatureConfig+0x288>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d004      	beq.n	8005e28 <UART_AdvFeatureConfig+0x1b8>
 8005e1e:	f640 41d7 	movw	r1, #3287	; 0xcd7
 8005e22:	4833      	ldr	r0, [pc, #204]	; (8005ef0 <UART_AdvFeatureConfig+0x280>)
 8005e24:	f7fa fc0e 	bl	8000644 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d009      	beq.n	8005e44 <UART_AdvFeatureConfig+0x1d4>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e38:	d004      	beq.n	8005e44 <UART_AdvFeatureConfig+0x1d4>
 8005e3a:	f640 41d8 	movw	r1, #3288	; 0xcd8
 8005e3e:	482c      	ldr	r0, [pc, #176]	; (8005ef0 <UART_AdvFeatureConfig+0x280>)
 8005e40:	f7fa fc00 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e62:	d122      	bne.n	8005eaa <UART_AdvFeatureConfig+0x23a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d013      	beq.n	8005e94 <UART_AdvFeatureConfig+0x224>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e74:	d00e      	beq.n	8005e94 <UART_AdvFeatureConfig+0x224>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e7e:	d009      	beq.n	8005e94 <UART_AdvFeatureConfig+0x224>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e88:	d004      	beq.n	8005e94 <UART_AdvFeatureConfig+0x224>
 8005e8a:	f640 41dd 	movw	r1, #3293	; 0xcdd
 8005e8e:	4818      	ldr	r0, [pc, #96]	; (8005ef0 <UART_AdvFeatureConfig+0x280>)
 8005e90:	f7fa fbd8 	bl	8000644 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d018      	beq.n	8005ee8 <UART_AdvFeatureConfig+0x278>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d009      	beq.n	8005ed2 <UART_AdvFeatureConfig+0x262>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ec6:	d004      	beq.n	8005ed2 <UART_AdvFeatureConfig+0x262>
 8005ec8:	f640 41e5 	movw	r1, #3301	; 0xce5
 8005ecc:	4808      	ldr	r0, [pc, #32]	; (8005ef0 <UART_AdvFeatureConfig+0x280>)
 8005ece:	f7fa fbb9 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	605a      	str	r2, [r3, #4]
  }
}
 8005ee8:	bf00      	nop
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	08007ec8 	.word	0x08007ec8
 8005ef4:	40013800 	.word	0x40013800
 8005ef8:	40004400 	.word	0x40004400

08005efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005f0a:	f7fa fefb 	bl	8000d04 <HAL_GetTick>
 8005f0e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d10e      	bne.n	8005f3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f82a 	bl	8005f86 <UART_WaitOnFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e020      	b.n	8005f7e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d10e      	bne.n	8005f68 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f814 	bl	8005f86 <UART_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e00a      	b.n	8005f7e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b084      	sub	sp, #16
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	4613      	mov	r3, r2
 8005f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f96:	e05d      	b.n	8006054 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d059      	beq.n	8006054 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa0:	f7fa feb0 	bl	8000d04 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d302      	bcc.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d11b      	bne.n	8005fee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fc4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e042      	b.n	8006074 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d02b      	beq.n	8006054 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800600a:	d123      	bne.n	8006054 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006014:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006024:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0201 	bic.w	r2, r2, #1
 8006034:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2220      	movs	r2, #32
 800603a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2220      	movs	r2, #32
 8006040:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e00f      	b.n	8006074 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	69da      	ldr	r2, [r3, #28]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4013      	ands	r3, r2
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	429a      	cmp	r2, r3
 8006062:	bf0c      	ite	eq
 8006064:	2301      	moveq	r3, #1
 8006066:	2300      	movne	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	429a      	cmp	r2, r3
 8006070:	d092      	beq.n	8005f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006092:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	675a      	str	r2, [r3, #116]	; 0x74
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060bc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0201 	bic.w	r2, r2, #1
 80060cc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d11e      	bne.n	8006140 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006118:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006138:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff fac5 	bl	80056d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff fac1 	bl	80056e4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b086      	sub	sp, #24
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006182:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618e:	2b80      	cmp	r3, #128	; 0x80
 8006190:	d109      	bne.n	80061a6 <UART_DMAError+0x3c>
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b21      	cmp	r3, #33	; 0x21
 8006196:	d106      	bne.n	80061a6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2200      	movs	r2, #0
 800619c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80061a0:	6978      	ldr	r0, [r7, #20]
 80061a2:	f7ff ff6b 	bl	800607c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b40      	cmp	r3, #64	; 0x40
 80061b2:	d109      	bne.n	80061c8 <UART_DMAError+0x5e>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b22      	cmp	r3, #34	; 0x22
 80061b8:	d106      	bne.n	80061c8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2200      	movs	r2, #0
 80061be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80061c2:	6978      	ldr	r0, [r7, #20]
 80061c4:	f7ff ff6f 	bl	80060a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061cc:	f043 0210 	orr.w	r2, r3, #16
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061d4:	6978      	ldr	r0, [r7, #20]
 80061d6:	f7ff fa8f 	bl	80056f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061da:	bf00      	nop
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff fa79 	bl	80056f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006224:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff fa42 	bl	80056bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_DWT_Delay_us>:
/**
 * @brief This function provides a delay (in microseconds)
 * @param microseconds: delay in microseconds
 */
__STATIC_INLINE void HAL_DWT_Delay_us(volatile uint32_t microseconds)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 800625c:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <HAL_DWT_Delay_us+0x3c>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	60fb      	str	r3, [r7, #12]
 /* Go to number of cycles for system */
 microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8006262:	f7fd fc0b 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8006266:	4602      	mov	r2, r0
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <HAL_DWT_Delay_us+0x40>)
 800626a:	fba3 2302 	umull	r2, r3, r3, r2
 800626e:	0c9b      	lsrs	r3, r3, #18
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	fb02 f303 	mul.w	r3, r2, r3
 8006276:	607b      	str	r3, [r7, #4]
 /* Delay till end */
 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8006278:	bf00      	nop
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <HAL_DWT_Delay_us+0x3c>)
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad2      	subs	r2, r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d3f8      	bcc.n	800627a <HAL_DWT_Delay_us+0x26>
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	e0001000 	.word	0xe0001000
 8006294:	431bde83 	.word	0x431bde83

08006298 <HAL_GPIO_EXTI_Callback>:
 * 			(3) External Interrupt Mode with rising edge trigger detection enabled
 * 			for OLED_GPIO_FR_Pin (PB0).<br>
 * 			(4) NVIC for EXTI line[0] interrupts enabled.<br>
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==OLED_FR_Pin)
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d10a      	bne.n	80062be <HAL_GPIO_EXTI_Callback+0x26>
	{
		// FR signal synchronized
		// Copy frame buffer to GDDRAM on-the-spot of this interrupt callback if there is pending data to flush
		if(fb_flush_pending_get()){
 80062a8:	f000 fb84 	bl	80069b4 <fb_flush_pending_get>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <HAL_GPIO_EXTI_Callback+0x32>
			fb_spi_transfer(fb_flush_area);
 80062b2:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80062b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80062b8:	f000 fac4 	bl	8006844 <fb_spi_transfer>
	{
		//Set flag for ssd7317_get_gesture() on a valid touch event.
		//Polling ssd7317_get_gesture() is required in non-RTOS environment.
		touch_event_set();
	}
}
 80062bc:	e005      	b.n	80062ca <HAL_GPIO_EXTI_Callback+0x32>
	else if (GPIO_Pin==TCH_IRQ_Pin)
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c4:	d101      	bne.n	80062ca <HAL_GPIO_EXTI_Callback+0x32>
		touch_event_set();
 80062c6:	f000 fd79 	bl	8006dbc <touch_event_set>
}
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000168 	.word	0x20000168

080062d8 <ssd7317_init>:
 *
 * 				ssd7317_init();	//OLED display On after this function
 * 			}
 * @endcode
 */
void ssd7317_init(void){
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
	/*(1)Configure GPIO pins for display and touch interfaces*/
	MX_GPIO_Init();
 80062de:	f000 f84b 	bl	8006378 <MX_GPIO_Init>
	/*(2)Enable DMA for SPI*/
#ifdef USE_SPI_DMA
	MX_DMA_Init();
#endif
	/*(3)Initialize SPI interface for the display part*/
	MX_SPI1_Init();
 80062e2:	f000 f8cd 	bl	8006480 <MX_SPI1_Init>
	/*(4)Initialize I2C interface for touch*/
	MX_I2C1_Init();
 80062e6:	f000 f909 	bl	80064fc <MX_I2C1_Init>

	/*(6)Send initialization commands through SPI according to data sheet except 0xaf*/
	spi_write_command((const uint8_t*)SSD7317_INIT_TBL, sizeof(SSD7317_INIT_TBL));
 80062ea:	212b      	movs	r1, #43	; 0x2b
 80062ec:	4816      	ldr	r0, [pc, #88]	; (8006348 <ssd7317_init+0x70>)
 80062ee:	f000 f945 	bl	800657c <spi_write_command>

	/*(7) Hw reset for touch screen*/
	HAL_GPIO_WritePin(TCH_TRES_GPIO_Port, TCH_TRES_Pin, GPIO_PIN_RESET);
 80062f2:	2200      	movs	r2, #0
 80062f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062fc:	f7fb fc26 	bl	8001b4c <HAL_GPIO_WritePin>
	/*TRES set low for 1ms*/
	HAL_Delay(1);
 8006300:	2001      	movs	r0, #1
 8006302:	f7fa fd0b 	bl	8000d1c <HAL_Delay>
	/*TRES pin set high for normal operation*/
	HAL_GPIO_WritePin(TCH_TRES_GPIO_Port, TCH_TRES_Pin, GPIO_PIN_SET);
 8006306:	2201      	movs	r2, #1
 8006308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800630c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006310:	f7fb fc1c 	bl	8001b4c <HAL_GPIO_WritePin>

	/*(8)Clear frame buffer and copy full screen to GDDRAM by non-DMA.
	 * No sync with FR should be implemented because SSD7317 not switched on yet -> no FR signal
	 * */
	rect_t screen = {0,0,OLED_HOR_RES-1,OLED_VER_RES-1};
 8006314:	4a0d      	ldr	r2, [pc, #52]	; (800634c <ssd7317_init+0x74>)
 8006316:	463b      	mov	r3, r7
 8006318:	e892 0003 	ldmia.w	r2, {r0, r1}
 800631c:	e883 0003 	stmia.w	r3, {r0, r1}
	fb_clear(screen, BLACK);
 8006320:	2200      	movs	r2, #0
 8006322:	463b      	mov	r3, r7
 8006324:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006328:	f000 fa4e 	bl	80067c8 <fb_clear>
	spi_write_data((const uint8_t *)&frame_buffer[0], (sizeof(frame_buffer)/sizeof(color_t)));
 800632c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006330:	4807      	ldr	r0, [pc, #28]	; (8006350 <ssd7317_init+0x78>)
 8006332:	f000 f947 	bl	80065c4 <spi_write_data>

	/*(9)Display ON for OLED (12V VCC on and send over command 0xaf)*/
	ssd7317_display_on();
 8006336:	f000 f80d 	bl	8006354 <ssd7317_display_on>

	/*(10)Initialization for the touch controller*/
	touch_init();
 800633a:	f000 fc23 	bl	8006b84 <touch_init>
}
 800633e:	bf00      	nop
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	08008df4 	.word	0x08008df4
 800634c:	08007f04 	.word	0x08007f04
 8006350:	2000048c 	.word	0x2000048c

08006354 <ssd7317_display_on>:
/**
 *@brief
 *\b	Description:<br>
 *	Enable 12V VCC and then switch OLED On with command 0xAF.
 */
void ssd7317_display_on(void){
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
	const uint8_t cmd[1]={0xaf};
 800635a:	23af      	movs	r3, #175	; 0xaf
 800635c:	713b      	strb	r3, [r7, #4]

	/*Software delay 1ms for VCC ramp up*/
	HAL_Delay(1);
 800635e:	2001      	movs	r0, #1
 8006360:	f7fa fcdc 	bl	8000d1c <HAL_Delay>

	/*Send display ON command*/
	spi_write_command((const uint8_t*)cmd, 1);
 8006364:	1d3b      	adds	r3, r7, #4
 8006366:	2101      	movs	r1, #1
 8006368:	4618      	mov	r0, r3
 800636a:	f000 f907 	bl	800657c <spi_write_command>
}
 800636e:	bf00      	nop
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <MX_GPIO_Init>:
  * 		Direct copy from STM32CubeIDE Code Generation utility.
  * @param 	None
  * @return None
  */
static void MX_GPIO_Init(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800637e:	f107 030c 	add.w	r3, r7, #12
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	605a      	str	r2, [r3, #4]
 8006388:	609a      	str	r2, [r3, #8]
 800638a:	60da      	str	r2, [r3, #12]
 800638c:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800638e:	4b38      	ldr	r3, [pc, #224]	; (8006470 <MX_GPIO_Init+0xf8>)
 8006390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006392:	4a37      	ldr	r2, [pc, #220]	; (8006470 <MX_GPIO_Init+0xf8>)
 8006394:	f043 0301 	orr.w	r3, r3, #1
 8006398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800639a:	4b35      	ldr	r3, [pc, #212]	; (8006470 <MX_GPIO_Init+0xf8>)
 800639c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	60bb      	str	r3, [r7, #8]
 80063a4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80063a6:	4b32      	ldr	r3, [pc, #200]	; (8006470 <MX_GPIO_Init+0xf8>)
 80063a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063aa:	4a31      	ldr	r2, [pc, #196]	; (8006470 <MX_GPIO_Init+0xf8>)
 80063ac:	f043 0302 	orr.w	r3, r3, #2
 80063b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063b2:	4b2f      	ldr	r3, [pc, #188]	; (8006470 <MX_GPIO_Init+0xf8>)
 80063b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	607b      	str	r3, [r7, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, TCH_TRES_Pin, GPIO_PIN_SET);
 80063be:	2201      	movs	r2, #1
 80063c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063c8:	f7fb fbc0 	bl	8001b4c <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80063cc:	2200      	movs	r2, #0
 80063ce:	2102      	movs	r1, #2
 80063d0:	4828      	ldr	r0, [pc, #160]	; (8006474 <MX_GPIO_Init+0xfc>)
 80063d2:	f7fb fbbb 	bl	8001b4c <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : OLED_FR_Pin */
	  GPIO_InitStruct.Pin = OLED_FR_Pin;
 80063d6:	2301      	movs	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80063da:	4b27      	ldr	r3, [pc, #156]	; (8006478 <MX_GPIO_Init+0x100>)
 80063dc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063de:	2301      	movs	r3, #1
 80063e0:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(OLED_FR_GPIO_Port, &GPIO_InitStruct);
 80063e2:	f107 030c 	add.w	r3, r7, #12
 80063e6:	4619      	mov	r1, r3
 80063e8:	4822      	ldr	r0, [pc, #136]	; (8006474 <MX_GPIO_Init+0xfc>)
 80063ea:	f7fb f989 	bl	8001700 <HAL_GPIO_Init>

	  /*Configure GPIO pin : OLED_DC_Pin */
	  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80063ee:	2302      	movs	r3, #2
 80063f0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063f2:	2301      	movs	r3, #1
 80063f4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063fa:	2302      	movs	r3, #2
 80063fc:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80063fe:	f107 030c 	add.w	r3, r7, #12
 8006402:	4619      	mov	r1, r3
 8006404:	481b      	ldr	r0, [pc, #108]	; (8006474 <MX_GPIO_Init+0xfc>)
 8006406:	f7fb f97b 	bl	8001700 <HAL_GPIO_Init>

	  /*Configure GPIO pin : TCH_TRES_Pin */
	  GPIO_InitStruct.Pin = TCH_TRES_Pin;
 800640a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800640e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006410:	2301      	movs	r3, #1
 8006412:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006414:	2301      	movs	r3, #1
 8006416:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006418:	2300      	movs	r3, #0
 800641a:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(TCH_TRES_GPIO_Port, &GPIO_InitStruct);
 800641c:	f107 030c 	add.w	r3, r7, #12
 8006420:	4619      	mov	r1, r3
 8006422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006426:	f7fb f96b 	bl	8001700 <HAL_GPIO_Init>

	  /*Configure GPIO pin : TCH_IRQ_Pin */
	  GPIO_InitStruct.Pin = TCH_IRQ_Pin;
 800642a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800642e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006430:	4b12      	ldr	r3, [pc, #72]	; (800647c <MX_GPIO_Init+0x104>)
 8006432:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006434:	2301      	movs	r3, #1
 8006436:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(TCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8006438:	f107 030c 	add.w	r3, r7, #12
 800643c:	4619      	mov	r1, r3
 800643e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006442:	f7fb f95d 	bl	8001700 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006446:	2200      	movs	r2, #0
 8006448:	2100      	movs	r1, #0
 800644a:	2006      	movs	r0, #6
 800644c:	f7fa fd78 	bl	8000f40 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006450:	2006      	movs	r0, #6
 8006452:	f7fa fda1 	bl	8000f98 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006456:	2200      	movs	r2, #0
 8006458:	2100      	movs	r1, #0
 800645a:	2028      	movs	r0, #40	; 0x28
 800645c:	f7fa fd70 	bl	8000f40 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006460:	2028      	movs	r0, #40	; 0x28
 8006462:	f7fa fd99 	bl	8000f98 <HAL_NVIC_EnableIRQ>
}
 8006466:	bf00      	nop
 8006468:	3720      	adds	r7, #32
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	40021000 	.word	0x40021000
 8006474:	48000400 	.word	0x48000400
 8006478:	10110000 	.word	0x10110000
 800647c:	10210000 	.word	0x10210000

08006480 <MX_SPI1_Init>:
  * 		Direct copy from STM32CubeIDE Code Generation utility.
  * @param 	None
  * @return None
  */
static void MX_SPI1_Init(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8006484:	4b1b      	ldr	r3, [pc, #108]	; (80064f4 <MX_SPI1_Init+0x74>)
 8006486:	4a1c      	ldr	r2, [pc, #112]	; (80064f8 <MX_SPI1_Init+0x78>)
 8006488:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800648a:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <MX_SPI1_Init+0x74>)
 800648c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006490:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8006492:	4b18      	ldr	r3, [pc, #96]	; (80064f4 <MX_SPI1_Init+0x74>)
 8006494:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006498:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800649a:	4b16      	ldr	r3, [pc, #88]	; (80064f4 <MX_SPI1_Init+0x74>)
 800649c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80064a0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80064a2:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <MX_SPI1_Init+0x74>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80064a8:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <MX_SPI1_Init+0x74>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <MX_SPI1_Init+0x74>)
 80064b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80064b4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064b6:	4b0f      	ldr	r3, [pc, #60]	; (80064f4 <MX_SPI1_Init+0x74>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80064bc:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <MX_SPI1_Init+0x74>)
 80064be:	2200      	movs	r2, #0
 80064c0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80064c2:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <MX_SPI1_Init+0x74>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <MX_SPI1_Init+0x74>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80064ce:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <MX_SPI1_Init+0x74>)
 80064d0:	2207      	movs	r2, #7
 80064d2:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80064d4:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <MX_SPI1_Init+0x74>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <MX_SPI1_Init+0x74>)
 80064dc:	2208      	movs	r2, #8
 80064de:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80064e0:	4804      	ldr	r0, [pc, #16]	; (80064f4 <MX_SPI1_Init+0x74>)
 80064e2:	f7fe f841 	bl	8004568 <HAL_SPI_Init>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <MX_SPI1_Init+0x70>
	{
		Error_Handler();
 80064ec:	f7fa f8a3 	bl	8000636 <Error_Handler>
	}
}
 80064f0:	bf00      	nop
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	200000b8 	.word	0x200000b8
 80064f8:	40013000 	.word	0x40013000

080064fc <MX_I2C1_Init>:
  * 		Direct copy from STM32CubeIDE Code Generation utility.
  * @param 	None
  * @return None
  */
static void MX_I2C1_Init(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8006500:	4b1b      	ldr	r3, [pc, #108]	; (8006570 <MX_I2C1_Init+0x74>)
 8006502:	4a1c      	ldr	r2, [pc, #112]	; (8006574 <MX_I2C1_Init+0x78>)
 8006504:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8006506:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <MX_I2C1_Init+0x74>)
 8006508:	4a1b      	ldr	r2, [pc, #108]	; (8006578 <MX_I2C1_Init+0x7c>)
 800650a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800650c:	4b18      	ldr	r3, [pc, #96]	; (8006570 <MX_I2C1_Init+0x74>)
 800650e:	2200      	movs	r2, #0
 8006510:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006512:	4b17      	ldr	r3, [pc, #92]	; (8006570 <MX_I2C1_Init+0x74>)
 8006514:	2201      	movs	r2, #1
 8006516:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006518:	4b15      	ldr	r3, [pc, #84]	; (8006570 <MX_I2C1_Init+0x74>)
 800651a:	2200      	movs	r2, #0
 800651c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800651e:	4b14      	ldr	r3, [pc, #80]	; (8006570 <MX_I2C1_Init+0x74>)
 8006520:	2200      	movs	r2, #0
 8006522:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006524:	4b12      	ldr	r3, [pc, #72]	; (8006570 <MX_I2C1_Init+0x74>)
 8006526:	2200      	movs	r2, #0
 8006528:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <MX_I2C1_Init+0x74>)
 800652c:	2200      	movs	r2, #0
 800652e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006530:	4b0f      	ldr	r3, [pc, #60]	; (8006570 <MX_I2C1_Init+0x74>)
 8006532:	2200      	movs	r2, #0
 8006534:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006536:	480e      	ldr	r0, [pc, #56]	; (8006570 <MX_I2C1_Init+0x74>)
 8006538:	f7fb fb50 	bl	8001bdc <HAL_I2C_Init>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <MX_I2C1_Init+0x4a>
  {
	  Error_Handler();
 8006542:	f7fa f878 	bl	8000636 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006546:	2100      	movs	r1, #0
 8006548:	4809      	ldr	r0, [pc, #36]	; (8006570 <MX_I2C1_Init+0x74>)
 800654a:	f7fc f9d7 	bl	80028fc <HAL_I2CEx_ConfigAnalogFilter>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <MX_I2C1_Init+0x5c>
  {
	  Error_Handler();
 8006554:	f7fa f86f 	bl	8000636 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006558:	2100      	movs	r1, #0
 800655a:	4805      	ldr	r0, [pc, #20]	; (8006570 <MX_I2C1_Init+0x74>)
 800655c:	f7fc fa36 	bl	80029cc <HAL_I2CEx_ConfigDigitalFilter>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <MX_I2C1_Init+0x6e>
  {
	  Error_Handler();
 8006566:	f7fa f866 	bl	8000636 <Error_Handler>
  }
}
 800656a:	bf00      	nop
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	2000011c 	.word	0x2000011c
 8006574:	40005400 	.word	0x40005400
 8006578:	00707cbb 	.word	0x00707cbb

0800657c <spi_write_command>:
  * @brief 	SPI command write (non-DMA).
  * @param 	*command points to the command array to send.
  * @param	len is the data length in byte.
  * @return None
  */
void spi_write_command(const uint8_t *command, uint16_t len){
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	807b      	strh	r3, [r7, #2]

	/*DC pin set low for command send*/
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8006588:	2200      	movs	r2, #0
 800658a:	2102      	movs	r1, #2
 800658c:	480b      	ldr	r0, [pc, #44]	; (80065bc <spi_write_command+0x40>)
 800658e:	f7fb fadd 	bl	8001b4c <HAL_GPIO_WritePin>

	/*SPI send with non-DMA method = blocking transfer*/
	HAL_StatusTypeDef err = HAL_SPI_Transmit(&hspi1, (uint8_t *)command, len, 10);
 8006592:	887a      	ldrh	r2, [r7, #2]
 8006594:	230a      	movs	r3, #10
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	4809      	ldr	r0, [pc, #36]	; (80065c0 <spi_write_command+0x44>)
 800659a:	f7fe f9cb 	bl	8004934 <HAL_SPI_Transmit>
 800659e:	4603      	mov	r3, r0
 80065a0:	73fb      	strb	r3, [r7, #15]

	switch(err){
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d002      	beq.n	80065ae <spi_write_command+0x32>
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d000      	beq.n	80065ae <spi_write_command+0x32>
		case HAL_TIMEOUT:
		case HAL_ERROR:
			Error_Handler();
		break;
		default:
		break;
 80065ac:	e002      	b.n	80065b4 <spi_write_command+0x38>
			Error_Handler();
 80065ae:	f7fa f842 	bl	8000636 <Error_Handler>
		break;
 80065b2:	bf00      	nop
	}
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	48000400 	.word	0x48000400
 80065c0:	200000b8 	.word	0x200000b8

080065c4 <spi_write_data>:
  * @brief 	SPI data write (non-DMA).
  * @param 	*data points to the data array to send.
  * @param	len is the data length in byte.
  * @return 	None
  */
void spi_write_data(const uint8_t *data, uint16_t len){
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	807b      	strh	r3, [r7, #2]

	/*DC pin set high for data send in next SPI transfer*/
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 80065d0:	2201      	movs	r2, #1
 80065d2:	2102      	movs	r1, #2
 80065d4:	480b      	ldr	r0, [pc, #44]	; (8006604 <spi_write_data+0x40>)
 80065d6:	f7fb fab9 	bl	8001b4c <HAL_GPIO_WritePin>

	/*SPI send (non-DMA) = blocking function*/
	HAL_StatusTypeDef err = HAL_SPI_Transmit(&hspi1, (uint8_t *)data, len, 10);
 80065da:	887a      	ldrh	r2, [r7, #2]
 80065dc:	230a      	movs	r3, #10
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4809      	ldr	r0, [pc, #36]	; (8006608 <spi_write_data+0x44>)
 80065e2:	f7fe f9a7 	bl	8004934 <HAL_SPI_Transmit>
 80065e6:	4603      	mov	r3, r0
 80065e8:	73fb      	strb	r3, [r7, #15]

	switch(err){
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d002      	beq.n	80065f6 <spi_write_data+0x32>
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d000      	beq.n	80065f6 <spi_write_data+0x32>
		case HAL_TIMEOUT:
		case HAL_ERROR:
			Error_Handler();
		break;
		default:
		break;
 80065f4:	e002      	b.n	80065fc <spi_write_data+0x38>
			Error_Handler();
 80065f6:	f7fa f81e 	bl	8000636 <Error_Handler>
		break;
 80065fa:	bf00      	nop
	}
}
 80065fc:	bf00      	nop
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	48000400 	.word	0x48000400
 8006608:	200000b8 	.word	0x200000b8

0800660c <fb_set_pixel>:
 * @param x is the x-coordinate
 * @param y is the y-coordinate
 * @param color is WHITE/BLACK
 */
static void fb_set_pixel(int16_t x, int16_t y, color_t color)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	80fb      	strh	r3, [r7, #6]
 8006616:	460b      	mov	r3, r1
 8006618:	80bb      	strh	r3, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	70fb      	strb	r3, [r7, #3]
	if(color==WHITE)
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d127      	bne.n	8006674 <fb_set_pixel+0x68>
		frame_buffer[BUFIDX(x,y)] |= PIXIDX(x);
 8006624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006628:	10db      	asrs	r3, r3, #3
 800662a:	b21b      	sxth	r3, r3
 800662c:	4619      	mov	r1, r3
 800662e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006632:	4613      	mov	r3, r2
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	440b      	add	r3, r1
 800663c:	4a25      	ldr	r2, [pc, #148]	; (80066d4 <fb_set_pixel+0xc8>)
 800663e:	5cd3      	ldrb	r3, [r2, r3]
 8006640:	b25a      	sxtb	r2, r3
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	2101      	movs	r1, #1
 800664a:	fa01 f303 	lsl.w	r3, r1, r3
 800664e:	b25b      	sxtb	r3, r3
 8006650:	4313      	orrs	r3, r2
 8006652:	b259      	sxtb	r1, r3
 8006654:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006658:	10db      	asrs	r3, r3, #3
 800665a:	b21b      	sxth	r3, r3
 800665c:	4618      	mov	r0, r3
 800665e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4403      	add	r3, r0
 800666c:	b2c9      	uxtb	r1, r1
 800666e:	4a19      	ldr	r2, [pc, #100]	; (80066d4 <fb_set_pixel+0xc8>)
 8006670:	54d1      	strb	r1, [r2, r3]
	else
		frame_buffer[BUFIDX(x,y)] &= ~PIXIDX(x);
}
 8006672:	e028      	b.n	80066c6 <fb_set_pixel+0xba>
		frame_buffer[BUFIDX(x,y)] &= ~PIXIDX(x);
 8006674:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006678:	10db      	asrs	r3, r3, #3
 800667a:	b21b      	sxth	r3, r3
 800667c:	4619      	mov	r1, r3
 800667e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	440b      	add	r3, r1
 800668c:	4a11      	ldr	r2, [pc, #68]	; (80066d4 <fb_set_pixel+0xc8>)
 800668e:	5cd3      	ldrb	r3, [r2, r3]
 8006690:	b25a      	sxtb	r2, r3
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	2101      	movs	r1, #1
 800669a:	fa01 f303 	lsl.w	r3, r1, r3
 800669e:	b25b      	sxtb	r3, r3
 80066a0:	43db      	mvns	r3, r3
 80066a2:	b25b      	sxtb	r3, r3
 80066a4:	4013      	ands	r3, r2
 80066a6:	b259      	sxtb	r1, r3
 80066a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066ac:	10db      	asrs	r3, r3, #3
 80066ae:	b21b      	sxth	r3, r3
 80066b0:	4618      	mov	r0, r3
 80066b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80066b6:	4613      	mov	r3, r2
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4403      	add	r3, r0
 80066c0:	b2c9      	uxtb	r1, r1
 80066c2:	4a04      	ldr	r2, [pc, #16]	; (80066d4 <fb_set_pixel+0xc8>)
 80066c4:	54d1      	strb	r1, [r2, r3]
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	2000048c 	.word	0x2000048c

080066d8 <fb_fill_area>:
 *	No SPI transfer is called yet. Only frame buffer operation invoked.
 * @param area is the area to fill with (x1,y1) the top left and (x2,y2) the lower right corner (inclusive)
 * @param color is a pointer to the pattern in non-volatile media i.e. MCU's Flash
 */
static void fb_fill_area(rect_t area, const color_t* color, bool negative)
{
 80066d8:	b590      	push	{r4, r7, lr}
 80066da:	b089      	sub	sp, #36	; 0x24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	f107 0408 	add.w	r4, r7, #8
 80066e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	70fb      	strb	r3, [r7, #3]
				frame_buffer[page]|= color[index++];
			}
		}
	}
	*/
	uint16_t width_in_byte = ((area.x2-area.x1+1) +7)>>3;
 80066ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80066ee:	461a      	mov	r2, r3
 80066f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	3308      	adds	r3, #8
 80066f8:	10db      	asrs	r3, r3, #3
 80066fa:	833b      	strh	r3, [r7, #24]
	uint8_t  pixel, bit_position;
	color_t _color;

	for(uint16_t y=0; y<(area.y2-area.y1+1); y++){
 80066fc:	2300      	movs	r3, #0
 80066fe:	83bb      	strh	r3, [r7, #28]
 8006700:	e053      	b.n	80067aa <fb_fill_area+0xd2>
		for(uint16_t x=0; x<(area.x2-area.x1+1); x++){
 8006702:	2300      	movs	r3, #0
 8006704:	837b      	strh	r3, [r7, #26]
 8006706:	e043      	b.n	8006790 <fb_fill_area+0xb8>
			pixel = color[(y*width_in_byte) + BUFIDX(x,0)];
 8006708:	8bbb      	ldrh	r3, [r7, #28]
 800670a:	8b3a      	ldrh	r2, [r7, #24]
 800670c:	fb02 f303 	mul.w	r3, r2, r3
 8006710:	8b7a      	ldrh	r2, [r7, #26]
 8006712:	08d2      	lsrs	r2, r2, #3
 8006714:	b292      	uxth	r2, r2
 8006716:	4413      	add	r3, r2
 8006718:	461a      	mov	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4413      	add	r3, r2
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	75fb      	strb	r3, [r7, #23]
			//pixel = BIT_REVERSE(pixel); //if there is no software setup to flip the bit, uncomment this line
			bit_position = x%8;
 8006722:	8b7b      	ldrh	r3, [r7, #26]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	75bb      	strb	r3, [r7, #22]
			pixel = pixel>>bit_position; //right shift to the lowest bit for comparison
 800672c:	7dfa      	ldrb	r2, [r7, #23]
 800672e:	7dbb      	ldrb	r3, [r7, #22]
 8006730:	fa42 f303 	asr.w	r3, r2, r3
 8006734:	75fb      	strb	r3, [r7, #23]

			//Image inverse can be implemented by swapping WHITE and BLACK
			if(negative){
 8006736:	78fb      	ldrb	r3, [r7, #3]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <fb_fill_area+0x7a>
				(pixel&0x01)?(_color=BLACK):(_color=WHITE);
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <fb_fill_area+0x74>
 8006746:	2300      	movs	r3, #0
 8006748:	77fb      	strb	r3, [r7, #31]
 800674a:	e00c      	b.n	8006766 <fb_fill_area+0x8e>
 800674c:	2301      	movs	r3, #1
 800674e:	77fb      	strb	r3, [r7, #31]
 8006750:	e009      	b.n	8006766 <fb_fill_area+0x8e>
			}else{
				(pixel&0x01)?(_color=WHITE):(_color=BLACK);
 8006752:	7dfb      	ldrb	r3, [r7, #23]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <fb_fill_area+0x8a>
 800675c:	2301      	movs	r3, #1
 800675e:	77fb      	strb	r3, [r7, #31]
 8006760:	e001      	b.n	8006766 <fb_fill_area+0x8e>
 8006762:	2300      	movs	r3, #0
 8006764:	77fb      	strb	r3, [r7, #31]
			}
				fb_set_pixel(area.x1+x, area.y1+y, _color);
 8006766:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800676a:	b29a      	uxth	r2, r3
 800676c:	8b7b      	ldrh	r3, [r7, #26]
 800676e:	4413      	add	r3, r2
 8006770:	b29b      	uxth	r3, r3
 8006772:	b218      	sxth	r0, r3
 8006774:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006778:	b29a      	uxth	r2, r3
 800677a:	8bbb      	ldrh	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	b29b      	uxth	r3, r3
 8006780:	b21b      	sxth	r3, r3
 8006782:	7ffa      	ldrb	r2, [r7, #31]
 8006784:	4619      	mov	r1, r3
 8006786:	f7ff ff41 	bl	800660c <fb_set_pixel>
		for(uint16_t x=0; x<(area.x2-area.x1+1); x++){
 800678a:	8b7b      	ldrh	r3, [r7, #26]
 800678c:	3301      	adds	r3, #1
 800678e:	837b      	strh	r3, [r7, #26]
 8006790:	8b7a      	ldrh	r2, [r7, #26]
 8006792:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006796:	4619      	mov	r1, r3
 8006798:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800679c:	1acb      	subs	r3, r1, r3
 800679e:	3301      	adds	r3, #1
 80067a0:	429a      	cmp	r2, r3
 80067a2:	dbb1      	blt.n	8006708 <fb_fill_area+0x30>
	for(uint16_t y=0; y<(area.y2-area.y1+1); y++){
 80067a4:	8bbb      	ldrh	r3, [r7, #28]
 80067a6:	3301      	adds	r3, #1
 80067a8:	83bb      	strh	r3, [r7, #28]
 80067aa:	8bba      	ldrh	r2, [r7, #28]
 80067ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067b0:	4619      	mov	r1, r3
 80067b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80067b6:	1acb      	subs	r3, r1, r3
 80067b8:	3301      	adds	r3, #1
 80067ba:	429a      	cmp	r2, r3
 80067bc:	dba1      	blt.n	8006702 <fb_fill_area+0x2a>
		}
	}
}
 80067be:	bf00      	nop
 80067c0:	3724      	adds	r7, #36	; 0x24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd90      	pop	{r4, r7, pc}
	...

080067c8 <fb_clear>:
  * @param	area to fill in frame buffer
  * @param 	color_t color is WHITE or BLACK
  * @return None
  */
static void fb_clear(rect_t area, color_t color)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	f107 0308 	add.w	r3, r7, #8
 80067d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80067d6:	4613      	mov	r3, r2
 80067d8:	71fb      	strb	r3, [r7, #7]
	color_t _color=0xff;
 80067da:	23ff      	movs	r3, #255	; 0xff
 80067dc:	75fb      	strb	r3, [r7, #23]

	if(color==BLACK){
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <fb_clear+0x20>
		_color=0x00;
 80067e4:	2300      	movs	r3, #0
 80067e6:	75fb      	strb	r3, [r7, #23]
	}

	for(uint16_t y=area.y1; y<=area.y2; y++)
 80067e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80067ec:	82bb      	strh	r3, [r7, #20]
 80067ee:	e01b      	b.n	8006828 <fb_clear+0x60>
	{
		for(uint16_t x=area.x1; x<=area.x2; x+=8)
 80067f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80067f4:	827b      	strh	r3, [r7, #18]
 80067f6:	e00f      	b.n	8006818 <fb_clear+0x50>
		{
			frame_buffer[BUFIDX(x,y)] = _color;
 80067f8:	8a7b      	ldrh	r3, [r7, #18]
 80067fa:	08db      	lsrs	r3, r3, #3
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	4619      	mov	r1, r3
 8006800:	8aba      	ldrh	r2, [r7, #20]
 8006802:	4613      	mov	r3, r2
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	490c      	ldr	r1, [pc, #48]	; (8006840 <fb_clear+0x78>)
 800680e:	7dfa      	ldrb	r2, [r7, #23]
 8006810:	54ca      	strb	r2, [r1, r3]
		for(uint16_t x=area.x1; x<=area.x2; x+=8)
 8006812:	8a7b      	ldrh	r3, [r7, #18]
 8006814:	3308      	adds	r3, #8
 8006816:	827b      	strh	r3, [r7, #18]
 8006818:	8a7b      	ldrh	r3, [r7, #18]
 800681a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800681e:	4293      	cmp	r3, r2
 8006820:	ddea      	ble.n	80067f8 <fb_clear+0x30>
	for(uint16_t y=area.y1; y<=area.y2; y++)
 8006822:	8abb      	ldrh	r3, [r7, #20]
 8006824:	3301      	adds	r3, #1
 8006826:	82bb      	strh	r3, [r7, #20]
 8006828:	8abb      	ldrh	r3, [r7, #20]
 800682a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800682e:	4293      	cmp	r3, r2
 8006830:	ddde      	ble.n	80067f0 <fb_clear+0x28>
		}
	}
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	2000048c 	.word	0x2000048c

08006844 <fb_spi_transfer>:
  * \b	Description:<br>
  * 	Fill GDDRAM of OLED with frame buffer content by SPI transfers<br>
  * @param	area is the content in frame buffer to copy to GDDRAM
  */
static void fb_spi_transfer(rect_t area)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	463b      	mov	r3, r7
 800684c:	e883 0003 	stmia.w	r3, {r0, r1}
	/*avoid running outside array index, may use assert here*/
	if(	area.y1>(OLED_VER_RES-1)|| area.y2>(OLED_VER_RES-1) || area.x2>(OLED_HOR_RES-1))
 8006850:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006854:	2b7f      	cmp	r3, #127	; 0x7f
 8006856:	dc07      	bgt.n	8006868 <fb_spi_transfer+0x24>
 8006858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800685c:	2b7f      	cmp	r3, #127	; 0x7f
 800685e:	dc03      	bgt.n	8006868 <fb_spi_transfer+0x24>
 8006860:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006864:	2b5f      	cmp	r3, #95	; 0x5f
 8006866:	dd05      	ble.n	8006874 <fb_spi_transfer+0x30>
	{
		assert_failed((uint8_t *)__FILE__,__LINE__);
 8006868:	f240 319a 	movw	r1, #922	; 0x39a
 800686c:	482a      	ldr	r0, [pc, #168]	; (8006918 <fb_spi_transfer+0xd4>)
 800686e:	f7f9 fee9 	bl	8000644 <assert_failed>
 8006872:	e04d      	b.n	8006910 <fb_spi_transfer+0xcc>
		return;
	}

	/*Set segment address with command {0x21, start SEG, end SEG}*/
	uint8_t cmd[3] = {0x21, (uint8_t)area.y1, (uint8_t)area.y2};
 8006874:	2321      	movs	r3, #33	; 0x21
 8006876:	723b      	strb	r3, [r7, #8]
 8006878:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	727b      	strb	r3, [r7, #9]
 8006880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	72bb      	strb	r3, [r7, #10]
	spi_write_command((const uint8_t *)&cmd, 3);
 8006888:	f107 0308 	add.w	r3, r7, #8
 800688c:	2103      	movs	r1, #3
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff fe74 	bl	800657c <spi_write_command>

	/*Set page address with command {0x22, start PAGE=0, end PAGE=11(for 96*128 OLED resolution)}*/
	cmd[0] = 0x22;
 8006894:	2322      	movs	r3, #34	; 0x22
 8006896:	723b      	strb	r3, [r7, #8]
	cmd[1] = BUFIDX(0,0);
 8006898:	2300      	movs	r3, #0
 800689a:	727b      	strb	r3, [r7, #9]
	cmd[2] = BUFIDX((OLED_HOR_RES-1),0);
 800689c:	230b      	movs	r3, #11
 800689e:	72bb      	strb	r3, [r7, #10]
	spi_write_command((const uint8_t *)&cmd, 3);
 80068a0:	f107 0308 	add.w	r3, r7, #8
 80068a4:	2103      	movs	r1, #3
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff fe68 	bl	800657c <spi_write_command>

	uint16_t length = (area.y2-area.y1+1)*(cmd[2]-cmd[1]+1);
 80068ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068b0:	461a      	mov	r2, r3
 80068b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	3301      	adds	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	7abb      	ldrb	r3, [r7, #10]
 80068be:	4619      	mov	r1, r3
 80068c0:	7a7b      	ldrb	r3, [r7, #9]
 80068c2:	1acb      	subs	r3, r1, r3
 80068c4:	3301      	adds	r3, #1
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	fb12 f303 	smulbb	r3, r2, r3
 80068cc:	81fb      	strh	r3, [r7, #14]
	/*DC pin set high for data send in next SPI transfer*/
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 80068ce:	2201      	movs	r2, #1
 80068d0:	2102      	movs	r1, #2
 80068d2:	4812      	ldr	r0, [pc, #72]	; (800691c <fb_spi_transfer+0xd8>)
 80068d4:	f7fb f93a 	bl	8001b4c <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	/*DMA send = non blocking function*/
	HAL_StatusTypeDef err = HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)&frame_buffer[BUFIDX(0,area.y1)], length);
#else
	/*non-DMA SPI transfer, it is a blocking function*/
	HAL_StatusTypeDef err = HAL_SPI_Transmit(&hspi1, (uint8_t *)&frame_buffer[BUFIDX(0,area.y1)], length, 10);
 80068d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80068dc:	461a      	mov	r2, r3
 80068de:	4613      	mov	r3, r2
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	461a      	mov	r2, r3
 80068e8:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <fb_spi_transfer+0xdc>)
 80068ea:	18d1      	adds	r1, r2, r3
 80068ec:	89fa      	ldrh	r2, [r7, #14]
 80068ee:	230a      	movs	r3, #10
 80068f0:	480c      	ldr	r0, [pc, #48]	; (8006924 <fb_spi_transfer+0xe0>)
 80068f2:	f7fe f81f 	bl	8004934 <HAL_SPI_Transmit>
 80068f6:	4603      	mov	r3, r0
 80068f8:	737b      	strb	r3, [r7, #13]
	fb_flush_pending_clear();
 80068fa:	f000 f84f 	bl	800699c <fb_flush_pending_clear>
#endif

	switch(err){
 80068fe:	7b7b      	ldrb	r3, [r7, #13]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d002      	beq.n	800690a <fb_spi_transfer+0xc6>
 8006904:	2b03      	cmp	r3, #3
 8006906:	d000      	beq.n	800690a <fb_spi_transfer+0xc6>
		case HAL_TIMEOUT:
		case HAL_ERROR:
			Error_Handler();
			break;
		default:
			break;
 8006908:	e002      	b.n	8006910 <fb_spi_transfer+0xcc>
			Error_Handler();
 800690a:	f7f9 fe94 	bl	8000636 <Error_Handler>
			break;
 800690e:	bf00      	nop
	}
}
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	08007f0c 	.word	0x08007f0c
 800691c:	48000400 	.word	0x48000400
 8006920:	2000048c 	.word	0x2000048c
 8006924:	200000b8 	.word	0x200000b8

08006928 <fb_flush_pending_set>:
 *	Set flag to tell that GUI content to be flushed.
 *	Used in HAL_GPIO_EXTI_Callback().
 *@param area is the content in frame buffer to copy to GDDRAM
 */
static void fb_flush_pending_set(rect_t area)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	463b      	mov	r3, r7
 8006930:	e883 0003 	stmia.w	r3, {r0, r1}
	fb_flush_area = area;
 8006934:	4b07      	ldr	r3, [pc, #28]	; (8006954 <fb_flush_pending_set+0x2c>)
 8006936:	461a      	mov	r2, r3
 8006938:	463b      	mov	r3, r7
 800693a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800693e:	e882 0003 	stmia.w	r2, {r0, r1}
	fb_flush_pending = true;
 8006942:	4b05      	ldr	r3, [pc, #20]	; (8006958 <fb_flush_pending_set+0x30>)
 8006944:	2201      	movs	r2, #1
 8006946:	701a      	strb	r2, [r3, #0]
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	20000168 	.word	0x20000168
 8006958:	200000b5 	.word	0x200000b5

0800695c <fb_flush_suspend>:

/**
 * @brief Wait until previous SPI transfer (if any) has finished
 */
static void fb_flush_suspend(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
	uint8_t timeout = 20;
 8006962:	2314      	movs	r3, #20
 8006964:	71fb      	strb	r3, [r7, #7]
	while(fb_flush_pending_get())
 8006966:	e00d      	b.n	8006984 <fb_flush_suspend+0x28>
	{
		if(timeout-- == 0)
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	1e5a      	subs	r2, r3, #1
 800696c:	71fa      	strb	r2, [r7, #7]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d105      	bne.n	800697e <fb_flush_suspend+0x22>
		{
	#ifdef USE_FULL_ASSERT
				//Error with DMA Flag not protected well. Check timing.
				assert_failed((uint8_t *)__FILE__, __LINE__);
 8006972:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8006976:	4808      	ldr	r0, [pc, #32]	; (8006998 <fb_flush_suspend+0x3c>)
 8006978:	f7f9 fe64 	bl	8000644 <assert_failed>
	#endif
				break;
 800697c:	e007      	b.n	800698e <fb_flush_suspend+0x32>
		}
		HAL_Delay(1);
 800697e:	2001      	movs	r0, #1
 8006980:	f7fa f9cc 	bl	8000d1c <HAL_Delay>
	while(fb_flush_pending_get())
 8006984:	f000 f816 	bl	80069b4 <fb_flush_pending_get>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1ec      	bne.n	8006968 <fb_flush_suspend+0xc>
	}
}
 800698e:	bf00      	nop
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	08007f0c 	.word	0x08007f0c

0800699c <fb_flush_pending_clear>:
 * @brief
 * \b	Description:
 * 	Clear flush pending flag
 */
static void fb_flush_pending_clear(void)
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
	fb_flush_pending = false;
 80069a0:	4b03      	ldr	r3, [pc, #12]	; (80069b0 <fb_flush_pending_clear+0x14>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]
}
 80069a6:	bf00      	nop
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	200000b5 	.word	0x200000b5

080069b4 <fb_flush_pending_get>:

/**
 * @return Frame buffer flush pending flag
 */
static bool fb_flush_pending_get(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
	return fb_flush_pending;
 80069b8:	4b03      	ldr	r3, [pc, #12]	; (80069c8 <fb_flush_pending_get+0x14>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	b2db      	uxtb	r3, r3
}
 80069be:	4618      	mov	r0, r3
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	200000b5 	.word	0x200000b5

080069cc <i2c_write>:
 * @param reg is the register address sending with LSB first i.e. 0xf0 sending first with reg=0x0af0
 * @param *data points to the data buffer to send
 * @param len is the byte count to send
 */
static void i2c_write(uint8_t slave, uint16_t reg, const uint8_t *data, uint16_t len)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08a      	sub	sp, #40	; 0x28
 80069d0:	af04      	add	r7, sp, #16
 80069d2:	60ba      	str	r2, [r7, #8]
 80069d4:	461a      	mov	r2, r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	73fb      	strb	r3, [r7, #15]
 80069da:	460b      	mov	r3, r1
 80069dc:	81bb      	strh	r3, [r7, #12]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef err;

	if(len){
 80069e2:	88fb      	ldrh	r3, [r7, #6]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01c      	beq.n	8006a22 <i2c_write+0x56>
		//swap high and low bytes so that lower byte is sent first
		uint16_t reg_byte_swap = ((reg<<8)&0xff00) | ((reg>>8)&0x00ff);
 80069e8:	89bb      	ldrh	r3, [r7, #12]
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	b21a      	sxth	r2, r3
 80069ee:	89bb      	ldrh	r3, [r7, #12]
 80069f0:	0a1b      	lsrs	r3, r3, #8
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	b21b      	sxth	r3, r3
 80069f6:	4313      	orrs	r3, r2
 80069f8:	b21b      	sxth	r3, r3
 80069fa:	82bb      	strh	r3, [r7, #20]
		err = HAL_I2C_Mem_Write(&hi2c1, slave<<1, reg_byte_swap, 2, (uint8_t *)data, len, 5000);
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	b299      	uxth	r1, r3
 8006a04:	8aba      	ldrh	r2, [r7, #20]
 8006a06:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a0a:	9302      	str	r3, [sp, #8]
 8006a0c:	88fb      	ldrh	r3, [r7, #6]
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	2302      	movs	r3, #2
 8006a16:	4810      	ldr	r0, [pc, #64]	; (8006a58 <i2c_write+0x8c>)
 8006a18:	f7fb fbde 	bl	80021d8 <HAL_I2C_Mem_Write>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]
 8006a20:	e00e      	b.n	8006a40 <i2c_write+0x74>
	}
	else
	{
		err = HAL_I2C_Master_Transmit(&hi2c1, slave<<1, (uint8_t *)&reg, 2, 500);
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	b299      	uxth	r1, r3
 8006a2a:	f107 020c 	add.w	r2, r7, #12
 8006a2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	2302      	movs	r3, #2
 8006a36:	4808      	ldr	r0, [pc, #32]	; (8006a58 <i2c_write+0x8c>)
 8006a38:	f7fb f9e4 	bl	8001e04 <HAL_I2C_Master_Transmit>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	75fb      	strb	r3, [r7, #23]
	}

	switch(err){
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d000      	beq.n	8006a48 <i2c_write+0x7c>
		case HAL_ERROR:
			Error_Handler();
			break;
			default:
			break;
 8006a46:	e002      	b.n	8006a4e <i2c_write+0x82>
			Error_Handler();
 8006a48:	f7f9 fdf5 	bl	8000636 <Error_Handler>
			break;
 8006a4c:	bf00      	nop
		}
}
 8006a4e:	bf00      	nop
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	2000011c 	.word	0x2000011c

08006a5c <i2c_read>:
 * @param reg is the register to read from
 * @param buffer points to an array to keep incoming characters
 * @param len is the byte count to read
 */
static void i2c_read(uint8_t slave, uint16_t reg, uint8_t *buffer, uint16_t len)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60ba      	str	r2, [r7, #8]
 8006a64:	461a      	mov	r2, r3
 8006a66:	4603      	mov	r3, r0
 8006a68:	73fb      	strb	r3, [r7, #15]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	81bb      	strh	r3, [r7, #12]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef err = HAL_I2C_Master_Transmit(&hi2c1, slave<<1, (uint8_t *)&reg, 2, 500);
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	b299      	uxth	r1, r3
 8006a7a:	f107 020c 	add.w	r2, r7, #12
 8006a7e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	2302      	movs	r3, #2
 8006a86:	4816      	ldr	r0, [pc, #88]	; (8006ae0 <i2c_read+0x84>)
 8006a88:	f7fb f9bc 	bl	8001e04 <HAL_I2C_Master_Transmit>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	75fb      	strb	r3, [r7, #23]
	switch(err){
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d000      	beq.n	8006a98 <i2c_read+0x3c>
			case HAL_ERROR:
				Error_Handler();
				break;
				default:
				break;
 8006a96:	e002      	b.n	8006a9e <i2c_read+0x42>
				Error_Handler();
 8006a98:	f7f9 fdcd 	bl	8000636 <Error_Handler>
				break;
 8006a9c:	bf00      	nop
			}

	HAL_DWT_Delay_us(200); //delay for 200us is mandatory for I2C Read
 8006a9e:	20c8      	movs	r0, #200	; 0xc8
 8006aa0:	f7ff fbd8 	bl	8006254 <HAL_DWT_Delay_us>

	err = HAL_I2C_Master_Receive(&hi2c1, (slave<<1)|0x01, buffer, len, 1000);
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	b21b      	sxth	r3, r3
 8006aaa:	f043 0301 	orr.w	r3, r3, #1
 8006aae:	b21b      	sxth	r3, r3
 8006ab0:	b299      	uxth	r1, r3
 8006ab2:	88fa      	ldrh	r2, [r7, #6]
 8006ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	4613      	mov	r3, r2
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	4808      	ldr	r0, [pc, #32]	; (8006ae0 <i2c_read+0x84>)
 8006ac0:	f7fb fa94 	bl	8001fec <HAL_I2C_Master_Receive>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	75fb      	strb	r3, [r7, #23]

	switch(err){
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d000      	beq.n	8006ad0 <i2c_read+0x74>
		case HAL_ERROR:
			Error_Handler();
			break;
			default:
			break;
 8006ace:	e002      	b.n	8006ad6 <i2c_read+0x7a>
			Error_Handler();
 8006ad0:	f7f9 fdb1 	bl	8000636 <Error_Handler>
			break;
 8006ad4:	bf00      	nop
		}
}
 8006ad6:	bf00      	nop
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	2000011c 	.word	0x2000011c

08006ae4 <touch_crc_checksum>:
 * @param 	byte_cnt is the size of PM_content, TM_content, & DM_content arrays defined in SSD7317_Init_table.c.
 * @param 	trig_cmd is the command to trigger a CRC read: PM trigger(0x03), DM trigger (0x05), TM trigger (0x09)
 * @return 	CRC value calculated by SSD7317
 */
static uint16_t touch_crc_checksum(uint16_t byte_cnt, uint8_t trig_cmd)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	460a      	mov	r2, r1
 8006aee:	80fb      	strh	r3, [r7, #6]
 8006af0:	4613      	mov	r3, r2
 8006af2:	717b      	strb	r3, [r7, #5]
	uint16_t i2c_ret=0, expiry_ms=5; //preset 5ms for CRC calculation time
 8006af4:	2300      	movs	r3, #0
 8006af6:	81bb      	strh	r3, [r7, #12]
 8006af8:	2305      	movs	r3, #5
 8006afa:	81fb      	strh	r3, [r7, #14]

	//(1)Clear SA
	i2c_write(TOUCH_SA, 0x0000, 0, 0);
 8006afc:	2300      	movs	r3, #0
 8006afe:	2200      	movs	r2, #0
 8006b00:	2100      	movs	r1, #0
 8006b02:	2053      	movs	r0, #83	; 0x53
 8006b04:	f7ff ff62 	bl	80069cc <i2c_write>

	//(2)Send CRC trigger command
	uint8_t data[3] = {(uint8_t)byte_cnt&0xff, (uint8_t)(byte_cnt>>8), trig_cmd};
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	723b      	strb	r3, [r7, #8]
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	0a1b      	lsrs	r3, r3, #8
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	727b      	strb	r3, [r7, #9]
 8006b18:	797b      	ldrb	r3, [r7, #5]
 8006b1a:	72bb      	strb	r3, [r7, #10]
	i2c_write(TOUCH_SA_BIOS, 0x8100, (const uint8_t *)&data, 3);
 8006b1c:	f107 0208 	add.w	r2, r7, #8
 8006b20:	2303      	movs	r3, #3
 8006b22:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8006b26:	2057      	movs	r0, #87	; 0x57
 8006b28:	f7ff ff50 	bl	80069cc <i2c_write>

	//(3)Read S&L and wait until CRC is ready; otherwise, a timeout failure triggered
	while(i2c_ret!=0xcaf0){
 8006b2c:	e016      	b.n	8006b5c <touch_crc_checksum+0x78>
		i2c_read(TOUCH_SA, 0x0af0, (uint8_t *)&i2c_ret, 2);
 8006b2e:	f107 020c 	add.w	r2, r7, #12
 8006b32:	2302      	movs	r3, #2
 8006b34:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8006b38:	2053      	movs	r0, #83	; 0x53
 8006b3a:	f7ff ff8f 	bl	8006a5c <i2c_read>
		HAL_Delay(1);
 8006b3e:	2001      	movs	r0, #1
 8006b40:	f7fa f8ec 	bl	8000d1c <HAL_Delay>
		if((expiry_ms--)==0){
 8006b44:	89fb      	ldrh	r3, [r7, #14]
 8006b46:	1e5a      	subs	r2, r3, #1
 8006b48:	81fa      	strh	r2, [r7, #14]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <touch_crc_checksum+0x78>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006b4e:	f240 414d 	movw	r1, #1101	; 0x44d
 8006b52:	480b      	ldr	r0, [pc, #44]	; (8006b80 <touch_crc_checksum+0x9c>)
 8006b54:	f7f9 fd76 	bl	8000644 <assert_failed>
#endif
			return 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e00d      	b.n	8006b78 <touch_crc_checksum+0x94>
	while(i2c_ret!=0xcaf0){
 8006b5c:	89bb      	ldrh	r3, [r7, #12]
 8006b5e:	f64c 22f0 	movw	r2, #51952	; 0xcaf0
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d1e3      	bne.n	8006b2e <touch_crc_checksum+0x4a>
		}
	}

	//(4)Read CRC from 0x8100
	i2c_read(TOUCH_SA_BIOS, 0x8100, (uint8_t *)&i2c_ret, 2);
 8006b66:	f107 020c 	add.w	r2, r7, #12
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8006b70:	2057      	movs	r0, #87	; 0x57
 8006b72:	f7ff ff73 	bl	8006a5c <i2c_read>

	return i2c_ret;
 8006b76:	89bb      	ldrh	r3, [r7, #12]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	08007f0c 	.word	0x08007f0c

08006b84 <touch_init>:
 *@brief
 *\b	Description:<br>
 *	Initialize touch interface to implement "Reset and Boot" procedures as stated on Section 3<br>
 */
static void touch_init(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
	uint16_t i2c_ret;

	//(0) Initialize micro-seconds software delay in STM32. A delay of 200us is mandatory in Touch_I2C_Read().
	if(HAL_DWT_Delay_Init()){
 8006b8a:	f000 fa3b 	bl	8007004 <HAL_DWT_Delay_Init>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d004      	beq.n	8006b9e <touch_init+0x1a>
#ifdef USE_FULL_ASSERT
		assert_failed((uint8_t *)__FILE__, __LINE__);
 8006b94:	f240 4165 	movw	r1, #1125	; 0x465
 8006b98:	4879      	ldr	r0, [pc, #484]	; (8006d80 <touch_init+0x1fc>)
 8006b9a:	f7f9 fd53 	bl	8000644 <assert_failed>
#endif
	}

	//(1) IC Initialization with 0x0af0 (I2C send with lower byte first)
	i2c_read(TOUCH_SA, 0x0af0, (uint8_t *)&i2c_ret, 2);
 8006b9e:	1d3a      	adds	r2, r7, #4
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8006ba6:	2053      	movs	r0, #83	; 0x53
 8006ba8:	f7ff ff58 	bl	8006a5c <i2c_read>
	if(i2c_ret!=0xcaf0){
 8006bac:	88bb      	ldrh	r3, [r7, #4]
 8006bae:	f64c 22f0 	movw	r2, #51952	; 0xcaf0
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d005      	beq.n	8006bc2 <touch_init+0x3e>
#ifdef USE_FULL_ASSERT
		assert_failed((uint8_t *)__FILE__, __LINE__);
 8006bb6:	f240 416d 	movw	r1, #1133	; 0x46d
 8006bba:	4871      	ldr	r0, [pc, #452]	; (8006d80 <touch_init+0x1fc>)
 8006bbc:	f7f9 fd42 	bl	8000644 <assert_failed>
 8006bc0:	e0db      	b.n	8006d7a <touch_init+0x1f6>
		return;
	}

	//(2) Send byte sequence for PM-select for 1228 bytes in 24 blocks of 512 bytes each
	//PM Select
	i2c_write(TOUCH_SA, 0x0001, 0, 0);
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	2053      	movs	r0, #83	; 0x53
 8006bca:	f7ff feff 	bl	80069cc <i2c_write>
	for(uint8_t n=0; n<24; n++){
 8006bce:	2300      	movs	r3, #0
 8006bd0:	71fb      	strb	r3, [r7, #7]
 8006bd2:	e010      	b.n	8006bf6 <touch_init+0x72>
		i2c_write(TOUCH_SA_BIOS, 2*n, (const uint8_t *)&FW_PM.content[n*512], 512);
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	b299      	uxth	r1, r3
 8006bdc:	4b69      	ldr	r3, [pc, #420]	; (8006d84 <touch_init+0x200>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	79fa      	ldrb	r2, [r7, #7]
 8006be2:	0252      	lsls	r2, r2, #9
 8006be4:	441a      	add	r2, r3
 8006be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bea:	2057      	movs	r0, #87	; 0x57
 8006bec:	f7ff feee 	bl	80069cc <i2c_write>
	for(uint8_t n=0; n<24; n++){
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	71fb      	strb	r3, [r7, #7]
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	2b17      	cmp	r3, #23
 8006bfa:	d9eb      	bls.n	8006bd4 <touch_init+0x50>
	}

	//(3) Send byte sequence for TM-select 1844 bytes,
	i2c_write(TOUCH_SA, 0x0003, 0, 0);
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2103      	movs	r1, #3
 8006c02:	2053      	movs	r0, #83	; 0x53
 8006c04:	f7ff fee2 	bl	80069cc <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0, (const uint8_t *)&FW_TM.content[0], 512);
 8006c08:	4b5f      	ldr	r3, [pc, #380]	; (8006d88 <touch_init+0x204>)
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c10:	2100      	movs	r1, #0
 8006c12:	2057      	movs	r0, #87	; 0x57
 8006c14:	f7ff feda 	bl	80069cc <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0002, (const uint8_t *)&FW_TM.content[512], 512);
 8006c18:	4b5b      	ldr	r3, [pc, #364]	; (8006d88 <touch_init+0x204>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8006c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c24:	2102      	movs	r1, #2
 8006c26:	2057      	movs	r0, #87	; 0x57
 8006c28:	f7ff fed0 	bl	80069cc <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0004, (const uint8_t *)&FW_TM.content[1024], 512);
 8006c2c:	4b56      	ldr	r3, [pc, #344]	; (8006d88 <touch_init+0x204>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8006c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c38:	2104      	movs	r1, #4
 8006c3a:	2057      	movs	r0, #87	; 0x57
 8006c3c:	f7ff fec6 	bl	80069cc <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0006, (const uint8_t *)&FW_TM.content[1536], 308); //send remainder bytes
 8006c40:	4b51      	ldr	r3, [pc, #324]	; (8006d88 <touch_init+0x204>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 8006c48:	f44f 739a 	mov.w	r3, #308	; 0x134
 8006c4c:	2106      	movs	r1, #6
 8006c4e:	2057      	movs	r0, #87	; 0x57
 8006c50:	f7ff febc 	bl	80069cc <i2c_write>

	//(4) Send byte sequence for DM-select for 2048 bytes
	i2c_write(TOUCH_SA, 0x0002, 0, 0);
 8006c54:	2300      	movs	r3, #0
 8006c56:	2200      	movs	r2, #0
 8006c58:	2102      	movs	r1, #2
 8006c5a:	2053      	movs	r0, #83	; 0x53
 8006c5c:	f7ff feb6 	bl	80069cc <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0, (const uint8_t *)&FW_DM.content[0], 512);
 8006c60:	4b4a      	ldr	r3, [pc, #296]	; (8006d8c <touch_init+0x208>)
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c68:	2100      	movs	r1, #0
 8006c6a:	2057      	movs	r0, #87	; 0x57
 8006c6c:	f7ff feae 	bl	80069cc <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0002, (const uint8_t *)&FW_DM.content[512], 512);
 8006c70:	4b46      	ldr	r3, [pc, #280]	; (8006d8c <touch_init+0x208>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8006c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c7c:	2102      	movs	r1, #2
 8006c7e:	2057      	movs	r0, #87	; 0x57
 8006c80:	f7ff fea4 	bl	80069cc <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0004, (const uint8_t *)&FW_DM.content[1024], 512);
 8006c84:	4b41      	ldr	r3, [pc, #260]	; (8006d8c <touch_init+0x208>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8006c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c90:	2104      	movs	r1, #4
 8006c92:	2057      	movs	r0, #87	; 0x57
 8006c94:	f7ff fe9a 	bl	80069cc <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0006, (const uint8_t *)&FW_DM.content[1536], 512);
 8006c98:	4b3c      	ldr	r3, [pc, #240]	; (8006d8c <touch_init+0x208>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 8006ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ca4:	2106      	movs	r1, #6
 8006ca6:	2057      	movs	r0, #87	; 0x57
 8006ca8:	f7ff fe90 	bl	80069cc <i2c_write>

	//Do checksum for PM Trig
	if(touch_crc_checksum(FW_PM.byte_cnt, 0x03)!=FW_PM.crc){
 8006cac:	4b35      	ldr	r3, [pc, #212]	; (8006d84 <touch_init+0x200>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2103      	movs	r1, #3
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff ff15 	bl	8006ae4 <touch_crc_checksum>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4b31      	ldr	r3, [pc, #196]	; (8006d84 <touch_init+0x200>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d004      	beq.n	8006cd0 <touch_init+0x14c>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006cc6:	f240 418a 	movw	r1, #1162	; 0x48a
 8006cca:	482d      	ldr	r0, [pc, #180]	; (8006d80 <touch_init+0x1fc>)
 8006ccc:	f7f9 fcba 	bl	8000644 <assert_failed>
#endif
	}
	//Do checksum for TM Trig
	if(touch_crc_checksum(FW_TM.byte_cnt, 0x09)!=FW_TM.crc){
 8006cd0:	4b2d      	ldr	r3, [pc, #180]	; (8006d88 <touch_init+0x204>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2109      	movs	r1, #9
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff ff03 	bl	8006ae4 <touch_crc_checksum>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4b29      	ldr	r3, [pc, #164]	; (8006d88 <touch_init+0x204>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d004      	beq.n	8006cf4 <touch_init+0x170>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006cea:	f44f 6192 	mov.w	r1, #1168	; 0x490
 8006cee:	4824      	ldr	r0, [pc, #144]	; (8006d80 <touch_init+0x1fc>)
 8006cf0:	f7f9 fca8 	bl	8000644 <assert_failed>
#endif
	}
	//Do checksum for DM Trig
	if(touch_crc_checksum(FW_DM.byte_cnt, 0x05)!=FW_DM.crc){
 8006cf4:	4b25      	ldr	r3, [pc, #148]	; (8006d8c <touch_init+0x208>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2105      	movs	r1, #5
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff fef1 	bl	8006ae4 <touch_crc_checksum>
 8006d02:	4603      	mov	r3, r0
 8006d04:	461a      	mov	r2, r3
 8006d06:	4b21      	ldr	r3, [pc, #132]	; (8006d8c <touch_init+0x208>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d004      	beq.n	8006d18 <touch_init+0x194>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006d0e:	f240 4196 	movw	r1, #1174	; 0x496
 8006d12:	481b      	ldr	r0, [pc, #108]	; (8006d80 <touch_init+0x1fc>)
 8006d14:	f7f9 fc96 	bl	8000644 <assert_failed>
#endif
	}

	//(5) MCU Un-stall(means passing control to MCU)
	i2c_write(TOUCH_SA, 0x0000, 0, 0);
 8006d18:	2300      	movs	r3, #0
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	2053      	movs	r0, #83	; 0x53
 8006d20:	f7ff fe54 	bl	80069cc <i2c_write>
	uint8_t data[2]={0,0};
 8006d24:	2300      	movs	r3, #0
 8006d26:	703b      	strb	r3, [r7, #0]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	707b      	strb	r3, [r7, #1]
	i2c_write(TOUCH_SA_BIOS, 0x8300, (const uint8_t *)&data, 2);
 8006d2c:	463a      	mov	r2, r7
 8006d2e:	2302      	movs	r3, #2
 8006d30:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8006d34:	2057      	movs	r0, #87	; 0x57
 8006d36:	f7ff fe49 	bl	80069cc <i2c_write>
	data[0]=0x03;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	703b      	strb	r3, [r7, #0]
	i2c_write(TOUCH_SA_BIOS, 0x8000, (const uint8_t *)&data, 2);
 8006d3e:	463a      	mov	r2, r7
 8006d40:	2302      	movs	r3, #2
 8006d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d46:	2057      	movs	r0, #87	; 0x57
 8006d48:	f7ff fe40 	bl	80069cc <i2c_write>
	data[0]=0x00;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	703b      	strb	r3, [r7, #0]
	i2c_write(TOUCH_SA_BIOS, 0x8000, (const uint8_t *)&data, 2);
 8006d50:	463a      	mov	r2, r7
 8006d52:	2302      	movs	r3, #2
 8006d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d58:	2057      	movs	r0, #87	; 0x57
 8006d5a:	f7ff fe37 	bl	80069cc <i2c_write>

	//(6) After MCU Un-stall, wait 5ms
	HAL_Delay(5);
 8006d5e:	2005      	movs	r0, #5
 8006d60:	f7f9 ffdc 	bl	8000d1c <HAL_Delay>

	//(7) Send display command 0xf4, 0x90 for initialization complete
	data[0]=0xf4;
 8006d64:	23f4      	movs	r3, #244	; 0xf4
 8006d66:	703b      	strb	r3, [r7, #0]
	data[1]=0x90;
 8006d68:	2390      	movs	r3, #144	; 0x90
 8006d6a:	707b      	strb	r3, [r7, #1]
	spi_write_command((const uint8_t*)&data, 2);
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	2102      	movs	r1, #2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff fc03 	bl	800657c <spi_write_command>

	//(8) Clear interrupt
	touch_event_clear();
 8006d76:	f000 f80b 	bl	8006d90 <touch_event_clear>
}
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	08007f0c 	.word	0x08007f0c
 8006d84:	2000000c 	.word	0x2000000c
 8006d88:	20000018 	.word	0x20000018
 8006d8c:	20000024 	.word	0x20000024

08006d90 <touch_event_clear>:
 * \b Note:<br>
 * 		There is a typo error on section 3.3.6. <br>
 * 		The correct sequence should be 0x43 0x00 0x00 0x00.<br>
 */
static void touch_event_clear(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
	uint16_t cmd=0; //sending two bytes of 0x00
 8006d96:	2300      	movs	r3, #0
 8006d98:	80fb      	strh	r3, [r7, #6]

	i2c_write(TOUCH_SA, 0x0043, (const uint8_t *)&cmd, 2);
 8006d9a:	1dba      	adds	r2, r7, #6
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	2143      	movs	r1, #67	; 0x43
 8006da0:	2053      	movs	r0, #83	; 0x53
 8006da2:	f7ff fe13 	bl	80069cc <i2c_write>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006da6:	b672      	cpsid	i

	__disable_irq();
	touch_event_flag = false;
 8006da8:	4b03      	ldr	r3, [pc, #12]	; (8006db8 <touch_event_clear+0x28>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006dae:	b662      	cpsie	i
	__enable_irq();

}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	200000b4 	.word	0x200000b4

08006dbc <touch_event_set>:
 * @brief
 * \b		Description:<br>
 * 		Set IRQ flag in IRQ handler for a high-to-low IRQ pin transition triggered by a touch event
 */
void touch_event_set(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
	touch_event_flag = true;
 8006dc0:	4b03      	ldr	r3, [pc, #12]	; (8006dd0 <touch_event_set+0x14>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	701a      	strb	r2, [r3, #0]
}
 8006dc6:	bf00      	nop
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	200000b4 	.word	0x200000b4

08006dd4 <ssd7317_get_charsize>:
/**
 * @brief
 * \b Description:<br>
 */
void   ssd7317_get_charsize(const tFont* font, uint16_t ascii_code, uint16_t *w, uint16_t *h)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	607a      	str	r2, [r7, #4]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	460b      	mov	r3, r1
 8006de2:	817b      	strh	r3, [r7, #10]
	*w=0; *h=0;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2200      	movs	r2, #0
 8006dee:	801a      	strh	r2, [r3, #0]
	const tChar* pChar = font->chars;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	617b      	str	r3, [r7, #20]

	if(pChar!=0){
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d016      	beq.n	8006e2a <ssd7317_get_charsize+0x56>
		uint16_t _code = ascii_code-pChar[0].code; //need to offset the first array member
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	897a      	ldrh	r2, [r7, #10]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	827b      	strh	r3, [r7, #18]
		*w = pChar[_code].image->width;
 8006e08:	8a7b      	ldrh	r3, [r7, #18]
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4413      	add	r3, r2
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	889a      	ldrh	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	801a      	strh	r2, [r3, #0]
		*h = pChar[_code].image->height;
 8006e18:	8a7b      	ldrh	r3, [r7, #18]
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4413      	add	r3, r2
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	88da      	ldrh	r2, [r3, #6]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	801a      	strh	r2, [r3, #0]
	}else{
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
#endif
	}
}
 8006e28:	e004      	b.n	8006e34 <ssd7317_get_charsize+0x60>
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006e2a:	f240 51e9 	movw	r1, #1513	; 0x5e9
 8006e2e:	4803      	ldr	r0, [pc, #12]	; (8006e3c <ssd7317_get_charsize+0x68>)
 8006e30:	f7f9 fc08 	bl	8000644 <assert_failed>
}
 8006e34:	bf00      	nop
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	08007f0c 	.word	0x08007f0c

08006e40 <ssd7317_put_string>:
/**
 * @brief
 * \b Description:<br>
 */
rect_t ssd7317_put_string(uint16_t left, uint16_t top, const tFont* font, const char *str, bool negative)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08e      	sub	sp, #56	; 0x38
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	607b      	str	r3, [r7, #4]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	817b      	strh	r3, [r7, #10]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	813b      	strh	r3, [r7, #8]
	rect_t err={0,0,0,0};
 8006e52:	f107 031c 	add.w	r3, r7, #28
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	605a      	str	r2, [r3, #4]

	/* make sure *font and *str are not NULL pointer */
	if(font==0 || str==0){
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <ssd7317_put_string+0x28>
 8006e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10c      	bne.n	8006e82 <ssd7317_put_string+0x42>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006e68:	f240 51f9 	movw	r1, #1529	; 0x5f9
 8006e6c:	4849      	ldr	r0, [pc, #292]	; (8006f94 <ssd7317_put_string+0x154>)
 8006e6e:	f7f9 fbe9 	bl	8000644 <assert_failed>
			return err;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	461a      	mov	r2, r3
 8006e76:	f107 031c 	add.w	r3, r7, #28
 8006e7a:	cb03      	ldmia	r3!, {r0, r1}
 8006e7c:	6010      	str	r0, [r2, #0]
 8006e7e:	6051      	str	r1, [r2, #4]
 8006e80:	e084      	b.n	8006f8c <ssd7317_put_string+0x14c>
#endif
	}

	const tChar* pChar = font->chars;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* make sure all characters in range*/
	const char *pStr = str;
 8006e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e8a:	637b      	str	r3, [r7, #52]	; 0x34

	while(*pStr != '\0')
 8006e8c:	e020      	b.n	8006ed0 <ssd7317_put_string+0x90>
	{
		if((pChar[0].code>*pStr) || (*pStr>(pChar[0].code+font->length-1))){
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e94:	7812      	ldrb	r2, [r2, #0]
 8006e96:	4293      	cmp	r3, r2
 8006e98:	dc0a      	bgt.n	8006eb0 <ssd7317_put_string+0x70>
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	4299      	cmp	r1, r3
 8006eae:	dd0c      	ble.n	8006eca <ssd7317_put_string+0x8a>
	#ifdef USE_FULL_ASSERT
				assert_failed((uint8_t *)__FILE__, __LINE__); //character out of range
 8006eb0:	f240 6107 	movw	r1, #1543	; 0x607
 8006eb4:	4837      	ldr	r0, [pc, #220]	; (8006f94 <ssd7317_put_string+0x154>)
 8006eb6:	f7f9 fbc5 	bl	8000644 <assert_failed>
				return err;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f107 031c 	add.w	r3, r7, #28
 8006ec2:	cb03      	ldmia	r3!, {r0, r1}
 8006ec4:	6010      	str	r0, [r2, #0]
 8006ec6:	6051      	str	r1, [r2, #4]
 8006ec8:	e060      	b.n	8006f8c <ssd7317_put_string+0x14c>
	#endif
		}
		pStr++;
 8006eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ecc:	3301      	adds	r3, #1
 8006ece:	637b      	str	r3, [r7, #52]	; 0x34
	while(*pStr != '\0')
 8006ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1da      	bne.n	8006e8e <ssd7317_put_string+0x4e>
	}

	/* Now, data assert all pass. We can get each char from the string and put it in frame buffer */
	rect_t area= {left,top,left,top + (font->chars->image->height-1)};
 8006ed8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006edc:	82bb      	strh	r3, [r7, #20]
 8006ede:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006ee2:	82fb      	strh	r3, [r7, #22]
 8006ee4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006ee8:	833b      	strh	r3, [r7, #24]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	88da      	ldrh	r2, [r3, #6]
 8006ef2:	893b      	ldrh	r3, [r7, #8]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	b21b      	sxth	r3, r3
 8006efe:	837b      	strh	r3, [r7, #26]

	uint16_t _x = left;
 8006f00:	897b      	ldrh	r3, [r7, #10]
 8006f02:	867b      	strh	r3, [r7, #50]	; 0x32

	while(*str != '\0')
 8006f04:	e02c      	b.n	8006f60 <ssd7317_put_string+0x120>
	{
		uint16_t _code = *str - pChar[0].code; //need to offset the first array member
 8006f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	857b      	strh	r3, [r7, #42]	; 0x2a
		const uint8_t* pData = pChar[_code].image->data;
 8006f16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f1c:	4413      	add	r3, r2
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24

		_x += (pChar[_code].image->width);
 8006f24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f2a:	4413      	add	r3, r2
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	889a      	ldrh	r2, [r3, #4]
 8006f30:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006f32:	4413      	add	r3, r2
 8006f34:	867b      	strh	r3, [r7, #50]	; 0x32
		area.x2 = _x-1;
 8006f36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	b21b      	sxth	r3, r3
 8006f3e:	833b      	strh	r3, [r7, #24]
		fb_fill_area(area,pData,negative);
 8006f40:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f46:	f107 0114 	add.w	r1, r7, #20
 8006f4a:	c903      	ldmia	r1, {r0, r1}
 8006f4c:	f7ff fbc4 	bl	80066d8 <fb_fill_area>
		area.x1 = _x+1; //increment for new area.x1
 8006f50:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006f52:	3301      	adds	r3, #1
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	b21b      	sxth	r3, r3
 8006f58:	82bb      	strh	r3, [r7, #20]

		str++;
 8006f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	643b      	str	r3, [r7, #64]	; 0x40
	while(*str != '\0')
 8006f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1ce      	bne.n	8006f06 <ssd7317_put_string+0xc6>
	}

	fb_flush_suspend();	//wait until previous SPI flushes finished
 8006f68:	f7ff fcf8 	bl	800695c <fb_flush_suspend>
	fb_flush_pending_set(area); //set flag to indicate frame buffer flush pending and wait for a FR pulse
 8006f6c:	f107 0314 	add.w	r3, r7, #20
 8006f70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f74:	f7ff fcd8 	bl	8006928 <fb_flush_pending_set>

	area.x1 = left;
 8006f78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006f7c:	82bb      	strh	r3, [r7, #20]

	return area;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	461a      	mov	r2, r3
 8006f82:	f107 0314 	add.w	r3, r7, #20
 8006f86:	cb03      	ldmia	r3!, {r0, r1}
 8006f88:	6010      	str	r0, [r2, #0]
 8006f8a:	6051      	str	r1, [r2, #4]
}
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	3738      	adds	r7, #56	; 0x38
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	08007f0c 	.word	0x08007f0c

08006f98 <ssd7317_get_stringsize>:
/**
 * @brief
 * \b Description:<br>
 */
void   ssd7317_get_stringsize(const tFont* font, const char *str, uint16_t *w, uint16_t *h)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
	if((font==0) || (str==0)){
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <ssd7317_get_stringsize+0x1a>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d105      	bne.n	8006fbe <ssd7317_get_stringsize+0x26>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006fb2:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8006fb6:	4812      	ldr	r0, [pc, #72]	; (8007000 <ssd7317_get_stringsize+0x68>)
 8006fb8:	f7f9 fb44 	bl	8000644 <assert_failed>
 8006fbc:	e01c      	b.n	8006ff8 <ssd7317_get_stringsize+0x60>
			return;
#endif
	}

	uint16_t _w, _h, _x = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	82fb      	strh	r3, [r7, #22]

	while(*str != '\0'){
 8006fc2:	e00f      	b.n	8006fe4 <ssd7317_get_stringsize+0x4c>
		ssd7317_get_charsize(font, (const uint16_t)*str++, &_w, &_h);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	60ba      	str	r2, [r7, #8]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	b299      	uxth	r1, r3
 8006fce:	f107 0312 	add.w	r3, r7, #18
 8006fd2:	f107 0214 	add.w	r2, r7, #20
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f7ff fefc 	bl	8006dd4 <ssd7317_get_charsize>
		_x += _w;
 8006fdc:	8aba      	ldrh	r2, [r7, #20]
 8006fde:	8afb      	ldrh	r3, [r7, #22]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	82fb      	strh	r3, [r7, #22]
	while(*str != '\0'){
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1eb      	bne.n	8006fc4 <ssd7317_get_stringsize+0x2c>
	}

	*w = _x;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	8afa      	ldrh	r2, [r7, #22]
 8006ff0:	801a      	strh	r2, [r3, #0]
	*h = _h;
 8006ff2:	8a7a      	ldrh	r2, [r7, #18]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	801a      	strh	r2, [r3, #0]
}
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	08007f0c 	.word	0x08007f0c

08007004 <HAL_DWT_Delay_Init>:
 * @return Error DWT counter
 * 1: clock cycle counter not started
 * 0: clock cycle counter works
 */

uint32_t HAL_DWT_Delay_Init(void){
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0
	/* Disable TRC */
	 CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8007008:	4b14      	ldr	r3, [pc, #80]	; (800705c <HAL_DWT_Delay_Init+0x58>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4a13      	ldr	r2, [pc, #76]	; (800705c <HAL_DWT_Delay_Init+0x58>)
 800700e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007012:	60d3      	str	r3, [r2, #12]
	 /* Enable TRC */
	 CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8007014:	4b11      	ldr	r3, [pc, #68]	; (800705c <HAL_DWT_Delay_Init+0x58>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	4a10      	ldr	r2, [pc, #64]	; (800705c <HAL_DWT_Delay_Init+0x58>)
 800701a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800701e:	60d3      	str	r3, [r2, #12]
	 /* Disable clock cycle counter */
	 DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <HAL_DWT_Delay_Init+0x5c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a0e      	ldr	r2, [pc, #56]	; (8007060 <HAL_DWT_Delay_Init+0x5c>)
 8007026:	f023 0301 	bic.w	r3, r3, #1
 800702a:	6013      	str	r3, [r2, #0]
	 /* Enable clock cycle counter */
	 DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800702c:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <HAL_DWT_Delay_Init+0x5c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a0b      	ldr	r2, [pc, #44]	; (8007060 <HAL_DWT_Delay_Init+0x5c>)
 8007032:	f043 0301 	orr.w	r3, r3, #1
 8007036:	6013      	str	r3, [r2, #0]
	 /* Reset the clock cycle counter value */
	 DWT->CYCCNT = 0;
 8007038:	4b09      	ldr	r3, [pc, #36]	; (8007060 <HAL_DWT_Delay_Init+0x5c>)
 800703a:	2200      	movs	r2, #0
 800703c:	605a      	str	r2, [r3, #4]
	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 800703e:	bf00      	nop
	__ASM volatile ("NOP");
 8007040:	bf00      	nop
	__ASM volatile ("NOP");
 8007042:	bf00      	nop
	 /* Check if clock cycle counter has started */
	if(DWT->CYCCNT)
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <HAL_DWT_Delay_Init+0x5c>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <HAL_DWT_Delay_Init+0x4c>
	{
	 return 0; /*clock cycle counter started*/
 800704c:	2300      	movs	r3, #0
 800704e:	e000      	b.n	8007052 <HAL_DWT_Delay_Init+0x4e>
	}
	else
	{
	 return 1; /*clock cycle counter not started*/
 8007050:	2301      	movs	r3, #1
	}
}
 8007052:	4618      	mov	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	e000edf0 	.word	0xe000edf0
 8007060:	e0001000 	.word	0xe0001000

08007064 <rpc_buffer_empty>:
 * 			This function returns the number of characters in the communication buffer
 * @return 	`true` if the buffer is empty
 * 			`false` if the buffer is not empty, message removal from the receiving buffer is required
 */
static bool rpc_buffer_empty(void)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
	bool empty = true;
 800706a:	2301      	movs	r3, #1
 800706c:	71fb      	strb	r3, [r7, #7]

	if(rpc_rx_buf.ctr > 0)
 800706e:	4b06      	ldr	r3, [pc, #24]	; (8007088 <rpc_buffer_empty+0x24>)
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <rpc_buffer_empty+0x16>
		empty = false;
 8007076:	2300      	movs	r3, #0
 8007078:	71fb      	strb	r3, [r7, #7]

	return empty;
 800707a:	79fb      	ldrb	r3, [r7, #7]
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	20000170 	.word	0x20000170

0800708c <rpc_get_command>:
 * @return	If FreeRTOS is used, this is the status code that indicates the
 * 			execution status of the function with the same return code of osSemaphoreAcquire()
 * 			If no FreeRTOS is used, the return value is always 0
 */
static int8_t rpc_get_command(uint8_t *buf, uint16_t *length, uint32_t timeout)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
	int8_t err = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	757b      	strb	r3, [r7, #21]

	*length = 0;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	801a      	strh	r2, [r3, #0]

	if(!rpc_buffer_empty()){
 80070a2:	f7ff ffdf 	bl	8007064 <rpc_buffer_empty>
 80070a6:	4603      	mov	r3, r0
 80070a8:	f083 0301 	eor.w	r3, r3, #1
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d01f      	beq.n	80070f2 <rpc_get_command+0x66>
		HAL_UART_DMAPause(&huart2);
 80070b2:	4813      	ldr	r0, [pc, #76]	; (8007100 <rpc_get_command+0x74>)
 80070b4:	f7fe f8b4 	bl	8005220 <HAL_UART_DMAPause>
		*length = rpc_rx_buf.ctr;
 80070b8:	4b12      	ldr	r3, [pc, #72]	; (8007104 <rpc_get_command+0x78>)
 80070ba:	881a      	ldrh	r2, [r3, #0]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	801a      	strh	r2, [r3, #0]

		for(uint16_t i=0; i<rpc_rx_buf.ctr; i++){
 80070c0:	2300      	movs	r3, #0
 80070c2:	82fb      	strh	r3, [r7, #22]
 80070c4:	e00a      	b.n	80070dc <rpc_get_command+0x50>
			*buf++ = rpc_rx_buf.buf[i];
 80070c6:	8afa      	ldrh	r2, [r7, #22]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	1c59      	adds	r1, r3, #1
 80070cc:	60f9      	str	r1, [r7, #12]
 80070ce:	490d      	ldr	r1, [pc, #52]	; (8007104 <rpc_get_command+0x78>)
 80070d0:	440a      	add	r2, r1
 80070d2:	7892      	ldrb	r2, [r2, #2]
 80070d4:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0; i<rpc_rx_buf.ctr; i++){
 80070d6:	8afb      	ldrh	r3, [r7, #22]
 80070d8:	3301      	adds	r3, #1
 80070da:	82fb      	strh	r3, [r7, #22]
 80070dc:	4b09      	ldr	r3, [pc, #36]	; (8007104 <rpc_get_command+0x78>)
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	8afa      	ldrh	r2, [r7, #22]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d3ef      	bcc.n	80070c6 <rpc_get_command+0x3a>
		}
		rpc_rx_buf.ctr = 0; //reset the counter
 80070e6:	4b07      	ldr	r3, [pc, #28]	; (8007104 <rpc_get_command+0x78>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	801a      	strh	r2, [r3, #0]

		HAL_UART_DMAResume(&huart2);
 80070ec:	4804      	ldr	r0, [pc, #16]	; (8007100 <rpc_get_command+0x74>)
 80070ee:	f7fe f8eb 	bl	80052c8 <HAL_UART_DMAResume>
	}

	return err;
 80070f2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	200003c0 	.word	0x200003c0
 8007104:	20000170 	.word	0x20000170

08007108 <rpc_uart_init>:
 * This function is called in the initialization section of main.c. Assumed USART2 is used.
 * Baud rate set to 115200, 8-n-1 with DMA1 Channel 6 (Peripheral to Memory) enabled and
 * USART2 global interrupt enabled.
 */
void rpc_uart_init(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_Init 0 */
	/* DMA controller clock enable before HAL_UART_Init(&huart2) */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800710e:	4b2a      	ldr	r3, [pc, #168]	; (80071b8 <rpc_uart_init+0xb0>)
 8007110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007112:	4a29      	ldr	r2, [pc, #164]	; (80071b8 <rpc_uart_init+0xb0>)
 8007114:	f043 0301 	orr.w	r3, r3, #1
 8007118:	6493      	str	r3, [r2, #72]	; 0x48
 800711a:	4b27      	ldr	r3, [pc, #156]	; (80071b8 <rpc_uart_init+0xb0>)
 800711c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	607b      	str	r3, [r7, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8007126:	2200      	movs	r2, #0
 8007128:	2100      	movs	r1, #0
 800712a:	2010      	movs	r0, #16
 800712c:	f7f9 ff08 	bl	8000f40 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8007130:	2010      	movs	r0, #16
 8007132:	f7f9 ff31 	bl	8000f98 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */

	  huart2.Instance = USART2;
 8007136:	4b21      	ldr	r3, [pc, #132]	; (80071bc <rpc_uart_init+0xb4>)
 8007138:	4a21      	ldr	r2, [pc, #132]	; (80071c0 <rpc_uart_init+0xb8>)
 800713a:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 800713c:	4b1f      	ldr	r3, [pc, #124]	; (80071bc <rpc_uart_init+0xb4>)
 800713e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007142:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007144:	4b1d      	ldr	r3, [pc, #116]	; (80071bc <rpc_uart_init+0xb4>)
 8007146:	2200      	movs	r2, #0
 8007148:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 800714a:	4b1c      	ldr	r3, [pc, #112]	; (80071bc <rpc_uart_init+0xb4>)
 800714c:	2200      	movs	r2, #0
 800714e:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8007150:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <rpc_uart_init+0xb4>)
 8007152:	2200      	movs	r2, #0
 8007154:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8007156:	4b19      	ldr	r3, [pc, #100]	; (80071bc <rpc_uart_init+0xb4>)
 8007158:	220c      	movs	r2, #12
 800715a:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800715c:	4b17      	ldr	r3, [pc, #92]	; (80071bc <rpc_uart_init+0xb4>)
 800715e:	2200      	movs	r2, #0
 8007160:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007162:	4b16      	ldr	r3, [pc, #88]	; (80071bc <rpc_uart_init+0xb4>)
 8007164:	2200      	movs	r2, #0
 8007166:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007168:	4b14      	ldr	r3, [pc, #80]	; (80071bc <rpc_uart_init+0xb4>)
 800716a:	2200      	movs	r2, #0
 800716c:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800716e:	4b13      	ldr	r3, [pc, #76]	; (80071bc <rpc_uart_init+0xb4>)
 8007170:	2200      	movs	r2, #0
 8007172:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007174:	4811      	ldr	r0, [pc, #68]	; (80071bc <rpc_uart_init+0xb4>)
 8007176:	f7fd feb7 	bl	8004ee8 <HAL_UART_Init>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <rpc_uart_init+0x7c>
	  {
	    Error_Handler();
 8007180:	f7f9 fa59 	bl	8000636 <Error_Handler>
	  }

	  /* USER CODE BEGIN USART2_Init 2 */
	  rpc_rx_buf.ctr = 0;
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <rpc_uart_init+0xbc>)
 8007186:	2200      	movs	r2, #0
 8007188:	801a      	strh	r2, [r3, #0]
	  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 800718a:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <rpc_uart_init+0xb4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <rpc_uart_init+0xb4>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f042 0210 	orr.w	r2, r2, #16
 8007198:	601a      	str	r2, [r3, #0]
	  if(HAL_UART_Receive_DMA(&huart2, rpc_rx_buf.buf, RPC_BUF_SIZE)!=HAL_OK)
 800719a:	22ff      	movs	r2, #255	; 0xff
 800719c:	490a      	ldr	r1, [pc, #40]	; (80071c8 <rpc_uart_init+0xc0>)
 800719e:	4807      	ldr	r0, [pc, #28]	; (80071bc <rpc_uart_init+0xb4>)
 80071a0:	f7fd ffba 	bl	8005118 <HAL_UART_Receive_DMA>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <rpc_uart_init+0xa6>
	  	{
	  		Error_Handler();
 80071aa:	f7f9 fa44 	bl	8000636 <Error_Handler>
	  	}
	  /* USER CODE END USART2_Init 2 */
}
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	40021000 	.word	0x40021000
 80071bc:	200003c0 	.word	0x200003c0
 80071c0:	40004400 	.word	0x40004400
 80071c4:	20000170 	.word	0x20000170
 80071c8:	20000172 	.word	0x20000172

080071cc <rpc_idle_callback>:
 *		in USART2 IRQ handler (stm32l4xx_it.c). Characters are inserted into the ring buffer
 *		if it has enough room for incoming data from the DMA channel; otherwise, data will be lost.
 *		This function is declared in main.h and called in stm32l4xx.c::USART2_IRQHandler()
 */
void rpc_idle_callback(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart2);
 80071d0:	4809      	ldr	r0, [pc, #36]	; (80071f8 <rpc_idle_callback+0x2c>)
 80071d2:	f7fe f8bf 	bl	8005354 <HAL_UART_DMAStop>
	rpc_rx_buf.ctr = (RPC_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx));
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <rpc_idle_callback+0x30>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	4b06      	ldr	r3, [pc, #24]	; (8007200 <rpc_idle_callback+0x34>)
 80071e6:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, rpc_rx_buf.buf, RPC_BUF_SIZE);
 80071e8:	22ff      	movs	r2, #255	; 0xff
 80071ea:	4906      	ldr	r1, [pc, #24]	; (8007204 <rpc_idle_callback+0x38>)
 80071ec:	4802      	ldr	r0, [pc, #8]	; (80071f8 <rpc_idle_callback+0x2c>)
 80071ee:	f7fd ff93 	bl	8005118 <HAL_UART_Receive_DMA>
}
 80071f2:	bf00      	nop
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200003c0 	.word	0x200003c0
 80071fc:	2000027c 	.word	0x2000027c
 8007200:	20000170 	.word	0x20000170
 8007204:	20000172 	.word	0x20000172

08007208 <rpc_main_task>:
 *
 * Command protocol to send data: 0x7E 0x64 <data>, <data> is the data bytes to send
 * e.g. 0x7E 0x64 0xff 0x00 0xff draw a line of 24 pixels across the horizontal
 */
void rpc_main_task(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b0c2      	sub	sp, #264	; 0x108
 800720c:	af00      	add	r7, sp, #0
	  uint16_t length;
	  uint8_t msg[RPC_BUF_SIZE];
	  rpc_get_command(msg, &length, 0);
 800720e:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8007212:	1d3b      	adds	r3, r7, #4
 8007214:	2200      	movs	r2, #0
 8007216:	4618      	mov	r0, r3
 8007218:	f7ff ff38 	bl	800708c <rpc_get_command>

	  if(length!=0){
 800721c:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8007220:	2b00      	cmp	r3, #0
 8007222:	d04c      	beq.n	80072be <rpc_main_task+0xb6>
	#ifdef USE_FULL_ASSERT
		  printf("Command echo:\r\n");
 8007224:	4828      	ldr	r0, [pc, #160]	; (80072c8 <rpc_main_task+0xc0>)
 8007226:	f000 f8f5 	bl	8007414 <puts>
		  for(uint8_t i=0; i<length; i++)
 800722a:	2300      	movs	r3, #0
 800722c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8007230:	e00b      	b.n	800724a <rpc_main_task+0x42>
		  {
			  printf("%c", msg[i]);
 8007232:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007236:	1d3a      	adds	r2, r7, #4
 8007238:	5cd3      	ldrb	r3, [r2, r3]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f87a 	bl	8007334 <putchar>
		  for(uint8_t i=0; i<length; i++)
 8007240:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007244:	3301      	adds	r3, #1
 8007246:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 800724a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800724e:	b29a      	uxth	r2, r3
 8007250:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8007254:	429a      	cmp	r2, r3
 8007256:	d3ec      	bcc.n	8007232 <rpc_main_task+0x2a>
		  }
		  printf("\r\n");
 8007258:	481c      	ldr	r0, [pc, #112]	; (80072cc <rpc_main_task+0xc4>)
 800725a:	f000 f8db 	bl	8007414 <puts>
	#endif
		  if(length>2){
 800725e:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8007262:	2b02      	cmp	r3, #2
 8007264:	d923      	bls.n	80072ae <rpc_main_task+0xa6>
			if(msg[0]==0x7E && (msg[1]=='c')) //0x7E 0x63
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b7e      	cmp	r3, #126	; 0x7e
 800726c:	d10d      	bne.n	800728a <rpc_main_task+0x82>
 800726e:	1d3b      	adds	r3, r7, #4
 8007270:	785b      	ldrb	r3, [r3, #1]
 8007272:	2b63      	cmp	r3, #99	; 0x63
 8007274:	d109      	bne.n	800728a <rpc_main_task+0x82>
			{
				spi_write_command((const uint8_t *)&msg[2], length-2);
 8007276:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800727a:	3b02      	subs	r3, #2
 800727c:	b29a      	uxth	r2, r3
 800727e:	1d3b      	adds	r3, r7, #4
 8007280:	3302      	adds	r3, #2
 8007282:	4611      	mov	r1, r2
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff f979 	bl	800657c <spi_write_command>
			}
			if(msg[0]==0x7E && (msg[1]=='d')) //0x7E 0x64
 800728a:	1d3b      	adds	r3, r7, #4
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	2b7e      	cmp	r3, #126	; 0x7e
 8007290:	d10d      	bne.n	80072ae <rpc_main_task+0xa6>
 8007292:	1d3b      	adds	r3, r7, #4
 8007294:	785b      	ldrb	r3, [r3, #1]
 8007296:	2b64      	cmp	r3, #100	; 0x64
 8007298:	d109      	bne.n	80072ae <rpc_main_task+0xa6>
			{
				spi_write_data((const uint8_t *)&msg[2], length-2);
 800729a:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800729e:	3b02      	subs	r3, #2
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	1d3b      	adds	r3, r7, #4
 80072a4:	3302      	adds	r3, #2
 80072a6:	4611      	mov	r1, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff f98b 	bl	80065c4 <spi_write_data>
			}
		  }
		  memset(msg, 0x00, length);
 80072ae:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 80072b2:	461a      	mov	r2, r3
 80072b4:	1d3b      	adds	r3, r7, #4
 80072b6:	2100      	movs	r1, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 f833 	bl	8007324 <memset>
	  }
}
 80072be:	bf00      	nop
 80072c0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	08007f8c 	.word	0x08007f8c
 80072cc:	08007f9c 	.word	0x08007f9c

080072d0 <__errno>:
 80072d0:	4b01      	ldr	r3, [pc, #4]	; (80072d8 <__errno+0x8>)
 80072d2:	6818      	ldr	r0, [r3, #0]
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	20000030 	.word	0x20000030

080072dc <__libc_init_array>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4e0d      	ldr	r6, [pc, #52]	; (8007314 <__libc_init_array+0x38>)
 80072e0:	4c0d      	ldr	r4, [pc, #52]	; (8007318 <__libc_init_array+0x3c>)
 80072e2:	1ba4      	subs	r4, r4, r6
 80072e4:	10a4      	asrs	r4, r4, #2
 80072e6:	2500      	movs	r5, #0
 80072e8:	42a5      	cmp	r5, r4
 80072ea:	d109      	bne.n	8007300 <__libc_init_array+0x24>
 80072ec:	4e0b      	ldr	r6, [pc, #44]	; (800731c <__libc_init_array+0x40>)
 80072ee:	4c0c      	ldr	r4, [pc, #48]	; (8007320 <__libc_init_array+0x44>)
 80072f0:	f000 fcd2 	bl	8007c98 <_init>
 80072f4:	1ba4      	subs	r4, r4, r6
 80072f6:	10a4      	asrs	r4, r4, #2
 80072f8:	2500      	movs	r5, #0
 80072fa:	42a5      	cmp	r5, r4
 80072fc:	d105      	bne.n	800730a <__libc_init_array+0x2e>
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007304:	4798      	blx	r3
 8007306:	3501      	adds	r5, #1
 8007308:	e7ee      	b.n	80072e8 <__libc_init_array+0xc>
 800730a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800730e:	4798      	blx	r3
 8007310:	3501      	adds	r5, #1
 8007312:	e7f2      	b.n	80072fa <__libc_init_array+0x1e>
 8007314:	0800cdc0 	.word	0x0800cdc0
 8007318:	0800cdc0 	.word	0x0800cdc0
 800731c:	0800cdc0 	.word	0x0800cdc0
 8007320:	0800cdc4 	.word	0x0800cdc4

08007324 <memset>:
 8007324:	4402      	add	r2, r0
 8007326:	4603      	mov	r3, r0
 8007328:	4293      	cmp	r3, r2
 800732a:	d100      	bne.n	800732e <memset+0xa>
 800732c:	4770      	bx	lr
 800732e:	f803 1b01 	strb.w	r1, [r3], #1
 8007332:	e7f9      	b.n	8007328 <memset+0x4>

08007334 <putchar>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	4b08      	ldr	r3, [pc, #32]	; (8007358 <putchar+0x24>)
 8007338:	681c      	ldr	r4, [r3, #0]
 800733a:	4605      	mov	r5, r0
 800733c:	b124      	cbz	r4, 8007348 <putchar+0x14>
 800733e:	69a3      	ldr	r3, [r4, #24]
 8007340:	b913      	cbnz	r3, 8007348 <putchar+0x14>
 8007342:	4620      	mov	r0, r4
 8007344:	f000 fa1e 	bl	8007784 <__sinit>
 8007348:	68a2      	ldr	r2, [r4, #8]
 800734a:	4629      	mov	r1, r5
 800734c:	4620      	mov	r0, r4
 800734e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007352:	f000 bbad 	b.w	8007ab0 <_putc_r>
 8007356:	bf00      	nop
 8007358:	20000030 	.word	0x20000030

0800735c <_puts_r>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	460e      	mov	r6, r1
 8007360:	4605      	mov	r5, r0
 8007362:	b118      	cbz	r0, 800736c <_puts_r+0x10>
 8007364:	6983      	ldr	r3, [r0, #24]
 8007366:	b90b      	cbnz	r3, 800736c <_puts_r+0x10>
 8007368:	f000 fa0c 	bl	8007784 <__sinit>
 800736c:	69ab      	ldr	r3, [r5, #24]
 800736e:	68ac      	ldr	r4, [r5, #8]
 8007370:	b913      	cbnz	r3, 8007378 <_puts_r+0x1c>
 8007372:	4628      	mov	r0, r5
 8007374:	f000 fa06 	bl	8007784 <__sinit>
 8007378:	4b23      	ldr	r3, [pc, #140]	; (8007408 <_puts_r+0xac>)
 800737a:	429c      	cmp	r4, r3
 800737c:	d117      	bne.n	80073ae <_puts_r+0x52>
 800737e:	686c      	ldr	r4, [r5, #4]
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	071b      	lsls	r3, r3, #28
 8007384:	d51d      	bpl.n	80073c2 <_puts_r+0x66>
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	b1db      	cbz	r3, 80073c2 <_puts_r+0x66>
 800738a:	3e01      	subs	r6, #1
 800738c:	68a3      	ldr	r3, [r4, #8]
 800738e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007392:	3b01      	subs	r3, #1
 8007394:	60a3      	str	r3, [r4, #8]
 8007396:	b9e9      	cbnz	r1, 80073d4 <_puts_r+0x78>
 8007398:	2b00      	cmp	r3, #0
 800739a:	da2e      	bge.n	80073fa <_puts_r+0x9e>
 800739c:	4622      	mov	r2, r4
 800739e:	210a      	movs	r1, #10
 80073a0:	4628      	mov	r0, r5
 80073a2:	f000 f83f 	bl	8007424 <__swbuf_r>
 80073a6:	3001      	adds	r0, #1
 80073a8:	d011      	beq.n	80073ce <_puts_r+0x72>
 80073aa:	200a      	movs	r0, #10
 80073ac:	e011      	b.n	80073d2 <_puts_r+0x76>
 80073ae:	4b17      	ldr	r3, [pc, #92]	; (800740c <_puts_r+0xb0>)
 80073b0:	429c      	cmp	r4, r3
 80073b2:	d101      	bne.n	80073b8 <_puts_r+0x5c>
 80073b4:	68ac      	ldr	r4, [r5, #8]
 80073b6:	e7e3      	b.n	8007380 <_puts_r+0x24>
 80073b8:	4b15      	ldr	r3, [pc, #84]	; (8007410 <_puts_r+0xb4>)
 80073ba:	429c      	cmp	r4, r3
 80073bc:	bf08      	it	eq
 80073be:	68ec      	ldreq	r4, [r5, #12]
 80073c0:	e7de      	b.n	8007380 <_puts_r+0x24>
 80073c2:	4621      	mov	r1, r4
 80073c4:	4628      	mov	r0, r5
 80073c6:	f000 f87f 	bl	80074c8 <__swsetup_r>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d0dd      	beq.n	800738a <_puts_r+0x2e>
 80073ce:	f04f 30ff 	mov.w	r0, #4294967295
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	da04      	bge.n	80073e2 <_puts_r+0x86>
 80073d8:	69a2      	ldr	r2, [r4, #24]
 80073da:	429a      	cmp	r2, r3
 80073dc:	dc06      	bgt.n	80073ec <_puts_r+0x90>
 80073de:	290a      	cmp	r1, #10
 80073e0:	d004      	beq.n	80073ec <_puts_r+0x90>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	6022      	str	r2, [r4, #0]
 80073e8:	7019      	strb	r1, [r3, #0]
 80073ea:	e7cf      	b.n	800738c <_puts_r+0x30>
 80073ec:	4622      	mov	r2, r4
 80073ee:	4628      	mov	r0, r5
 80073f0:	f000 f818 	bl	8007424 <__swbuf_r>
 80073f4:	3001      	adds	r0, #1
 80073f6:	d1c9      	bne.n	800738c <_puts_r+0x30>
 80073f8:	e7e9      	b.n	80073ce <_puts_r+0x72>
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	200a      	movs	r0, #10
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	6022      	str	r2, [r4, #0]
 8007402:	7018      	strb	r0, [r3, #0]
 8007404:	e7e5      	b.n	80073d2 <_puts_r+0x76>
 8007406:	bf00      	nop
 8007408:	0800cd78 	.word	0x0800cd78
 800740c:	0800cd98 	.word	0x0800cd98
 8007410:	0800cd58 	.word	0x0800cd58

08007414 <puts>:
 8007414:	4b02      	ldr	r3, [pc, #8]	; (8007420 <puts+0xc>)
 8007416:	4601      	mov	r1, r0
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	f7ff bf9f 	b.w	800735c <_puts_r>
 800741e:	bf00      	nop
 8007420:	20000030 	.word	0x20000030

08007424 <__swbuf_r>:
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	460e      	mov	r6, r1
 8007428:	4614      	mov	r4, r2
 800742a:	4605      	mov	r5, r0
 800742c:	b118      	cbz	r0, 8007436 <__swbuf_r+0x12>
 800742e:	6983      	ldr	r3, [r0, #24]
 8007430:	b90b      	cbnz	r3, 8007436 <__swbuf_r+0x12>
 8007432:	f000 f9a7 	bl	8007784 <__sinit>
 8007436:	4b21      	ldr	r3, [pc, #132]	; (80074bc <__swbuf_r+0x98>)
 8007438:	429c      	cmp	r4, r3
 800743a:	d12a      	bne.n	8007492 <__swbuf_r+0x6e>
 800743c:	686c      	ldr	r4, [r5, #4]
 800743e:	69a3      	ldr	r3, [r4, #24]
 8007440:	60a3      	str	r3, [r4, #8]
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	071a      	lsls	r2, r3, #28
 8007446:	d52e      	bpl.n	80074a6 <__swbuf_r+0x82>
 8007448:	6923      	ldr	r3, [r4, #16]
 800744a:	b363      	cbz	r3, 80074a6 <__swbuf_r+0x82>
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	6820      	ldr	r0, [r4, #0]
 8007450:	1ac0      	subs	r0, r0, r3
 8007452:	6963      	ldr	r3, [r4, #20]
 8007454:	b2f6      	uxtb	r6, r6
 8007456:	4283      	cmp	r3, r0
 8007458:	4637      	mov	r7, r6
 800745a:	dc04      	bgt.n	8007466 <__swbuf_r+0x42>
 800745c:	4621      	mov	r1, r4
 800745e:	4628      	mov	r0, r5
 8007460:	f000 f926 	bl	80076b0 <_fflush_r>
 8007464:	bb28      	cbnz	r0, 80074b2 <__swbuf_r+0x8e>
 8007466:	68a3      	ldr	r3, [r4, #8]
 8007468:	3b01      	subs	r3, #1
 800746a:	60a3      	str	r3, [r4, #8]
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	6022      	str	r2, [r4, #0]
 8007472:	701e      	strb	r6, [r3, #0]
 8007474:	6963      	ldr	r3, [r4, #20]
 8007476:	3001      	adds	r0, #1
 8007478:	4283      	cmp	r3, r0
 800747a:	d004      	beq.n	8007486 <__swbuf_r+0x62>
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	07db      	lsls	r3, r3, #31
 8007480:	d519      	bpl.n	80074b6 <__swbuf_r+0x92>
 8007482:	2e0a      	cmp	r6, #10
 8007484:	d117      	bne.n	80074b6 <__swbuf_r+0x92>
 8007486:	4621      	mov	r1, r4
 8007488:	4628      	mov	r0, r5
 800748a:	f000 f911 	bl	80076b0 <_fflush_r>
 800748e:	b190      	cbz	r0, 80074b6 <__swbuf_r+0x92>
 8007490:	e00f      	b.n	80074b2 <__swbuf_r+0x8e>
 8007492:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <__swbuf_r+0x9c>)
 8007494:	429c      	cmp	r4, r3
 8007496:	d101      	bne.n	800749c <__swbuf_r+0x78>
 8007498:	68ac      	ldr	r4, [r5, #8]
 800749a:	e7d0      	b.n	800743e <__swbuf_r+0x1a>
 800749c:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <__swbuf_r+0xa0>)
 800749e:	429c      	cmp	r4, r3
 80074a0:	bf08      	it	eq
 80074a2:	68ec      	ldreq	r4, [r5, #12]
 80074a4:	e7cb      	b.n	800743e <__swbuf_r+0x1a>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 f80d 	bl	80074c8 <__swsetup_r>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d0cc      	beq.n	800744c <__swbuf_r+0x28>
 80074b2:	f04f 37ff 	mov.w	r7, #4294967295
 80074b6:	4638      	mov	r0, r7
 80074b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ba:	bf00      	nop
 80074bc:	0800cd78 	.word	0x0800cd78
 80074c0:	0800cd98 	.word	0x0800cd98
 80074c4:	0800cd58 	.word	0x0800cd58

080074c8 <__swsetup_r>:
 80074c8:	4b32      	ldr	r3, [pc, #200]	; (8007594 <__swsetup_r+0xcc>)
 80074ca:	b570      	push	{r4, r5, r6, lr}
 80074cc:	681d      	ldr	r5, [r3, #0]
 80074ce:	4606      	mov	r6, r0
 80074d0:	460c      	mov	r4, r1
 80074d2:	b125      	cbz	r5, 80074de <__swsetup_r+0x16>
 80074d4:	69ab      	ldr	r3, [r5, #24]
 80074d6:	b913      	cbnz	r3, 80074de <__swsetup_r+0x16>
 80074d8:	4628      	mov	r0, r5
 80074da:	f000 f953 	bl	8007784 <__sinit>
 80074de:	4b2e      	ldr	r3, [pc, #184]	; (8007598 <__swsetup_r+0xd0>)
 80074e0:	429c      	cmp	r4, r3
 80074e2:	d10f      	bne.n	8007504 <__swsetup_r+0x3c>
 80074e4:	686c      	ldr	r4, [r5, #4]
 80074e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	0715      	lsls	r5, r2, #28
 80074ee:	d42c      	bmi.n	800754a <__swsetup_r+0x82>
 80074f0:	06d0      	lsls	r0, r2, #27
 80074f2:	d411      	bmi.n	8007518 <__swsetup_r+0x50>
 80074f4:	2209      	movs	r2, #9
 80074f6:	6032      	str	r2, [r6, #0]
 80074f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074fc:	81a3      	strh	r3, [r4, #12]
 80074fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007502:	e03e      	b.n	8007582 <__swsetup_r+0xba>
 8007504:	4b25      	ldr	r3, [pc, #148]	; (800759c <__swsetup_r+0xd4>)
 8007506:	429c      	cmp	r4, r3
 8007508:	d101      	bne.n	800750e <__swsetup_r+0x46>
 800750a:	68ac      	ldr	r4, [r5, #8]
 800750c:	e7eb      	b.n	80074e6 <__swsetup_r+0x1e>
 800750e:	4b24      	ldr	r3, [pc, #144]	; (80075a0 <__swsetup_r+0xd8>)
 8007510:	429c      	cmp	r4, r3
 8007512:	bf08      	it	eq
 8007514:	68ec      	ldreq	r4, [r5, #12]
 8007516:	e7e6      	b.n	80074e6 <__swsetup_r+0x1e>
 8007518:	0751      	lsls	r1, r2, #29
 800751a:	d512      	bpl.n	8007542 <__swsetup_r+0x7a>
 800751c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800751e:	b141      	cbz	r1, 8007532 <__swsetup_r+0x6a>
 8007520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007524:	4299      	cmp	r1, r3
 8007526:	d002      	beq.n	800752e <__swsetup_r+0x66>
 8007528:	4630      	mov	r0, r6
 800752a:	f000 fa19 	bl	8007960 <_free_r>
 800752e:	2300      	movs	r3, #0
 8007530:	6363      	str	r3, [r4, #52]	; 0x34
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	2300      	movs	r3, #0
 800753c:	6063      	str	r3, [r4, #4]
 800753e:	6923      	ldr	r3, [r4, #16]
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	f043 0308 	orr.w	r3, r3, #8
 8007548:	81a3      	strh	r3, [r4, #12]
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	b94b      	cbnz	r3, 8007562 <__swsetup_r+0x9a>
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007558:	d003      	beq.n	8007562 <__swsetup_r+0x9a>
 800755a:	4621      	mov	r1, r4
 800755c:	4630      	mov	r0, r6
 800755e:	f000 f9bf 	bl	80078e0 <__smakebuf_r>
 8007562:	89a2      	ldrh	r2, [r4, #12]
 8007564:	f012 0301 	ands.w	r3, r2, #1
 8007568:	d00c      	beq.n	8007584 <__swsetup_r+0xbc>
 800756a:	2300      	movs	r3, #0
 800756c:	60a3      	str	r3, [r4, #8]
 800756e:	6963      	ldr	r3, [r4, #20]
 8007570:	425b      	negs	r3, r3
 8007572:	61a3      	str	r3, [r4, #24]
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	b953      	cbnz	r3, 800758e <__swsetup_r+0xc6>
 8007578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800757c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007580:	d1ba      	bne.n	80074f8 <__swsetup_r+0x30>
 8007582:	bd70      	pop	{r4, r5, r6, pc}
 8007584:	0792      	lsls	r2, r2, #30
 8007586:	bf58      	it	pl
 8007588:	6963      	ldrpl	r3, [r4, #20]
 800758a:	60a3      	str	r3, [r4, #8]
 800758c:	e7f2      	b.n	8007574 <__swsetup_r+0xac>
 800758e:	2000      	movs	r0, #0
 8007590:	e7f7      	b.n	8007582 <__swsetup_r+0xba>
 8007592:	bf00      	nop
 8007594:	20000030 	.word	0x20000030
 8007598:	0800cd78 	.word	0x0800cd78
 800759c:	0800cd98 	.word	0x0800cd98
 80075a0:	0800cd58 	.word	0x0800cd58

080075a4 <__sflush_r>:
 80075a4:	898a      	ldrh	r2, [r1, #12]
 80075a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075aa:	4605      	mov	r5, r0
 80075ac:	0710      	lsls	r0, r2, #28
 80075ae:	460c      	mov	r4, r1
 80075b0:	d458      	bmi.n	8007664 <__sflush_r+0xc0>
 80075b2:	684b      	ldr	r3, [r1, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dc05      	bgt.n	80075c4 <__sflush_r+0x20>
 80075b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	dc02      	bgt.n	80075c4 <__sflush_r+0x20>
 80075be:	2000      	movs	r0, #0
 80075c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	d0f9      	beq.n	80075be <__sflush_r+0x1a>
 80075ca:	2300      	movs	r3, #0
 80075cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075d0:	682f      	ldr	r7, [r5, #0]
 80075d2:	6a21      	ldr	r1, [r4, #32]
 80075d4:	602b      	str	r3, [r5, #0]
 80075d6:	d032      	beq.n	800763e <__sflush_r+0x9a>
 80075d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	075a      	lsls	r2, r3, #29
 80075de:	d505      	bpl.n	80075ec <__sflush_r+0x48>
 80075e0:	6863      	ldr	r3, [r4, #4]
 80075e2:	1ac0      	subs	r0, r0, r3
 80075e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075e6:	b10b      	cbz	r3, 80075ec <__sflush_r+0x48>
 80075e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075ea:	1ac0      	subs	r0, r0, r3
 80075ec:	2300      	movs	r3, #0
 80075ee:	4602      	mov	r2, r0
 80075f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075f2:	6a21      	ldr	r1, [r4, #32]
 80075f4:	4628      	mov	r0, r5
 80075f6:	47b0      	blx	r6
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	d106      	bne.n	800760c <__sflush_r+0x68>
 80075fe:	6829      	ldr	r1, [r5, #0]
 8007600:	291d      	cmp	r1, #29
 8007602:	d848      	bhi.n	8007696 <__sflush_r+0xf2>
 8007604:	4a29      	ldr	r2, [pc, #164]	; (80076ac <__sflush_r+0x108>)
 8007606:	40ca      	lsrs	r2, r1
 8007608:	07d6      	lsls	r6, r2, #31
 800760a:	d544      	bpl.n	8007696 <__sflush_r+0xf2>
 800760c:	2200      	movs	r2, #0
 800760e:	6062      	str	r2, [r4, #4]
 8007610:	04d9      	lsls	r1, r3, #19
 8007612:	6922      	ldr	r2, [r4, #16]
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	d504      	bpl.n	8007622 <__sflush_r+0x7e>
 8007618:	1c42      	adds	r2, r0, #1
 800761a:	d101      	bne.n	8007620 <__sflush_r+0x7c>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	b903      	cbnz	r3, 8007622 <__sflush_r+0x7e>
 8007620:	6560      	str	r0, [r4, #84]	; 0x54
 8007622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007624:	602f      	str	r7, [r5, #0]
 8007626:	2900      	cmp	r1, #0
 8007628:	d0c9      	beq.n	80075be <__sflush_r+0x1a>
 800762a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800762e:	4299      	cmp	r1, r3
 8007630:	d002      	beq.n	8007638 <__sflush_r+0x94>
 8007632:	4628      	mov	r0, r5
 8007634:	f000 f994 	bl	8007960 <_free_r>
 8007638:	2000      	movs	r0, #0
 800763a:	6360      	str	r0, [r4, #52]	; 0x34
 800763c:	e7c0      	b.n	80075c0 <__sflush_r+0x1c>
 800763e:	2301      	movs	r3, #1
 8007640:	4628      	mov	r0, r5
 8007642:	47b0      	blx	r6
 8007644:	1c41      	adds	r1, r0, #1
 8007646:	d1c8      	bne.n	80075da <__sflush_r+0x36>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0c5      	beq.n	80075da <__sflush_r+0x36>
 800764e:	2b1d      	cmp	r3, #29
 8007650:	d001      	beq.n	8007656 <__sflush_r+0xb2>
 8007652:	2b16      	cmp	r3, #22
 8007654:	d101      	bne.n	800765a <__sflush_r+0xb6>
 8007656:	602f      	str	r7, [r5, #0]
 8007658:	e7b1      	b.n	80075be <__sflush_r+0x1a>
 800765a:	89a3      	ldrh	r3, [r4, #12]
 800765c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007660:	81a3      	strh	r3, [r4, #12]
 8007662:	e7ad      	b.n	80075c0 <__sflush_r+0x1c>
 8007664:	690f      	ldr	r7, [r1, #16]
 8007666:	2f00      	cmp	r7, #0
 8007668:	d0a9      	beq.n	80075be <__sflush_r+0x1a>
 800766a:	0793      	lsls	r3, r2, #30
 800766c:	680e      	ldr	r6, [r1, #0]
 800766e:	bf08      	it	eq
 8007670:	694b      	ldreq	r3, [r1, #20]
 8007672:	600f      	str	r7, [r1, #0]
 8007674:	bf18      	it	ne
 8007676:	2300      	movne	r3, #0
 8007678:	eba6 0807 	sub.w	r8, r6, r7
 800767c:	608b      	str	r3, [r1, #8]
 800767e:	f1b8 0f00 	cmp.w	r8, #0
 8007682:	dd9c      	ble.n	80075be <__sflush_r+0x1a>
 8007684:	4643      	mov	r3, r8
 8007686:	463a      	mov	r2, r7
 8007688:	6a21      	ldr	r1, [r4, #32]
 800768a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800768c:	4628      	mov	r0, r5
 800768e:	47b0      	blx	r6
 8007690:	2800      	cmp	r0, #0
 8007692:	dc06      	bgt.n	80076a2 <__sflush_r+0xfe>
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800769a:	81a3      	strh	r3, [r4, #12]
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	e78e      	b.n	80075c0 <__sflush_r+0x1c>
 80076a2:	4407      	add	r7, r0
 80076a4:	eba8 0800 	sub.w	r8, r8, r0
 80076a8:	e7e9      	b.n	800767e <__sflush_r+0xda>
 80076aa:	bf00      	nop
 80076ac:	20400001 	.word	0x20400001

080076b0 <_fflush_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	690b      	ldr	r3, [r1, #16]
 80076b4:	4605      	mov	r5, r0
 80076b6:	460c      	mov	r4, r1
 80076b8:	b1db      	cbz	r3, 80076f2 <_fflush_r+0x42>
 80076ba:	b118      	cbz	r0, 80076c4 <_fflush_r+0x14>
 80076bc:	6983      	ldr	r3, [r0, #24]
 80076be:	b90b      	cbnz	r3, 80076c4 <_fflush_r+0x14>
 80076c0:	f000 f860 	bl	8007784 <__sinit>
 80076c4:	4b0c      	ldr	r3, [pc, #48]	; (80076f8 <_fflush_r+0x48>)
 80076c6:	429c      	cmp	r4, r3
 80076c8:	d109      	bne.n	80076de <_fflush_r+0x2e>
 80076ca:	686c      	ldr	r4, [r5, #4]
 80076cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d0:	b17b      	cbz	r3, 80076f2 <_fflush_r+0x42>
 80076d2:	4621      	mov	r1, r4
 80076d4:	4628      	mov	r0, r5
 80076d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076da:	f7ff bf63 	b.w	80075a4 <__sflush_r>
 80076de:	4b07      	ldr	r3, [pc, #28]	; (80076fc <_fflush_r+0x4c>)
 80076e0:	429c      	cmp	r4, r3
 80076e2:	d101      	bne.n	80076e8 <_fflush_r+0x38>
 80076e4:	68ac      	ldr	r4, [r5, #8]
 80076e6:	e7f1      	b.n	80076cc <_fflush_r+0x1c>
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <_fflush_r+0x50>)
 80076ea:	429c      	cmp	r4, r3
 80076ec:	bf08      	it	eq
 80076ee:	68ec      	ldreq	r4, [r5, #12]
 80076f0:	e7ec      	b.n	80076cc <_fflush_r+0x1c>
 80076f2:	2000      	movs	r0, #0
 80076f4:	bd38      	pop	{r3, r4, r5, pc}
 80076f6:	bf00      	nop
 80076f8:	0800cd78 	.word	0x0800cd78
 80076fc:	0800cd98 	.word	0x0800cd98
 8007700:	0800cd58 	.word	0x0800cd58

08007704 <std>:
 8007704:	2300      	movs	r3, #0
 8007706:	b510      	push	{r4, lr}
 8007708:	4604      	mov	r4, r0
 800770a:	e9c0 3300 	strd	r3, r3, [r0]
 800770e:	6083      	str	r3, [r0, #8]
 8007710:	8181      	strh	r1, [r0, #12]
 8007712:	6643      	str	r3, [r0, #100]	; 0x64
 8007714:	81c2      	strh	r2, [r0, #14]
 8007716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800771a:	6183      	str	r3, [r0, #24]
 800771c:	4619      	mov	r1, r3
 800771e:	2208      	movs	r2, #8
 8007720:	305c      	adds	r0, #92	; 0x5c
 8007722:	f7ff fdff 	bl	8007324 <memset>
 8007726:	4b05      	ldr	r3, [pc, #20]	; (800773c <std+0x38>)
 8007728:	6263      	str	r3, [r4, #36]	; 0x24
 800772a:	4b05      	ldr	r3, [pc, #20]	; (8007740 <std+0x3c>)
 800772c:	62a3      	str	r3, [r4, #40]	; 0x28
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <std+0x40>)
 8007730:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <std+0x44>)
 8007734:	6224      	str	r4, [r4, #32]
 8007736:	6323      	str	r3, [r4, #48]	; 0x30
 8007738:	bd10      	pop	{r4, pc}
 800773a:	bf00      	nop
 800773c:	08007b3d 	.word	0x08007b3d
 8007740:	08007b5f 	.word	0x08007b5f
 8007744:	08007b97 	.word	0x08007b97
 8007748:	08007bbb 	.word	0x08007bbb

0800774c <_cleanup_r>:
 800774c:	4901      	ldr	r1, [pc, #4]	; (8007754 <_cleanup_r+0x8>)
 800774e:	f000 b885 	b.w	800785c <_fwalk_reent>
 8007752:	bf00      	nop
 8007754:	080076b1 	.word	0x080076b1

08007758 <__sfmoreglue>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	1e4a      	subs	r2, r1, #1
 800775c:	2568      	movs	r5, #104	; 0x68
 800775e:	4355      	muls	r5, r2
 8007760:	460e      	mov	r6, r1
 8007762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007766:	f000 f949 	bl	80079fc <_malloc_r>
 800776a:	4604      	mov	r4, r0
 800776c:	b140      	cbz	r0, 8007780 <__sfmoreglue+0x28>
 800776e:	2100      	movs	r1, #0
 8007770:	e9c0 1600 	strd	r1, r6, [r0]
 8007774:	300c      	adds	r0, #12
 8007776:	60a0      	str	r0, [r4, #8]
 8007778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800777c:	f7ff fdd2 	bl	8007324 <memset>
 8007780:	4620      	mov	r0, r4
 8007782:	bd70      	pop	{r4, r5, r6, pc}

08007784 <__sinit>:
 8007784:	6983      	ldr	r3, [r0, #24]
 8007786:	b510      	push	{r4, lr}
 8007788:	4604      	mov	r4, r0
 800778a:	bb33      	cbnz	r3, 80077da <__sinit+0x56>
 800778c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007790:	6503      	str	r3, [r0, #80]	; 0x50
 8007792:	4b12      	ldr	r3, [pc, #72]	; (80077dc <__sinit+0x58>)
 8007794:	4a12      	ldr	r2, [pc, #72]	; (80077e0 <__sinit+0x5c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6282      	str	r2, [r0, #40]	; 0x28
 800779a:	4298      	cmp	r0, r3
 800779c:	bf04      	itt	eq
 800779e:	2301      	moveq	r3, #1
 80077a0:	6183      	streq	r3, [r0, #24]
 80077a2:	f000 f81f 	bl	80077e4 <__sfp>
 80077a6:	6060      	str	r0, [r4, #4]
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 f81b 	bl	80077e4 <__sfp>
 80077ae:	60a0      	str	r0, [r4, #8]
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 f817 	bl	80077e4 <__sfp>
 80077b6:	2200      	movs	r2, #0
 80077b8:	60e0      	str	r0, [r4, #12]
 80077ba:	2104      	movs	r1, #4
 80077bc:	6860      	ldr	r0, [r4, #4]
 80077be:	f7ff ffa1 	bl	8007704 <std>
 80077c2:	2201      	movs	r2, #1
 80077c4:	2109      	movs	r1, #9
 80077c6:	68a0      	ldr	r0, [r4, #8]
 80077c8:	f7ff ff9c 	bl	8007704 <std>
 80077cc:	2202      	movs	r2, #2
 80077ce:	2112      	movs	r1, #18
 80077d0:	68e0      	ldr	r0, [r4, #12]
 80077d2:	f7ff ff97 	bl	8007704 <std>
 80077d6:	2301      	movs	r3, #1
 80077d8:	61a3      	str	r3, [r4, #24]
 80077da:	bd10      	pop	{r4, pc}
 80077dc:	0800cd54 	.word	0x0800cd54
 80077e0:	0800774d 	.word	0x0800774d

080077e4 <__sfp>:
 80077e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e6:	4b1b      	ldr	r3, [pc, #108]	; (8007854 <__sfp+0x70>)
 80077e8:	681e      	ldr	r6, [r3, #0]
 80077ea:	69b3      	ldr	r3, [r6, #24]
 80077ec:	4607      	mov	r7, r0
 80077ee:	b913      	cbnz	r3, 80077f6 <__sfp+0x12>
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7ff ffc7 	bl	8007784 <__sinit>
 80077f6:	3648      	adds	r6, #72	; 0x48
 80077f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	d503      	bpl.n	8007808 <__sfp+0x24>
 8007800:	6833      	ldr	r3, [r6, #0]
 8007802:	b133      	cbz	r3, 8007812 <__sfp+0x2e>
 8007804:	6836      	ldr	r6, [r6, #0]
 8007806:	e7f7      	b.n	80077f8 <__sfp+0x14>
 8007808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800780c:	b16d      	cbz	r5, 800782a <__sfp+0x46>
 800780e:	3468      	adds	r4, #104	; 0x68
 8007810:	e7f4      	b.n	80077fc <__sfp+0x18>
 8007812:	2104      	movs	r1, #4
 8007814:	4638      	mov	r0, r7
 8007816:	f7ff ff9f 	bl	8007758 <__sfmoreglue>
 800781a:	6030      	str	r0, [r6, #0]
 800781c:	2800      	cmp	r0, #0
 800781e:	d1f1      	bne.n	8007804 <__sfp+0x20>
 8007820:	230c      	movs	r3, #12
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	4604      	mov	r4, r0
 8007826:	4620      	mov	r0, r4
 8007828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800782a:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <__sfp+0x74>)
 800782c:	6665      	str	r5, [r4, #100]	; 0x64
 800782e:	e9c4 5500 	strd	r5, r5, [r4]
 8007832:	60a5      	str	r5, [r4, #8]
 8007834:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007838:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800783c:	2208      	movs	r2, #8
 800783e:	4629      	mov	r1, r5
 8007840:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007844:	f7ff fd6e 	bl	8007324 <memset>
 8007848:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800784c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007850:	e7e9      	b.n	8007826 <__sfp+0x42>
 8007852:	bf00      	nop
 8007854:	0800cd54 	.word	0x0800cd54
 8007858:	ffff0001 	.word	0xffff0001

0800785c <_fwalk_reent>:
 800785c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007860:	4680      	mov	r8, r0
 8007862:	4689      	mov	r9, r1
 8007864:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007868:	2600      	movs	r6, #0
 800786a:	b914      	cbnz	r4, 8007872 <_fwalk_reent+0x16>
 800786c:	4630      	mov	r0, r6
 800786e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007872:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007876:	3f01      	subs	r7, #1
 8007878:	d501      	bpl.n	800787e <_fwalk_reent+0x22>
 800787a:	6824      	ldr	r4, [r4, #0]
 800787c:	e7f5      	b.n	800786a <_fwalk_reent+0xe>
 800787e:	89ab      	ldrh	r3, [r5, #12]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d907      	bls.n	8007894 <_fwalk_reent+0x38>
 8007884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007888:	3301      	adds	r3, #1
 800788a:	d003      	beq.n	8007894 <_fwalk_reent+0x38>
 800788c:	4629      	mov	r1, r5
 800788e:	4640      	mov	r0, r8
 8007890:	47c8      	blx	r9
 8007892:	4306      	orrs	r6, r0
 8007894:	3568      	adds	r5, #104	; 0x68
 8007896:	e7ee      	b.n	8007876 <_fwalk_reent+0x1a>

08007898 <__swhatbuf_r>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	460e      	mov	r6, r1
 800789c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a0:	2900      	cmp	r1, #0
 80078a2:	b096      	sub	sp, #88	; 0x58
 80078a4:	4614      	mov	r4, r2
 80078a6:	461d      	mov	r5, r3
 80078a8:	da07      	bge.n	80078ba <__swhatbuf_r+0x22>
 80078aa:	2300      	movs	r3, #0
 80078ac:	602b      	str	r3, [r5, #0]
 80078ae:	89b3      	ldrh	r3, [r6, #12]
 80078b0:	061a      	lsls	r2, r3, #24
 80078b2:	d410      	bmi.n	80078d6 <__swhatbuf_r+0x3e>
 80078b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078b8:	e00e      	b.n	80078d8 <__swhatbuf_r+0x40>
 80078ba:	466a      	mov	r2, sp
 80078bc:	f000 f9a4 	bl	8007c08 <_fstat_r>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	dbf2      	blt.n	80078aa <__swhatbuf_r+0x12>
 80078c4:	9a01      	ldr	r2, [sp, #4]
 80078c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078ce:	425a      	negs	r2, r3
 80078d0:	415a      	adcs	r2, r3
 80078d2:	602a      	str	r2, [r5, #0]
 80078d4:	e7ee      	b.n	80078b4 <__swhatbuf_r+0x1c>
 80078d6:	2340      	movs	r3, #64	; 0x40
 80078d8:	2000      	movs	r0, #0
 80078da:	6023      	str	r3, [r4, #0]
 80078dc:	b016      	add	sp, #88	; 0x58
 80078de:	bd70      	pop	{r4, r5, r6, pc}

080078e0 <__smakebuf_r>:
 80078e0:	898b      	ldrh	r3, [r1, #12]
 80078e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078e4:	079d      	lsls	r5, r3, #30
 80078e6:	4606      	mov	r6, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	d507      	bpl.n	80078fc <__smakebuf_r+0x1c>
 80078ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	2301      	movs	r3, #1
 80078f6:	6163      	str	r3, [r4, #20]
 80078f8:	b002      	add	sp, #8
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	ab01      	add	r3, sp, #4
 80078fe:	466a      	mov	r2, sp
 8007900:	f7ff ffca 	bl	8007898 <__swhatbuf_r>
 8007904:	9900      	ldr	r1, [sp, #0]
 8007906:	4605      	mov	r5, r0
 8007908:	4630      	mov	r0, r6
 800790a:	f000 f877 	bl	80079fc <_malloc_r>
 800790e:	b948      	cbnz	r0, 8007924 <__smakebuf_r+0x44>
 8007910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007914:	059a      	lsls	r2, r3, #22
 8007916:	d4ef      	bmi.n	80078f8 <__smakebuf_r+0x18>
 8007918:	f023 0303 	bic.w	r3, r3, #3
 800791c:	f043 0302 	orr.w	r3, r3, #2
 8007920:	81a3      	strh	r3, [r4, #12]
 8007922:	e7e3      	b.n	80078ec <__smakebuf_r+0xc>
 8007924:	4b0d      	ldr	r3, [pc, #52]	; (800795c <__smakebuf_r+0x7c>)
 8007926:	62b3      	str	r3, [r6, #40]	; 0x28
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	6020      	str	r0, [r4, #0]
 800792c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007930:	81a3      	strh	r3, [r4, #12]
 8007932:	9b00      	ldr	r3, [sp, #0]
 8007934:	6163      	str	r3, [r4, #20]
 8007936:	9b01      	ldr	r3, [sp, #4]
 8007938:	6120      	str	r0, [r4, #16]
 800793a:	b15b      	cbz	r3, 8007954 <__smakebuf_r+0x74>
 800793c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007940:	4630      	mov	r0, r6
 8007942:	f000 f973 	bl	8007c2c <_isatty_r>
 8007946:	b128      	cbz	r0, 8007954 <__smakebuf_r+0x74>
 8007948:	89a3      	ldrh	r3, [r4, #12]
 800794a:	f023 0303 	bic.w	r3, r3, #3
 800794e:	f043 0301 	orr.w	r3, r3, #1
 8007952:	81a3      	strh	r3, [r4, #12]
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	431d      	orrs	r5, r3
 8007958:	81a5      	strh	r5, [r4, #12]
 800795a:	e7cd      	b.n	80078f8 <__smakebuf_r+0x18>
 800795c:	0800774d 	.word	0x0800774d

08007960 <_free_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4605      	mov	r5, r0
 8007964:	2900      	cmp	r1, #0
 8007966:	d045      	beq.n	80079f4 <_free_r+0x94>
 8007968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800796c:	1f0c      	subs	r4, r1, #4
 800796e:	2b00      	cmp	r3, #0
 8007970:	bfb8      	it	lt
 8007972:	18e4      	addlt	r4, r4, r3
 8007974:	f000 f97c 	bl	8007c70 <__malloc_lock>
 8007978:	4a1f      	ldr	r2, [pc, #124]	; (80079f8 <_free_r+0x98>)
 800797a:	6813      	ldr	r3, [r2, #0]
 800797c:	4610      	mov	r0, r2
 800797e:	b933      	cbnz	r3, 800798e <_free_r+0x2e>
 8007980:	6063      	str	r3, [r4, #4]
 8007982:	6014      	str	r4, [r2, #0]
 8007984:	4628      	mov	r0, r5
 8007986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800798a:	f000 b972 	b.w	8007c72 <__malloc_unlock>
 800798e:	42a3      	cmp	r3, r4
 8007990:	d90c      	bls.n	80079ac <_free_r+0x4c>
 8007992:	6821      	ldr	r1, [r4, #0]
 8007994:	1862      	adds	r2, r4, r1
 8007996:	4293      	cmp	r3, r2
 8007998:	bf04      	itt	eq
 800799a:	681a      	ldreq	r2, [r3, #0]
 800799c:	685b      	ldreq	r3, [r3, #4]
 800799e:	6063      	str	r3, [r4, #4]
 80079a0:	bf04      	itt	eq
 80079a2:	1852      	addeq	r2, r2, r1
 80079a4:	6022      	streq	r2, [r4, #0]
 80079a6:	6004      	str	r4, [r0, #0]
 80079a8:	e7ec      	b.n	8007984 <_free_r+0x24>
 80079aa:	4613      	mov	r3, r2
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	b10a      	cbz	r2, 80079b4 <_free_r+0x54>
 80079b0:	42a2      	cmp	r2, r4
 80079b2:	d9fa      	bls.n	80079aa <_free_r+0x4a>
 80079b4:	6819      	ldr	r1, [r3, #0]
 80079b6:	1858      	adds	r0, r3, r1
 80079b8:	42a0      	cmp	r0, r4
 80079ba:	d10b      	bne.n	80079d4 <_free_r+0x74>
 80079bc:	6820      	ldr	r0, [r4, #0]
 80079be:	4401      	add	r1, r0
 80079c0:	1858      	adds	r0, r3, r1
 80079c2:	4282      	cmp	r2, r0
 80079c4:	6019      	str	r1, [r3, #0]
 80079c6:	d1dd      	bne.n	8007984 <_free_r+0x24>
 80079c8:	6810      	ldr	r0, [r2, #0]
 80079ca:	6852      	ldr	r2, [r2, #4]
 80079cc:	605a      	str	r2, [r3, #4]
 80079ce:	4401      	add	r1, r0
 80079d0:	6019      	str	r1, [r3, #0]
 80079d2:	e7d7      	b.n	8007984 <_free_r+0x24>
 80079d4:	d902      	bls.n	80079dc <_free_r+0x7c>
 80079d6:	230c      	movs	r3, #12
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	e7d3      	b.n	8007984 <_free_r+0x24>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	1821      	adds	r1, r4, r0
 80079e0:	428a      	cmp	r2, r1
 80079e2:	bf04      	itt	eq
 80079e4:	6811      	ldreq	r1, [r2, #0]
 80079e6:	6852      	ldreq	r2, [r2, #4]
 80079e8:	6062      	str	r2, [r4, #4]
 80079ea:	bf04      	itt	eq
 80079ec:	1809      	addeq	r1, r1, r0
 80079ee:	6021      	streq	r1, [r4, #0]
 80079f0:	605c      	str	r4, [r3, #4]
 80079f2:	e7c7      	b.n	8007984 <_free_r+0x24>
 80079f4:	bd38      	pop	{r3, r4, r5, pc}
 80079f6:	bf00      	nop
 80079f8:	20000274 	.word	0x20000274

080079fc <_malloc_r>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	1ccd      	adds	r5, r1, #3
 8007a00:	f025 0503 	bic.w	r5, r5, #3
 8007a04:	3508      	adds	r5, #8
 8007a06:	2d0c      	cmp	r5, #12
 8007a08:	bf38      	it	cc
 8007a0a:	250c      	movcc	r5, #12
 8007a0c:	2d00      	cmp	r5, #0
 8007a0e:	4606      	mov	r6, r0
 8007a10:	db01      	blt.n	8007a16 <_malloc_r+0x1a>
 8007a12:	42a9      	cmp	r1, r5
 8007a14:	d903      	bls.n	8007a1e <_malloc_r+0x22>
 8007a16:	230c      	movs	r3, #12
 8007a18:	6033      	str	r3, [r6, #0]
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	bd70      	pop	{r4, r5, r6, pc}
 8007a1e:	f000 f927 	bl	8007c70 <__malloc_lock>
 8007a22:	4a21      	ldr	r2, [pc, #132]	; (8007aa8 <_malloc_r+0xac>)
 8007a24:	6814      	ldr	r4, [r2, #0]
 8007a26:	4621      	mov	r1, r4
 8007a28:	b991      	cbnz	r1, 8007a50 <_malloc_r+0x54>
 8007a2a:	4c20      	ldr	r4, [pc, #128]	; (8007aac <_malloc_r+0xb0>)
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	b91b      	cbnz	r3, 8007a38 <_malloc_r+0x3c>
 8007a30:	4630      	mov	r0, r6
 8007a32:	f000 f873 	bl	8007b1c <_sbrk_r>
 8007a36:	6020      	str	r0, [r4, #0]
 8007a38:	4629      	mov	r1, r5
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f000 f86e 	bl	8007b1c <_sbrk_r>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d124      	bne.n	8007a8e <_malloc_r+0x92>
 8007a44:	230c      	movs	r3, #12
 8007a46:	6033      	str	r3, [r6, #0]
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f000 f912 	bl	8007c72 <__malloc_unlock>
 8007a4e:	e7e4      	b.n	8007a1a <_malloc_r+0x1e>
 8007a50:	680b      	ldr	r3, [r1, #0]
 8007a52:	1b5b      	subs	r3, r3, r5
 8007a54:	d418      	bmi.n	8007a88 <_malloc_r+0x8c>
 8007a56:	2b0b      	cmp	r3, #11
 8007a58:	d90f      	bls.n	8007a7a <_malloc_r+0x7e>
 8007a5a:	600b      	str	r3, [r1, #0]
 8007a5c:	50cd      	str	r5, [r1, r3]
 8007a5e:	18cc      	adds	r4, r1, r3
 8007a60:	4630      	mov	r0, r6
 8007a62:	f000 f906 	bl	8007c72 <__malloc_unlock>
 8007a66:	f104 000b 	add.w	r0, r4, #11
 8007a6a:	1d23      	adds	r3, r4, #4
 8007a6c:	f020 0007 	bic.w	r0, r0, #7
 8007a70:	1ac3      	subs	r3, r0, r3
 8007a72:	d0d3      	beq.n	8007a1c <_malloc_r+0x20>
 8007a74:	425a      	negs	r2, r3
 8007a76:	50e2      	str	r2, [r4, r3]
 8007a78:	e7d0      	b.n	8007a1c <_malloc_r+0x20>
 8007a7a:	428c      	cmp	r4, r1
 8007a7c:	684b      	ldr	r3, [r1, #4]
 8007a7e:	bf16      	itet	ne
 8007a80:	6063      	strne	r3, [r4, #4]
 8007a82:	6013      	streq	r3, [r2, #0]
 8007a84:	460c      	movne	r4, r1
 8007a86:	e7eb      	b.n	8007a60 <_malloc_r+0x64>
 8007a88:	460c      	mov	r4, r1
 8007a8a:	6849      	ldr	r1, [r1, #4]
 8007a8c:	e7cc      	b.n	8007a28 <_malloc_r+0x2c>
 8007a8e:	1cc4      	adds	r4, r0, #3
 8007a90:	f024 0403 	bic.w	r4, r4, #3
 8007a94:	42a0      	cmp	r0, r4
 8007a96:	d005      	beq.n	8007aa4 <_malloc_r+0xa8>
 8007a98:	1a21      	subs	r1, r4, r0
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f000 f83e 	bl	8007b1c <_sbrk_r>
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d0cf      	beq.n	8007a44 <_malloc_r+0x48>
 8007aa4:	6025      	str	r5, [r4, #0]
 8007aa6:	e7db      	b.n	8007a60 <_malloc_r+0x64>
 8007aa8:	20000274 	.word	0x20000274
 8007aac:	20000278 	.word	0x20000278

08007ab0 <_putc_r>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	460d      	mov	r5, r1
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	b118      	cbz	r0, 8007ac2 <_putc_r+0x12>
 8007aba:	6983      	ldr	r3, [r0, #24]
 8007abc:	b90b      	cbnz	r3, 8007ac2 <_putc_r+0x12>
 8007abe:	f7ff fe61 	bl	8007784 <__sinit>
 8007ac2:	4b13      	ldr	r3, [pc, #76]	; (8007b10 <_putc_r+0x60>)
 8007ac4:	429c      	cmp	r4, r3
 8007ac6:	d112      	bne.n	8007aee <_putc_r+0x3e>
 8007ac8:	6874      	ldr	r4, [r6, #4]
 8007aca:	68a3      	ldr	r3, [r4, #8]
 8007acc:	3b01      	subs	r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	60a3      	str	r3, [r4, #8]
 8007ad2:	da16      	bge.n	8007b02 <_putc_r+0x52>
 8007ad4:	69a2      	ldr	r2, [r4, #24]
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	db02      	blt.n	8007ae0 <_putc_r+0x30>
 8007ada:	b2eb      	uxtb	r3, r5
 8007adc:	2b0a      	cmp	r3, #10
 8007ade:	d110      	bne.n	8007b02 <_putc_r+0x52>
 8007ae0:	4622      	mov	r2, r4
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007aea:	f7ff bc9b 	b.w	8007424 <__swbuf_r>
 8007aee:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <_putc_r+0x64>)
 8007af0:	429c      	cmp	r4, r3
 8007af2:	d101      	bne.n	8007af8 <_putc_r+0x48>
 8007af4:	68b4      	ldr	r4, [r6, #8]
 8007af6:	e7e8      	b.n	8007aca <_putc_r+0x1a>
 8007af8:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <_putc_r+0x68>)
 8007afa:	429c      	cmp	r4, r3
 8007afc:	bf08      	it	eq
 8007afe:	68f4      	ldreq	r4, [r6, #12]
 8007b00:	e7e3      	b.n	8007aca <_putc_r+0x1a>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	6022      	str	r2, [r4, #0]
 8007b08:	701d      	strb	r5, [r3, #0]
 8007b0a:	b2e8      	uxtb	r0, r5
 8007b0c:	bd70      	pop	{r4, r5, r6, pc}
 8007b0e:	bf00      	nop
 8007b10:	0800cd78 	.word	0x0800cd78
 8007b14:	0800cd98 	.word	0x0800cd98
 8007b18:	0800cd58 	.word	0x0800cd58

08007b1c <_sbrk_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4c06      	ldr	r4, [pc, #24]	; (8007b38 <_sbrk_r+0x1c>)
 8007b20:	2300      	movs	r3, #0
 8007b22:	4605      	mov	r5, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	6023      	str	r3, [r4, #0]
 8007b28:	f7f8 ffee 	bl	8000b08 <_sbrk>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d102      	bne.n	8007b36 <_sbrk_r+0x1a>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	b103      	cbz	r3, 8007b36 <_sbrk_r+0x1a>
 8007b34:	602b      	str	r3, [r5, #0]
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	20000a8c 	.word	0x20000a8c

08007b3c <__sread>:
 8007b3c:	b510      	push	{r4, lr}
 8007b3e:	460c      	mov	r4, r1
 8007b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b44:	f000 f896 	bl	8007c74 <_read_r>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	bfab      	itete	ge
 8007b4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b50:	181b      	addge	r3, r3, r0
 8007b52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b56:	bfac      	ite	ge
 8007b58:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b5a:	81a3      	strhlt	r3, [r4, #12]
 8007b5c:	bd10      	pop	{r4, pc}

08007b5e <__swrite>:
 8007b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b62:	461f      	mov	r7, r3
 8007b64:	898b      	ldrh	r3, [r1, #12]
 8007b66:	05db      	lsls	r3, r3, #23
 8007b68:	4605      	mov	r5, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	4616      	mov	r6, r2
 8007b6e:	d505      	bpl.n	8007b7c <__swrite+0x1e>
 8007b70:	2302      	movs	r3, #2
 8007b72:	2200      	movs	r2, #0
 8007b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b78:	f000 f868 	bl	8007c4c <_lseek_r>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	4632      	mov	r2, r6
 8007b8a:	463b      	mov	r3, r7
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b92:	f000 b817 	b.w	8007bc4 <_write_r>

08007b96 <__sseek>:
 8007b96:	b510      	push	{r4, lr}
 8007b98:	460c      	mov	r4, r1
 8007b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9e:	f000 f855 	bl	8007c4c <_lseek_r>
 8007ba2:	1c43      	adds	r3, r0, #1
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	bf15      	itete	ne
 8007ba8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007baa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bb2:	81a3      	strheq	r3, [r4, #12]
 8007bb4:	bf18      	it	ne
 8007bb6:	81a3      	strhne	r3, [r4, #12]
 8007bb8:	bd10      	pop	{r4, pc}

08007bba <__sclose>:
 8007bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bbe:	f000 b813 	b.w	8007be8 <_close_r>
	...

08007bc4 <_write_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	4c07      	ldr	r4, [pc, #28]	; (8007be4 <_write_r+0x20>)
 8007bc8:	4605      	mov	r5, r0
 8007bca:	4608      	mov	r0, r1
 8007bcc:	4611      	mov	r1, r2
 8007bce:	2200      	movs	r2, #0
 8007bd0:	6022      	str	r2, [r4, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	f7f8 ff47 	bl	8000a66 <_write>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_write_r+0x1e>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_write_r+0x1e>
 8007be0:	602b      	str	r3, [r5, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	20000a8c 	.word	0x20000a8c

08007be8 <_close_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4c06      	ldr	r4, [pc, #24]	; (8007c04 <_close_r+0x1c>)
 8007bec:	2300      	movs	r3, #0
 8007bee:	4605      	mov	r5, r0
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	f7f8 ff53 	bl	8000a9e <_close>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d102      	bne.n	8007c02 <_close_r+0x1a>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	b103      	cbz	r3, 8007c02 <_close_r+0x1a>
 8007c00:	602b      	str	r3, [r5, #0]
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	20000a8c 	.word	0x20000a8c

08007c08 <_fstat_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4c07      	ldr	r4, [pc, #28]	; (8007c28 <_fstat_r+0x20>)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4605      	mov	r5, r0
 8007c10:	4608      	mov	r0, r1
 8007c12:	4611      	mov	r1, r2
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	f7f8 ff4e 	bl	8000ab6 <_fstat>
 8007c1a:	1c43      	adds	r3, r0, #1
 8007c1c:	d102      	bne.n	8007c24 <_fstat_r+0x1c>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	b103      	cbz	r3, 8007c24 <_fstat_r+0x1c>
 8007c22:	602b      	str	r3, [r5, #0]
 8007c24:	bd38      	pop	{r3, r4, r5, pc}
 8007c26:	bf00      	nop
 8007c28:	20000a8c 	.word	0x20000a8c

08007c2c <_isatty_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4c06      	ldr	r4, [pc, #24]	; (8007c48 <_isatty_r+0x1c>)
 8007c30:	2300      	movs	r3, #0
 8007c32:	4605      	mov	r5, r0
 8007c34:	4608      	mov	r0, r1
 8007c36:	6023      	str	r3, [r4, #0]
 8007c38:	f7f8 ff4d 	bl	8000ad6 <_isatty>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_isatty_r+0x1a>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_isatty_r+0x1a>
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	20000a8c 	.word	0x20000a8c

08007c4c <_lseek_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4c07      	ldr	r4, [pc, #28]	; (8007c6c <_lseek_r+0x20>)
 8007c50:	4605      	mov	r5, r0
 8007c52:	4608      	mov	r0, r1
 8007c54:	4611      	mov	r1, r2
 8007c56:	2200      	movs	r2, #0
 8007c58:	6022      	str	r2, [r4, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f7f8 ff46 	bl	8000aec <_lseek>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d102      	bne.n	8007c6a <_lseek_r+0x1e>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	b103      	cbz	r3, 8007c6a <_lseek_r+0x1e>
 8007c68:	602b      	str	r3, [r5, #0]
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	20000a8c 	.word	0x20000a8c

08007c70 <__malloc_lock>:
 8007c70:	4770      	bx	lr

08007c72 <__malloc_unlock>:
 8007c72:	4770      	bx	lr

08007c74 <_read_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4c07      	ldr	r4, [pc, #28]	; (8007c94 <_read_r+0x20>)
 8007c78:	4605      	mov	r5, r0
 8007c7a:	4608      	mov	r0, r1
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	6022      	str	r2, [r4, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f7f8 fed2 	bl	8000a2c <_read>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_read_r+0x1e>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_read_r+0x1e>
 8007c90:	602b      	str	r3, [r5, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	20000a8c 	.word	0x20000a8c

08007c98 <_init>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr

08007ca4 <_fini>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	bf00      	nop
 8007ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007caa:	bc08      	pop	{r3}
 8007cac:	469e      	mov	lr, r3
 8007cae:	4770      	bx	lr
