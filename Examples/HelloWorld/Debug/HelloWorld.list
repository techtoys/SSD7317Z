
HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b1c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005108  08007ca8  08007ca8  00017ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdb0  0800cdb0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdb0  0800cdb0  0001cdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdb8  0800cdb8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdb8  0800cdb8  0001cdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdbc  0800cdbc  0001cdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800cdc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009fc  20000094  0800ce54  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  0800ce54  00020a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a61  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c8b  00000000  00000000  00037b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001130  00000000  00000000  0003a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc0  00000000  00000000  0003b8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023233  00000000  00000000  0003c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff50  00000000  00000000  0005fad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf81d  00000000  00000000  0006fa23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f240  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c24  00000000  00000000  0013f2bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000094 	.word	0x20000094
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007c90 	.word	0x08007c90

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000098 	.word	0x20000098
 80001c8:	08007c90 	.word	0x08007c90

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__io_putchar>:
 *  	generated by STM32CubeIDE if you choose Nucleo Standard EVK as the hw platform
 */
#ifdef USE_FULL_ASSERT
/* @note Override __io_putchar() in syscalls.c */
int __io_putchar(int ch)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80004d4:	1d39      	adds	r1, r7, #4
 80004d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004da:	2201      	movs	r2, #1
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <__io_putchar+0x20>)
 80004de:	f004 fd83 	bl	8004fe8 <HAL_UART_Transmit>
	return ch;
 80004e2:	687b      	ldr	r3, [r7, #4]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200003c0 	.word	0x200003c0

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fb98 	bl	8000c2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f829 	bl	8000550 <SystemClock_Config>
  //MX_USART2_UART_Init();
  //MX_I2C1_Init();
  //MX_SPI1_Init();
  //MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  ssd7317_init();
 80004fe:	f005 fee7 	bl	80062d0 <ssd7317_init>
  rpc_uart_init();
 8000502:	f006 fdfd 	bl	8007100 <rpc_uart_init>

  uint16_t w, h;
  ssd7317_get_stringsize(&Tahoma_12h, "Hello World", &w, &h);
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	f107 020e 	add.w	r2, r7, #14
 800050e:	490e      	ldr	r1, [pc, #56]	; (8000548 <main+0x58>)
 8000510:	480e      	ldr	r0, [pc, #56]	; (800054c <main+0x5c>)
 8000512:	f006 fd3d 	bl	8006f90 <ssd7317_get_stringsize>
  ssd7317_put_string((OLED_HOR_RES-w)/2,(OLED_VER_RES-h)/2,&Tahoma_12h,"Hello World",0);
 8000516:	89fb      	ldrh	r3, [r7, #14]
 8000518:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 800051c:	0fda      	lsrs	r2, r3, #31
 800051e:	4413      	add	r3, r2
 8000520:	105b      	asrs	r3, r3, #1
 8000522:	b299      	uxth	r1, r3
 8000524:	89bb      	ldrh	r3, [r7, #12]
 8000526:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800052a:	0fda      	lsrs	r2, r3, #31
 800052c:	4413      	add	r3, r2
 800052e:	105b      	asrs	r3, r3, #1
 8000530:	b29a      	uxth	r2, r3
 8000532:	4638      	mov	r0, r7
 8000534:	2300      	movs	r3, #0
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <main+0x58>)
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <main+0x5c>)
 800053e:	f006 fc7b 	bl	8006e38 <ssd7317_put_string>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//Remote Procedure Call for spi_write_command() and spi_write_data()
	rpc_main_task();
 8000542:	f006 fe5d 	bl	8007200 <rpc_main_task>
 8000546:	e7fc      	b.n	8000542 <main+0x52>
 8000548:	08007ca8 	.word	0x08007ca8
 800054c:	08008d9c 	.word	0x08008d9c

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b0ac      	sub	sp, #176	; 0xb0
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800055a:	2244      	movs	r2, #68	; 0x44
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fedc 	bl	800731c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2254      	movs	r2, #84	; 0x54
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f006 fece 	bl	800731c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000580:	2310      	movs	r3, #16
 8000582:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000590:	2360      	movs	r3, #96	; 0x60
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800059c:	2301      	movs	r3, #1
 800059e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005a8:	2310      	movs	r3, #16
 80005aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fad3 	bl	8002b70 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d0:	f000 f831 	bl	8000636 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2303      	movs	r3, #3
 80005da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005ec:	2101      	movs	r1, #1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f834 	bl	800365c <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005fa:	f000 f81c 	bl	8000636 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005fe:	2342      	movs	r3, #66	; 0x42
 8000600:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000602:	2300      	movs	r3, #0
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000606:	2300      	movs	r3, #0
 8000608:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f003 fac9 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000618:	f000 f80d 	bl	8000636 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000620:	f002 fa44 	bl	8002aac <HAL_PWREx_ControlVoltageScaling>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800062a:	f000 f804 	bl	8000636 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	37b0      	adds	r7, #176	; 0xb0
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //   printf("Wrong parameters value: file %s on line %d\r\n", file, line);
  /* USER CODE END 6 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_MspInit+0x44>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_MspInit+0x44>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6613      	str	r3, [r2, #96]	; 0x60
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_MspInit+0x44>)
 8000670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_MspInit+0x44>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <HAL_MspInit+0x44>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	6593      	str	r3, [r2, #88]	; 0x58
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_MspInit+0x44>)
 8000688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a17      	ldr	r2, [pc, #92]	; (8000720 <HAL_I2C_MspInit+0x7c>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d127      	bne.n	8000716 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_I2C_MspInit+0x80>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <HAL_I2C_MspInit+0x80>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_I2C_MspInit+0x80>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TCH_SCL_Pin|TCH_SDA_Pin;
 80006de:	23c0      	movs	r3, #192	; 0xc0
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e2:	2312      	movs	r3, #18
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ee:	2304      	movs	r3, #4
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <HAL_I2C_MspInit+0x84>)
 80006fa:	f000 fffd 	bl	80016f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_I2C_MspInit+0x80>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_I2C_MspInit+0x80>)
 8000704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000708:	6593      	str	r3, [r2, #88]	; 0x58
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_I2C_MspInit+0x80>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40005400 	.word	0x40005400
 8000724:	40021000 	.word	0x40021000
 8000728:	48000400 	.word	0x48000400

0800072c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a3a      	ldr	r2, [pc, #232]	; (8000834 <HAL_SPI_MspInit+0x108>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d16e      	bne.n	800082c <HAL_SPI_MspInit+0x100>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 8000750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000752:	4a39      	ldr	r2, [pc, #228]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 8000754:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000758:	6613      	str	r3, [r2, #96]	; 0x60
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 800075c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a33      	ldr	r2, [pc, #204]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a2d      	ldr	r2, [pc, #180]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <HAL_SPI_MspInit+0x10c>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_DCS_Pin;
 8000796:	2310      	movs	r3, #16
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007a6:	2305      	movs	r3, #5
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OLED_DCS_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f000 ffa0 	bl	80016f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MOSI_Pin;
 80007b8:	2328      	movs	r3, #40	; 0x28
 80007ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007c8:	2305      	movs	r3, #5
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	481a      	ldr	r0, [pc, #104]	; (800083c <HAL_SPI_MspInit+0x110>)
 80007d4:	f000 ff90 	bl	80016f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007da:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <HAL_SPI_MspInit+0x118>)
 80007dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_SPI_MspInit+0x114>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_SPI_MspInit+0x114>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_SPI_MspInit+0x114>)
 800080a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000810:	480b      	ldr	r0, [pc, #44]	; (8000840 <HAL_SPI_MspInit+0x114>)
 8000812:	f000 fbe1 	bl	8000fd8 <HAL_DMA_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 800081c:	f7ff ff0b 	bl	8000636 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_SPI_MspInit+0x114>)
 8000824:	655a      	str	r2, [r3, #84]	; 0x54
 8000826:	4a06      	ldr	r2, [pc, #24]	; (8000840 <HAL_SPI_MspInit+0x114>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40013000 	.word	0x40013000
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400
 8000840:	20000440 	.word	0x20000440
 8000844:	40020030 	.word	0x40020030

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a39      	ldr	r2, [pc, #228]	; (800094c <HAL_UART_MspInit+0x104>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d16b      	bne.n	8000942 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086a:	4b39      	ldr	r3, [pc, #228]	; (8000950 <HAL_UART_MspInit+0x108>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086e:	4a38      	ldr	r2, [pc, #224]	; (8000950 <HAL_UART_MspInit+0x108>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	6593      	str	r3, [r2, #88]	; 0x58
 8000876:	4b36      	ldr	r3, [pc, #216]	; (8000950 <HAL_UART_MspInit+0x108>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b33      	ldr	r3, [pc, #204]	; (8000950 <HAL_UART_MspInit+0x108>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a32      	ldr	r2, [pc, #200]	; (8000950 <HAL_UART_MspInit+0x108>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <HAL_UART_MspInit+0x108>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800089a:	2304      	movs	r3, #4
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f000 ff1e 	bl	80016f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80008bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80008ce:	2303      	movs	r3, #3
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f000 ff0c 	bl	80016f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <HAL_UART_MspInit+0x10c>)
 80008e2:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <HAL_UART_MspInit+0x110>)
 80008e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <HAL_UART_MspInit+0x10c>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <HAL_UART_MspInit+0x10c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <HAL_UART_MspInit+0x10c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <HAL_UART_MspInit+0x10c>)
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_UART_MspInit+0x10c>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <HAL_UART_MspInit+0x10c>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_UART_MspInit+0x10c>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <HAL_UART_MspInit+0x10c>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <HAL_UART_MspInit+0x10c>)
 8000918:	f000 fb5e 	bl	8000fd8 <HAL_DMA_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8000922:	f7ff fe88 	bl	8000636 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_UART_MspInit+0x10c>)
 800092a:	66da      	str	r2, [r3, #108]	; 0x6c
 800092c:	4a09      	ldr	r2, [pc, #36]	; (8000954 <HAL_UART_MspInit+0x10c>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2026      	movs	r0, #38	; 0x26
 8000938:	f000 fafe 	bl	8000f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800093c:	2026      	movs	r0, #38	; 0x26
 800093e:	f000 fb27 	bl	8000f90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	; 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40004400 	.word	0x40004400
 8000950:	40021000 	.word	0x40021000
 8000954:	2000027c 	.word	0x2000027c
 8000958:	4002006c 	.word	0x4002006c

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f990 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009bc:	2001      	movs	r0, #1
 80009be:	f001 f8f1 	bl	8001ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
#endif
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <DMA1_Channel6_IRQHandler+0x10>)
 80009da:	f000 fda2 	bl	8001522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000027c 	.word	0x2000027c

080009e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <USART2_IRQHandler+0x28>)
 80009ee:	f004 fd19 	bl	8005424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if(RESET!=__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <USART2_IRQHandler+0x28>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	2b10      	cmp	r3, #16
 80009fe:	d105      	bne.n	8000a0c <USART2_IRQHandler+0x24>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <USART2_IRQHandler+0x28>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2210      	movs	r2, #16
 8000a06:	621a      	str	r2, [r3, #32]
	  rpc_idle_callback();
 8000a08:	f006 fbdc 	bl	80071c4 <rpc_idle_callback>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200003c0 	.word	0x200003c0

08000a14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000a18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a1c:	f001 f8c2 	bl	8001ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	e00a      	b.n	8000a4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a36:	f3af 8000 	nop.w
 8000a3a:	4601      	mov	r1, r0
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	60ba      	str	r2, [r7, #8]
 8000a42:	b2ca      	uxtb	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf0      	blt.n	8000a36 <_read+0x12>
	}

return len;
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	e009      	b.n	8000a84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	60ba      	str	r2, [r7, #8]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fd27 	bl	80004cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf1      	blt.n	8000a70 <_write+0x12>
	}
	return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_close>:

int _close(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000abe:	605a      	str	r2, [r3, #4]
	return 0;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_isatty>:

int _isatty(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <_sbrk+0x5c>)
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <_sbrk+0x60>)
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <_sbrk+0x64>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <_sbrk+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d207      	bcs.n	8000b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b30:	f006 fbca 	bl	80072c8 <__errno>
 8000b34:	4602      	mov	r2, r0
 8000b36:	230c      	movs	r3, #12
 8000b38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	e009      	b.n	8000b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <_sbrk+0x64>)
 8000b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20010000 	.word	0x20010000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	200000b0 	.word	0x200000b0
 8000b68:	20000a90 	.word	0x20000a90

08000b6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <SystemInit+0x64>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <SystemInit+0x64>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <SystemInit+0x68>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <SystemInit+0x68>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <SystemInit+0x68>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <SystemInit+0x68>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <SystemInit+0x68>)
 8000b98:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b9c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ba0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <SystemInit+0x68>)
 8000ba4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <SystemInit+0x68>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <SystemInit+0x68>)
 8000bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <SystemInit+0x68>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SystemInit+0x64>)
 8000bbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bde:	e003      	b.n	8000be8 <LoopCopyDataInit>

08000be0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000be2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000be4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000be6:	3104      	adds	r1, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000be8:	480b      	ldr	r0, [pc, #44]	; (8000c18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bf0:	d3f6      	bcc.n	8000be0 <CopyDataInit>
	ldr	r2, =_sbss
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bf4:	e002      	b.n	8000bfc <LoopFillZerobss>

08000bf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bf6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bf8:	f842 3b04 	str.w	r3, [r2], #4

08000bfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <LoopForever+0x16>)
	cmp	r2, r3
 8000bfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c00:	d3f9      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c02:	f7ff ffb3 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f006 fb65 	bl	80072d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0a:	f7ff fc71 	bl	80004f0 <main>

08000c0e <LoopForever>:

LoopForever:
    b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c10:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000c14:	0800cdc0 	.word	0x0800cdc0
	ldr	r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c1c:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 8000c20:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 8000c24:	20000a90 	.word	0x20000a90

08000c28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_IRQHandler>

08000c2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f95f 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f80e 	bl	8000c5c <HAL_InitTick>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	e001      	b.n	8000c50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4c:	f7ff fd06 	bl	800065c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_InitTick+0x6c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d023      	beq.n	8000cb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_InitTick+0x70>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_InitTick+0x6c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f99a 	bl	8000fc0 <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10f      	bne.n	8000cb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d809      	bhi.n	8000cac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f94a 	bl	8000f38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_InitTick+0x74>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e007      	b.n	8000cbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e004      	b.n	8000cbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e001      	b.n	8000cbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000488 	.word	0x20000488

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000488 	.word	0x20000488

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_Delay+0x40>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000008 	.word	0x20000008

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b07      	cmp	r3, #7
 8000f04:	d00f      	beq.n	8000f26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b06      	cmp	r3, #6
 8000f0a:	d00c      	beq.n	8000f26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	d009      	beq.n	8000f26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d006      	beq.n	8000f26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d003      	beq.n	8000f26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f1e:	21a7      	movs	r1, #167	; 0xa7
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000f22:	f7ff fb8f 	bl	8000644 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ff16 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	08007cb4 	.word	0x08007cb4

08000f38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d903      	bls.n	8000f58 <HAL_NVIC_SetPriority+0x20>
 8000f50:	21bf      	movs	r1, #191	; 0xbf
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <HAL_NVIC_SetPriority+0x54>)
 8000f54:	f7ff fb76 	bl	8000644 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	2b0f      	cmp	r3, #15
 8000f5c:	d903      	bls.n	8000f66 <HAL_NVIC_SetPriority+0x2e>
 8000f5e:	21c0      	movs	r1, #192	; 0xc0
 8000f60:	480a      	ldr	r0, [pc, #40]	; (8000f8c <HAL_NVIC_SetPriority+0x54>)
 8000f62:	f7ff fb6f 	bl	8000644 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f66:	f7ff ff1b 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000f6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68b9      	ldr	r1, [r7, #8]
 8000f70:	6978      	ldr	r0, [r7, #20]
 8000f72:	f7ff ff6b 	bl	8000e4c <NVIC_EncodePriority>
 8000f76:	4602      	mov	r2, r0
 8000f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff3a 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	08007cb4 	.word	0x08007cb4

08000f90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da03      	bge.n	8000faa <HAL_NVIC_EnableIRQ+0x1a>
 8000fa2:	21d3      	movs	r1, #211	; 0xd3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_NVIC_EnableIRQ+0x2c>)
 8000fa6:	f7ff fb4d 	bl	8000644 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff04 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08007cb4 	.word	0x08007cb4

08000fc0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff73 	bl	8000eb4 <SysTick_Config>
 8000fce:	4603      	mov	r3, r0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e19d      	b.n	8001326 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a79      	ldr	r2, [pc, #484]	; (80011d4 <HAL_DMA_Init+0x1fc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d044      	beq.n	800107e <HAL_DMA_Init+0xa6>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a77      	ldr	r2, [pc, #476]	; (80011d8 <HAL_DMA_Init+0x200>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d03f      	beq.n	800107e <HAL_DMA_Init+0xa6>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a76      	ldr	r2, [pc, #472]	; (80011dc <HAL_DMA_Init+0x204>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d03a      	beq.n	800107e <HAL_DMA_Init+0xa6>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a74      	ldr	r2, [pc, #464]	; (80011e0 <HAL_DMA_Init+0x208>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d035      	beq.n	800107e <HAL_DMA_Init+0xa6>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a73      	ldr	r2, [pc, #460]	; (80011e4 <HAL_DMA_Init+0x20c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d030      	beq.n	800107e <HAL_DMA_Init+0xa6>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a71      	ldr	r2, [pc, #452]	; (80011e8 <HAL_DMA_Init+0x210>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d02b      	beq.n	800107e <HAL_DMA_Init+0xa6>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a70      	ldr	r2, [pc, #448]	; (80011ec <HAL_DMA_Init+0x214>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d026      	beq.n	800107e <HAL_DMA_Init+0xa6>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a6e      	ldr	r2, [pc, #440]	; (80011f0 <HAL_DMA_Init+0x218>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d021      	beq.n	800107e <HAL_DMA_Init+0xa6>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a6d      	ldr	r2, [pc, #436]	; (80011f4 <HAL_DMA_Init+0x21c>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d01c      	beq.n	800107e <HAL_DMA_Init+0xa6>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a6b      	ldr	r2, [pc, #428]	; (80011f8 <HAL_DMA_Init+0x220>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d017      	beq.n	800107e <HAL_DMA_Init+0xa6>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a6a      	ldr	r2, [pc, #424]	; (80011fc <HAL_DMA_Init+0x224>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d012      	beq.n	800107e <HAL_DMA_Init+0xa6>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a68      	ldr	r2, [pc, #416]	; (8001200 <HAL_DMA_Init+0x228>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_DMA_Init+0xa6>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a67      	ldr	r2, [pc, #412]	; (8001204 <HAL_DMA_Init+0x22c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d008      	beq.n	800107e <HAL_DMA_Init+0xa6>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a65      	ldr	r2, [pc, #404]	; (8001208 <HAL_DMA_Init+0x230>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d003      	beq.n	800107e <HAL_DMA_Init+0xa6>
 8001076:	21a4      	movs	r1, #164	; 0xa4
 8001078:	4864      	ldr	r0, [pc, #400]	; (800120c <HAL_DMA_Init+0x234>)
 800107a:	f7ff fae3 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00c      	beq.n	80010a0 <HAL_DMA_Init+0xc8>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b10      	cmp	r3, #16
 800108c:	d008      	beq.n	80010a0 <HAL_DMA_Init+0xc8>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001096:	d003      	beq.n	80010a0 <HAL_DMA_Init+0xc8>
 8001098:	21a5      	movs	r1, #165	; 0xa5
 800109a:	485c      	ldr	r0, [pc, #368]	; (800120c <HAL_DMA_Init+0x234>)
 800109c:	f7ff fad2 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	2b40      	cmp	r3, #64	; 0x40
 80010a6:	d007      	beq.n	80010b8 <HAL_DMA_Init+0xe0>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_DMA_Init+0xe0>
 80010b0:	21a6      	movs	r1, #166	; 0xa6
 80010b2:	4856      	ldr	r0, [pc, #344]	; (800120c <HAL_DMA_Init+0x234>)
 80010b4:	f7ff fac6 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	2b80      	cmp	r3, #128	; 0x80
 80010be:	d007      	beq.n	80010d0 <HAL_DMA_Init+0xf8>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_DMA_Init+0xf8>
 80010c8:	21a7      	movs	r1, #167	; 0xa7
 80010ca:	4850      	ldr	r0, [pc, #320]	; (800120c <HAL_DMA_Init+0x234>)
 80010cc:	f7ff faba 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00d      	beq.n	80010f4 <HAL_DMA_Init+0x11c>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010e0:	d008      	beq.n	80010f4 <HAL_DMA_Init+0x11c>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ea:	d003      	beq.n	80010f4 <HAL_DMA_Init+0x11c>
 80010ec:	21a8      	movs	r1, #168	; 0xa8
 80010ee:	4847      	ldr	r0, [pc, #284]	; (800120c <HAL_DMA_Init+0x234>)
 80010f0:	f7ff faa8 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00d      	beq.n	8001118 <HAL_DMA_Init+0x140>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001104:	d008      	beq.n	8001118 <HAL_DMA_Init+0x140>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800110e:	d003      	beq.n	8001118 <HAL_DMA_Init+0x140>
 8001110:	21a9      	movs	r1, #169	; 0xa9
 8001112:	483e      	ldr	r0, [pc, #248]	; (800120c <HAL_DMA_Init+0x234>)
 8001114:	f7ff fa96 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <HAL_DMA_Init+0x158>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	2b20      	cmp	r3, #32
 8001126:	d003      	beq.n	8001130 <HAL_DMA_Init+0x158>
 8001128:	21aa      	movs	r1, #170	; 0xaa
 800112a:	4838      	ldr	r0, [pc, #224]	; (800120c <HAL_DMA_Init+0x234>)
 800112c:	f7ff fa8a 	bl	8000644 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d012      	beq.n	800115e <HAL_DMA_Init+0x186>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001140:	d00d      	beq.n	800115e <HAL_DMA_Init+0x186>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800114a:	d008      	beq.n	800115e <HAL_DMA_Init+0x186>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001154:	d003      	beq.n	800115e <HAL_DMA_Init+0x186>
 8001156:	21ab      	movs	r1, #171	; 0xab
 8001158:	482c      	ldr	r0, [pc, #176]	; (800120c <HAL_DMA_Init+0x234>)
 800115a:	f7ff fa73 	bl	8000644 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d01f      	beq.n	80011a6 <HAL_DMA_Init+0x1ce>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d01b      	beq.n	80011a6 <HAL_DMA_Init+0x1ce>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d017      	beq.n	80011a6 <HAL_DMA_Init+0x1ce>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d013      	beq.n	80011a6 <HAL_DMA_Init+0x1ce>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b04      	cmp	r3, #4
 8001184:	d00f      	beq.n	80011a6 <HAL_DMA_Init+0x1ce>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b05      	cmp	r3, #5
 800118c:	d00b      	beq.n	80011a6 <HAL_DMA_Init+0x1ce>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b06      	cmp	r3, #6
 8001194:	d007      	beq.n	80011a6 <HAL_DMA_Init+0x1ce>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b07      	cmp	r3, #7
 800119c:	d003      	beq.n	80011a6 <HAL_DMA_Init+0x1ce>
 800119e:	21ad      	movs	r1, #173	; 0xad
 80011a0:	481a      	ldr	r0, [pc, #104]	; (800120c <HAL_DMA_Init+0x234>)
 80011a2:	f7ff fa4f 	bl	8000644 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_DMA_Init+0x238>)
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d836      	bhi.n	8001220 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_DMA_Init+0x23c>)
 80011ba:	4413      	add	r3, r2
 80011bc:	4a16      	ldr	r2, [pc, #88]	; (8001218 <HAL_DMA_Init+0x240>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	009a      	lsls	r2, r3, #2
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a13      	ldr	r2, [pc, #76]	; (800121c <HAL_DMA_Init+0x244>)
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
 80011d0:	e035      	b.n	800123e <HAL_DMA_Init+0x266>
 80011d2:	bf00      	nop
 80011d4:	40020008 	.word	0x40020008
 80011d8:	4002001c 	.word	0x4002001c
 80011dc:	40020030 	.word	0x40020030
 80011e0:	40020044 	.word	0x40020044
 80011e4:	40020058 	.word	0x40020058
 80011e8:	4002006c 	.word	0x4002006c
 80011ec:	40020080 	.word	0x40020080
 80011f0:	40020408 	.word	0x40020408
 80011f4:	4002041c 	.word	0x4002041c
 80011f8:	40020430 	.word	0x40020430
 80011fc:	40020444 	.word	0x40020444
 8001200:	40020458 	.word	0x40020458
 8001204:	4002046c 	.word	0x4002046c
 8001208:	40020480 	.word	0x40020480
 800120c:	08007cf0 	.word	0x08007cf0
 8001210:	40020407 	.word	0x40020407
 8001214:	bffdfff8 	.word	0xbffdfff8
 8001218:	cccccccd 	.word	0xcccccccd
 800121c:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b42      	ldr	r3, [pc, #264]	; (8001330 <HAL_DMA_Init+0x358>)
 8001228:	4413      	add	r3, r2
 800122a:	4a42      	ldr	r2, [pc, #264]	; (8001334 <HAL_DMA_Init+0x35c>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	009a      	lsls	r2, r3, #2
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a3f      	ldr	r2, [pc, #252]	; (8001338 <HAL_DMA_Init+0x360>)
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2202      	movs	r2, #2
 8001242:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001258:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001262:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001298:	d039      	beq.n	800130e <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a27      	ldr	r2, [pc, #156]	; (800133c <HAL_DMA_Init+0x364>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d11a      	bne.n	80012da <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <HAL_DMA_Init+0x368>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f003 031c 	and.w	r3, r3, #28
 80012b0:	210f      	movs	r1, #15
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	4921      	ldr	r1, [pc, #132]	; (8001340 <HAL_DMA_Init+0x368>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_DMA_Init+0x368>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6859      	ldr	r1, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f003 031c 	and.w	r3, r3, #28
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	491b      	ldr	r1, [pc, #108]	; (8001340 <HAL_DMA_Init+0x368>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]
 80012d8:	e019      	b.n	800130e <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_DMA_Init+0x36c>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f003 031c 	and.w	r3, r3, #28
 80012e6:	210f      	movs	r1, #15
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4915      	ldr	r1, [pc, #84]	; (8001344 <HAL_DMA_Init+0x36c>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_DMA_Init+0x36c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6859      	ldr	r1, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	f003 031c 	and.w	r3, r3, #28
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	490e      	ldr	r1, [pc, #56]	; (8001344 <HAL_DMA_Init+0x36c>)
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	bffdfbf8 	.word	0xbffdfbf8
 8001334:	cccccccd 	.word	0xcccccccd
 8001338:	40020400 	.word	0x40020400
 800133c:	40020000 	.word	0x40020000
 8001340:	400200a8 	.word	0x400200a8
 8001344:	400204a8 	.word	0x400204a8

08001348 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_DMA_Start_IT+0x20>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001366:	d304      	bcc.n	8001372 <HAL_DMA_Start_IT+0x2a>
 8001368:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800136c:	482c      	ldr	r0, [pc, #176]	; (8001420 <HAL_DMA_Start_IT+0xd8>)
 800136e:	f7ff f969 	bl	8000644 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_DMA_Start_IT+0x38>
 800137c:	2302      	movs	r3, #2
 800137e:	e04b      	b.n	8001418 <HAL_DMA_Start_IT+0xd0>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b01      	cmp	r3, #1
 8001392:	d13a      	bne.n	800140a <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2202      	movs	r2, #2
 8001398:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2200      	movs	r2, #0
 80013a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0201 	bic.w	r2, r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	68b9      	ldr	r1, [r7, #8]
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 f96d 	bl	8001698 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 020e 	orr.w	r2, r2, #14
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e00f      	b.n	80013f8 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0204 	bic.w	r2, r2, #4
 80013e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 020a 	orr.w	r2, r2, #10
 80013f6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0201 	orr.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	e005      	b.n	8001416 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001412:	2302      	movs	r3, #2
 8001414:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001416:	7dfb      	ldrb	r3, [r7, #23]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	08007cf0 	.word	0x08007cf0

08001424 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d008      	beq.n	800144e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2204      	movs	r2, #4
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e022      	b.n	8001494 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 020e 	bic.w	r2, r2, #14
 800145c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0201 	bic.w	r2, r2, #1
 800146c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f003 021c 	and.w	r2, r3, #28
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f202 	lsl.w	r2, r1, r2
 8001480:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001492:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d005      	beq.n	80014c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2204      	movs	r2, #4
 80014bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	e029      	b.n	8001518 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 020e 	bic.w	r2, r2, #14
 80014d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e8:	f003 021c 	and.w	r2, r3, #28
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	4798      	blx	r3
    }
  }
  return status;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f003 031c 	and.w	r3, r3, #28
 8001542:	2204      	movs	r2, #4
 8001544:	409a      	lsls	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4013      	ands	r3, r2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d026      	beq.n	800159c <HAL_DMA_IRQHandler+0x7a>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d021      	beq.n	800159c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0320 	and.w	r3, r3, #32
 8001562:	2b00      	cmp	r3, #0
 8001564:	d107      	bne.n	8001576 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0204 	bic.w	r2, r2, #4
 8001574:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f003 021c 	and.w	r2, r3, #28
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	2104      	movs	r1, #4
 8001584:	fa01 f202 	lsl.w	r2, r1, r2
 8001588:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	2b00      	cmp	r3, #0
 8001590:	d071      	beq.n	8001676 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800159a:	e06c      	b.n	8001676 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	f003 031c 	and.w	r3, r3, #28
 80015a4:	2202      	movs	r2, #2
 80015a6:	409a      	lsls	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d02e      	beq.n	800160e <HAL_DMA_IRQHandler+0xec>
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d029      	beq.n	800160e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0320 	and.w	r3, r3, #32
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10b      	bne.n	80015e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 020a 	bic.w	r2, r2, #10
 80015d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	f003 021c 	and.w	r2, r3, #28
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	2102      	movs	r1, #2
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	2b00      	cmp	r3, #0
 8001602:	d038      	beq.n	8001676 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800160c:	e033      	b.n	8001676 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f003 031c 	and.w	r3, r3, #28
 8001616:	2208      	movs	r2, #8
 8001618:	409a      	lsls	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d02a      	beq.n	8001678 <HAL_DMA_IRQHandler+0x156>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d025      	beq.n	8001678 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 020e 	bic.w	r2, r2, #14
 800163a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	f003 021c 	and.w	r2, r3, #28
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f202 	lsl.w	r2, r1, r2
 800164e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001676:	bf00      	nop
 8001678:	bf00      	nop
}
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f003 021c 	and.w	r2, r3, #28
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d108      	bne.n	80016dc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016da:	e007      	b.n	80016ec <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	60da      	str	r2, [r3, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800170c:	d00f      	beq.n	800172e <HAL_GPIO_Init+0x36>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a37      	ldr	r2, [pc, #220]	; (80017f0 <HAL_GPIO_Init+0xf8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00b      	beq.n	800172e <HAL_GPIO_Init+0x36>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a36      	ldr	r2, [pc, #216]	; (80017f4 <HAL_GPIO_Init+0xfc>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d007      	beq.n	800172e <HAL_GPIO_Init+0x36>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a35      	ldr	r2, [pc, #212]	; (80017f8 <HAL_GPIO_Init+0x100>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x36>
 8001726:	21b3      	movs	r1, #179	; 0xb3
 8001728:	4834      	ldr	r0, [pc, #208]	; (80017fc <HAL_GPIO_Init+0x104>)
 800172a:	f7fe ff8b 	bl	8000644 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_GPIO_Init+0x4c>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x54>
 8001744:	21b4      	movs	r1, #180	; 0xb4
 8001746:	482d      	ldr	r0, [pc, #180]	; (80017fc <HAL_GPIO_Init+0x104>)
 8001748:	f7fe ff7c 	bl	8000644 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d039      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d035      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b11      	cmp	r3, #17
 8001762:	d031      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d02d      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b12      	cmp	r3, #18
 8001772:	d029      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a21      	ldr	r2, [pc, #132]	; (8001800 <HAL_GPIO_Init+0x108>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d024      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4a20      	ldr	r2, [pc, #128]	; (8001804 <HAL_GPIO_Init+0x10c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d01f      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <HAL_GPIO_Init+0x110>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01a      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4a1d      	ldr	r2, [pc, #116]	; (800180c <HAL_GPIO_Init+0x114>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d015      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <HAL_GPIO_Init+0x118>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d010      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_GPIO_Init+0x11c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00b      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b0b      	cmp	r3, #11
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0xd0>
 80017c0:	21b5      	movs	r1, #181	; 0xb5
 80017c2:	480e      	ldr	r0, [pc, #56]	; (80017fc <HAL_GPIO_Init+0x104>)
 80017c4:	f7fe ff3e 	bl	8000644 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 81a8 	beq.w	8001b22 <HAL_GPIO_Init+0x42a>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	f000 81a3 	beq.w	8001b22 <HAL_GPIO_Init+0x42a>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	f000 819e 	beq.w	8001b22 <HAL_GPIO_Init+0x42a>
 80017e6:	21b6      	movs	r1, #182	; 0xb6
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <HAL_GPIO_Init+0x104>)
 80017ea:	f7fe ff2b 	bl	8000644 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ee:	e198      	b.n	8001b22 <HAL_GPIO_Init+0x42a>
 80017f0:	48000400 	.word	0x48000400
 80017f4:	48000800 	.word	0x48000800
 80017f8:	48001c00 	.word	0x48001c00
 80017fc:	08007d28 	.word	0x08007d28
 8001800:	10110000 	.word	0x10110000
 8001804:	10210000 	.word	0x10210000
 8001808:	10310000 	.word	0x10310000
 800180c:	10120000 	.word	0x10120000
 8001810:	10220000 	.word	0x10220000
 8001814:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2101      	movs	r1, #1
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 8176 	beq.w	8001b1c <HAL_GPIO_Init+0x424>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d00b      	beq.n	8001850 <HAL_GPIO_Init+0x158>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d007      	beq.n	8001850 <HAL_GPIO_Init+0x158>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001844:	2b11      	cmp	r3, #17
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x158>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b12      	cmp	r3, #18
 800184e:	d144      	bne.n	80018da <HAL_GPIO_Init+0x1e2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00f      	beq.n	8001878 <HAL_GPIO_Init+0x180>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d00b      	beq.n	8001878 <HAL_GPIO_Init+0x180>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d007      	beq.n	8001878 <HAL_GPIO_Init+0x180>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x180>
 8001870:	21c6      	movs	r1, #198	; 0xc6
 8001872:	4872      	ldr	r0, [pc, #456]	; (8001a3c <HAL_GPIO_Init+0x344>)
 8001874:	f7fe fee6 	bl	8000644 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ae:	2201      	movs	r2, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	f003 0201 	and.w	r2, r3, #1
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x222>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b12      	cmp	r3, #18
 8001918:	d13f      	bne.n	800199a <HAL_GPIO_Init+0x2a2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001920:	d00f      	beq.n	8001942 <HAL_GPIO_Init+0x24a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a46      	ldr	r2, [pc, #280]	; (8001a40 <HAL_GPIO_Init+0x348>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00b      	beq.n	8001942 <HAL_GPIO_Init+0x24a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a45      	ldr	r2, [pc, #276]	; (8001a44 <HAL_GPIO_Init+0x34c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x24a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a44      	ldr	r2, [pc, #272]	; (8001a48 <HAL_GPIO_Init+0x350>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x24a>
 800193a:	21ec      	movs	r1, #236	; 0xec
 800193c:	483f      	ldr	r0, [pc, #252]	; (8001a3c <HAL_GPIO_Init+0x344>)
 800193e:	f7fe fe81 	bl	8000644 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	2b0f      	cmp	r3, #15
 8001948:	d903      	bls.n	8001952 <HAL_GPIO_Init+0x25a>
 800194a:	21ed      	movs	r1, #237	; 0xed
 800194c:	483b      	ldr	r0, [pc, #236]	; (8001a3c <HAL_GPIO_Init+0x344>)
 800194e:	f7fe fe79 	bl	8000644 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	08da      	lsrs	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3208      	adds	r2, #8
 800195a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	6939      	ldr	r1, [r7, #16]
 8001996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0203 	and.w	r2, r3, #3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80a0 	beq.w	8001b1c <HAL_GPIO_Init+0x424>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_GPIO_Init+0x354>)
 80019de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e0:	4a1a      	ldr	r2, [pc, #104]	; (8001a4c <HAL_GPIO_Init+0x354>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6613      	str	r3, [r2, #96]	; 0x60
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_GPIO_Init+0x354>)
 80019ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f4:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <HAL_GPIO_Init+0x358>)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a1e:	d019      	beq.n	8001a54 <HAL_GPIO_Init+0x35c>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_GPIO_Init+0x348>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d007      	beq.n	8001a38 <HAL_GPIO_Init+0x340>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_GPIO_Init+0x34c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_GPIO_Init+0x33c>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e010      	b.n	8001a56 <HAL_GPIO_Init+0x35e>
 8001a34:	2307      	movs	r3, #7
 8001a36:	e00e      	b.n	8001a56 <HAL_GPIO_Init+0x35e>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e00c      	b.n	8001a56 <HAL_GPIO_Init+0x35e>
 8001a3c:	08007d28 	.word	0x08007d28
 8001a40:	48000400 	.word	0x48000400
 8001a44:	48000800 	.word	0x48000800
 8001a48:	48001c00 	.word	0x48001c00
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010000 	.word	0x40010000
 8001a54:	2300      	movs	r3, #0
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	f002 0203 	and.w	r2, r2, #3
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	4093      	lsls	r3, r2
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a66:	4935      	ldr	r1, [pc, #212]	; (8001b3c <HAL_GPIO_Init+0x444>)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a74:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <HAL_GPIO_Init+0x448>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x3a0>
        {
          temp |= iocurrent;
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a98:	4a29      	ldr	r2, [pc, #164]	; (8001b40 <HAL_GPIO_Init+0x448>)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <HAL_GPIO_Init+0x448>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x3ca>
        {
          temp |= iocurrent;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ac2:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <HAL_GPIO_Init+0x448>)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_GPIO_Init+0x448>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x3f4>
        {
          temp |= iocurrent;
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aec:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <HAL_GPIO_Init+0x448>)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_GPIO_Init+0x448>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x41e>
        {
          temp |= iocurrent;
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_GPIO_Init+0x448>)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f47f ae73 	bne.w	8001818 <HAL_GPIO_Init+0x120>
  }
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <HAL_GPIO_WritePin+0x20>
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	0c1b      	lsrs	r3, r3, #16
 8001b5e:	041b      	lsls	r3, r3, #16
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <HAL_GPIO_WritePin+0x2a>
 8001b64:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <HAL_GPIO_WritePin+0x5c>)
 8001b6a:	f7fe fd6b 	bl	8000644 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001b6e:	787b      	ldrb	r3, [r7, #1]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_GPIO_WritePin+0x40>
 8001b74:	787b      	ldrb	r3, [r7, #1]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d004      	beq.n	8001b84 <HAL_GPIO_WritePin+0x40>
 8001b7a:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001b7e:	4808      	ldr	r0, [pc, #32]	; (8001ba0 <HAL_GPIO_WritePin+0x5c>)
 8001b80:	f7fe fd60 	bl	8000644 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b90:	e002      	b.n	8001b98 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	08007d28 	.word	0x08007d28

08001ba4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f004 fb64 	bl	8006290 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0ff      	b.n	8001de6 <HAL_I2C_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a81      	ldr	r2, [pc, #516]	; (8001df0 <HAL_I2C_Init+0x21c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d009      	beq.n	8001c04 <HAL_I2C_Init+0x30>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a7f      	ldr	r2, [pc, #508]	; (8001df4 <HAL_I2C_Init+0x220>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d004      	beq.n	8001c04 <HAL_I2C_Init+0x30>
 8001bfa:	f240 11e5 	movw	r1, #485	; 0x1e5
 8001bfe:	487e      	ldr	r0, [pc, #504]	; (8001df8 <HAL_I2C_Init+0x224>)
 8001c00:	f7fe fd20 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0c:	d304      	bcc.n	8001c18 <HAL_I2C_Init+0x44>
 8001c0e:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8001c12:	4879      	ldr	r0, [pc, #484]	; (8001df8 <HAL_I2C_Init+0x224>)
 8001c14:	f7fe fd16 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d008      	beq.n	8001c32 <HAL_I2C_Init+0x5e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d004      	beq.n	8001c32 <HAL_I2C_Init+0x5e>
 8001c28:	f240 11e7 	movw	r1, #487	; 0x1e7
 8001c2c:	4872      	ldr	r0, [pc, #456]	; (8001df8 <HAL_I2C_Init+0x224>)
 8001c2e:	f7fe fd09 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_I2C_Init+0x7a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c42:	d004      	beq.n	8001c4e <HAL_I2C_Init+0x7a>
 8001c44:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8001c48:	486b      	ldr	r0, [pc, #428]	; (8001df8 <HAL_I2C_Init+0x224>)
 8001c4a:	f7fe fcfb 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	2bff      	cmp	r3, #255	; 0xff
 8001c54:	d904      	bls.n	8001c60 <HAL_I2C_Init+0x8c>
 8001c56:	f240 11e9 	movw	r1, #489	; 0x1e9
 8001c5a:	4867      	ldr	r0, [pc, #412]	; (8001df8 <HAL_I2C_Init+0x224>)
 8001c5c:	f7fe fcf2 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_I2C_Init+0xd6>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d01c      	beq.n	8001caa <HAL_I2C_Init+0xd6>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d018      	beq.n	8001caa <HAL_I2C_Init+0xd6>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d014      	beq.n	8001caa <HAL_I2C_Init+0xd6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d010      	beq.n	8001caa <HAL_I2C_Init+0xd6>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d00c      	beq.n	8001caa <HAL_I2C_Init+0xd6>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b06      	cmp	r3, #6
 8001c96:	d008      	beq.n	8001caa <HAL_I2C_Init+0xd6>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b07      	cmp	r3, #7
 8001c9e:	d004      	beq.n	8001caa <HAL_I2C_Init+0xd6>
 8001ca0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8001ca4:	4854      	ldr	r0, [pc, #336]	; (8001df8 <HAL_I2C_Init+0x224>)
 8001ca6:	f7fe fccd 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <HAL_I2C_Init+0xf2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cba:	d004      	beq.n	8001cc6 <HAL_I2C_Init+0xf2>
 8001cbc:	f240 11eb 	movw	r1, #491	; 0x1eb
 8001cc0:	484d      	ldr	r0, [pc, #308]	; (8001df8 <HAL_I2C_Init+0x224>)
 8001cc2:	f7fe fcbf 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HAL_I2C_Init+0x10e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cd6:	d004      	beq.n	8001ce2 <HAL_I2C_Init+0x10e>
 8001cd8:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001cdc:	4846      	ldr	r0, [pc, #280]	; (8001df8 <HAL_I2C_Init+0x224>)
 8001cde:	f7fe fcb1 	bl	8000644 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7fe fcd4 	bl	80006a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2224      	movs	r2, #36	; 0x24
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_I2C_Init+0x176>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	e006      	b.n	8001d58 <HAL_I2C_Init+0x184>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d104      	bne.n	8001d6a <HAL_I2C_Init+0x196>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	ea42 0103 	orr.w	r1, r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	021a      	lsls	r2, r3, #8
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69d9      	ldr	r1, [r3, #28]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1a      	ldr	r2, [r3, #32]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40005400 	.word	0x40005400
 8001df4:	40005c00 	.word	0x40005c00
 8001df8:	08007d64 	.word	0x08007d64

08001dfc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	461a      	mov	r2, r3
 8001e08:	460b      	mov	r3, r1
 8001e0a:	817b      	strh	r3, [r7, #10]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	f040 80da 	bne.w	8001fd2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_I2C_Master_Transmit+0x30>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e0d3      	b.n	8001fd4 <HAL_I2C_Master_Transmit+0x1d8>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e34:	f7fe ff62 	bl	8000cfc <HAL_GetTick>
 8001e38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2319      	movs	r3, #25
 8001e40:	2201      	movs	r2, #1
 8001e42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 fb5c 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0be      	b.n	8001fd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2221      	movs	r2, #33	; 0x21
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2210      	movs	r2, #16
 8001e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	893a      	ldrh	r2, [r7, #8]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2bff      	cmp	r3, #255	; 0xff
 8001e86:	d90e      	bls.n	8001ea6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	22ff      	movs	r2, #255	; 0xff
 8001e8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	8979      	ldrh	r1, [r7, #10]
 8001e96:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <HAL_I2C_Master_Transmit+0x1e0>)
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 fcbe 	bl	8002820 <I2C_TransferConfig>
 8001ea4:	e06c      	b.n	8001f80 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	8979      	ldrh	r1, [r7, #10]
 8001eb8:	4b48      	ldr	r3, [pc, #288]	; (8001fdc <HAL_I2C_Master_Transmit+0x1e0>)
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fcad 	bl	8002820 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ec6:	e05b      	b.n	8001f80 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	6a39      	ldr	r1, [r7, #32]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 fb59 	bl	8002584 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e07b      	b.n	8001fd4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d034      	beq.n	8001f80 <HAL_I2C_Master_Transmit+0x184>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d130      	bne.n	8001f80 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	2200      	movs	r2, #0
 8001f26:	2180      	movs	r1, #128	; 0x80
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 faeb 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e04d      	b.n	8001fd4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2bff      	cmp	r3, #255	; 0xff
 8001f40:	d90e      	bls.n	8001f60 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	22ff      	movs	r2, #255	; 0xff
 8001f46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	8979      	ldrh	r1, [r7, #10]
 8001f50:	2300      	movs	r3, #0
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 fc61 	bl	8002820 <I2C_TransferConfig>
 8001f5e:	e00f      	b.n	8001f80 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	8979      	ldrh	r1, [r7, #10]
 8001f72:	2300      	movs	r3, #0
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fc50 	bl	8002820 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d19e      	bne.n	8001ec8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	6a39      	ldr	r1, [r7, #32]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fb38 	bl	8002604 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e01a      	b.n	8001fd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
  }
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	80002000 	.word	0x80002000
 8001fe0:	fe00e800 	.word	0xfe00e800

08001fe4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	817b      	strh	r3, [r7, #10]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b20      	cmp	r3, #32
 8002002:	f040 80db 	bne.w	80021bc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_I2C_Master_Receive+0x30>
 8002010:	2302      	movs	r3, #2
 8002012:	e0d4      	b.n	80021be <HAL_I2C_Master_Receive+0x1da>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800201c:	f7fe fe6e 	bl	8000cfc <HAL_GetTick>
 8002020:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2319      	movs	r3, #25
 8002028:	2201      	movs	r2, #1
 800202a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fa68 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0bf      	b.n	80021be <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2222      	movs	r2, #34	; 0x22
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2210      	movs	r2, #16
 800204a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	893a      	ldrh	r2, [r7, #8]
 800205e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	2bff      	cmp	r3, #255	; 0xff
 800206e:	d90e      	bls.n	800208e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	22ff      	movs	r2, #255	; 0xff
 8002074:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	b2da      	uxtb	r2, r3
 800207c:	8979      	ldrh	r1, [r7, #10]
 800207e:	4b52      	ldr	r3, [pc, #328]	; (80021c8 <HAL_I2C_Master_Receive+0x1e4>)
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fbca 	bl	8002820 <I2C_TransferConfig>
 800208c:	e06d      	b.n	800216a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	b2da      	uxtb	r2, r3
 800209e:	8979      	ldrh	r1, [r7, #10]
 80020a0:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_I2C_Master_Receive+0x1e4>)
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fbb9 	bl	8002820 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80020ae:	e05c      	b.n	800216a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	6a39      	ldr	r1, [r7, #32]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fae1 	bl	800267c <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e07c      	b.n	80021be <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d034      	beq.n	800216a <HAL_I2C_Master_Receive+0x186>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002104:	2b00      	cmp	r3, #0
 8002106:	d130      	bne.n	800216a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	2200      	movs	r2, #0
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f9f6 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e04d      	b.n	80021be <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	2bff      	cmp	r3, #255	; 0xff
 800212a:	d90e      	bls.n	800214a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	22ff      	movs	r2, #255	; 0xff
 8002130:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	b2da      	uxtb	r2, r3
 8002138:	8979      	ldrh	r1, [r7, #10]
 800213a:	2300      	movs	r3, #0
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fb6c 	bl	8002820 <I2C_TransferConfig>
 8002148:	e00f      	b.n	800216a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	b2da      	uxtb	r2, r3
 800215a:	8979      	ldrh	r1, [r7, #10]
 800215c:	2300      	movs	r3, #0
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 fb5b 	bl	8002820 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d19d      	bne.n	80020b0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	6a39      	ldr	r1, [r7, #32]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fa43 	bl	8002604 <I2C_WaitOnSTOPFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e01a      	b.n	80021be <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2220      	movs	r2, #32
 800218e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6859      	ldr	r1, [r3, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <HAL_I2C_Master_Receive+0x1e8>)
 800219c:	400b      	ands	r3, r1
 800219e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80021bc:	2302      	movs	r3, #2
  }
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	80002400 	.word	0x80002400
 80021cc:	fe00e800 	.word	0xfe00e800

080021d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	4608      	mov	r0, r1
 80021da:	4611      	mov	r1, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	817b      	strh	r3, [r7, #10]
 80021e2:	460b      	mov	r3, r1
 80021e4:	813b      	strh	r3, [r7, #8]
 80021e6:	4613      	mov	r3, r2
 80021e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d007      	beq.n	8002200 <HAL_I2C_Mem_Write+0x30>
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d004      	beq.n	8002200 <HAL_I2C_Mem_Write+0x30>
 80021f6:	f640 01fb 	movw	r1, #2299	; 0x8fb
 80021fa:	4884      	ldr	r0, [pc, #528]	; (800240c <HAL_I2C_Mem_Write+0x23c>)
 80021fc:	f7fe fa22 	bl	8000644 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b20      	cmp	r3, #32
 800220a:	f040 80f9 	bne.w	8002400 <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_I2C_Mem_Write+0x4a>
 8002214:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002220:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0ed      	b.n	8002402 <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_I2C_Mem_Write+0x64>
 8002230:	2302      	movs	r3, #2
 8002232:	e0e6      	b.n	8002402 <HAL_I2C_Mem_Write+0x232>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800223c:	f7fe fd5e 	bl	8000cfc <HAL_GetTick>
 8002240:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2319      	movs	r3, #25
 8002248:	2201      	movs	r2, #1
 800224a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f958 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0d1      	b.n	8002402 <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2221      	movs	r2, #33	; 0x21
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2240      	movs	r2, #64	; 0x40
 800226a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a3a      	ldr	r2, [r7, #32]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800227e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002286:	88f8      	ldrh	r0, [r7, #6]
 8002288:	893a      	ldrh	r2, [r7, #8]
 800228a:	8979      	ldrh	r1, [r7, #10]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4603      	mov	r3, r0
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f8bc 	bl	8002414 <I2C_RequestMemoryWrite>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0a9      	b.n	8002402 <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2bff      	cmp	r3, #255	; 0xff
 80022b6:	d90e      	bls.n	80022d6 <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	22ff      	movs	r2, #255	; 0xff
 80022bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	8979      	ldrh	r1, [r7, #10]
 80022c6:	2300      	movs	r3, #0
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 faa6 	bl	8002820 <I2C_TransferConfig>
 80022d4:	e00f      	b.n	80022f6 <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	8979      	ldrh	r1, [r7, #10]
 80022e8:	2300      	movs	r3, #0
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fa95 	bl	8002820 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f942 	bl	8002584 <I2C_WaitOnTXISFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e07b      	b.n	8002402 <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	781a      	ldrb	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002324:	b29b      	uxth	r3, r3
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d034      	beq.n	80023ae <HAL_I2C_Mem_Write+0x1de>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	2b00      	cmp	r3, #0
 800234a:	d130      	bne.n	80023ae <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	2200      	movs	r2, #0
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f8d4 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e04d      	b.n	8002402 <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236a:	b29b      	uxth	r3, r3
 800236c:	2bff      	cmp	r3, #255	; 0xff
 800236e:	d90e      	bls.n	800238e <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	22ff      	movs	r2, #255	; 0xff
 8002374:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237a:	b2da      	uxtb	r2, r3
 800237c:	8979      	ldrh	r1, [r7, #10]
 800237e:	2300      	movs	r3, #0
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fa4a 	bl	8002820 <I2C_TransferConfig>
 800238c:	e00f      	b.n	80023ae <HAL_I2C_Mem_Write+0x1de>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	b2da      	uxtb	r2, r3
 800239e:	8979      	ldrh	r1, [r7, #10]
 80023a0:	2300      	movs	r3, #0
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fa39 	bl	8002820 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d19e      	bne.n	80022f6 <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f921 	bl	8002604 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e01a      	b.n	8002402 <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2220      	movs	r2, #32
 80023d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_I2C_Mem_Write+0x240>)
 80023e0:	400b      	ands	r3, r1
 80023e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e000      	b.n	8002402 <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 8002400:	2302      	movs	r3, #2
  }
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	08007d64 	.word	0x08007d64
 8002410:	fe00e800 	.word	0xfe00e800

08002414 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	4608      	mov	r0, r1
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	4603      	mov	r3, r0
 8002424:	817b      	strh	r3, [r7, #10]
 8002426:	460b      	mov	r3, r1
 8002428:	813b      	strh	r3, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	8979      	ldrh	r1, [r7, #10]
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <I2C_RequestMemoryWrite+0xa4>)
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f9ef 	bl	8002820 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	69b9      	ldr	r1, [r7, #24]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f89c 	bl	8002584 <I2C_WaitOnTXISFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e02c      	b.n	80024b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800245c:	893b      	ldrh	r3, [r7, #8]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
 8002466:	e015      	b.n	8002494 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002468:	893b      	ldrh	r3, [r7, #8]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	b29b      	uxth	r3, r3
 800246e:	b2da      	uxtb	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	69b9      	ldr	r1, [r7, #24]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f882 	bl	8002584 <I2C_WaitOnTXISFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e012      	b.n	80024b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800248a:	893b      	ldrh	r3, [r7, #8]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2200      	movs	r2, #0
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f830 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	80002000 	.word	0x80002000

080024bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d103      	bne.n	80024da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d007      	beq.n	80024f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	619a      	str	r2, [r3, #24]
  }
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002514:	e022      	b.n	800255c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d01e      	beq.n	800255c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7fe fbed 	bl	8000cfc <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <I2C_WaitOnFlagUntilTimeout+0x30>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d113      	bne.n	800255c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	f043 0220 	orr.w	r2, r3, #32
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e00f      	b.n	800257c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4013      	ands	r3, r2
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	429a      	cmp	r2, r3
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	429a      	cmp	r2, r3
 8002578:	d0cd      	beq.n	8002516 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002590:	e02c      	b.n	80025ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f8dc 	bl	8002754 <I2C_IsAcknowledgeFailed>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e02a      	b.n	80025fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d01e      	beq.n	80025ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ae:	f7fe fba5 	bl	8000cfc <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d302      	bcc.n	80025c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d113      	bne.n	80025ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	f043 0220 	orr.w	r2, r3, #32
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e007      	b.n	80025fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d1cb      	bne.n	8002592 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002610:	e028      	b.n	8002664 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f89c 	bl	8002754 <I2C_IsAcknowledgeFailed>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e026      	b.n	8002674 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002626:	f7fe fb69 	bl	8000cfc <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	429a      	cmp	r2, r3
 8002634:	d302      	bcc.n	800263c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d113      	bne.n	8002664 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	f043 0220 	orr.w	r2, r3, #32
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e007      	b.n	8002674 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b20      	cmp	r3, #32
 8002670:	d1cf      	bne.n	8002612 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002688:	e055      	b.n	8002736 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f860 	bl	8002754 <I2C_IsAcknowledgeFailed>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e053      	b.n	8002746 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d129      	bne.n	8002700 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d105      	bne.n	80026c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e03f      	b.n	8002746 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2220      	movs	r2, #32
 80026cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80026da:	400b      	ands	r3, r1
 80026dc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e022      	b.n	8002746 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002700:	f7fe fafc 	bl	8000cfc <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	429a      	cmp	r2, r3
 800270e:	d302      	bcc.n	8002716 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f043 0220 	orr.w	r2, r3, #32
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e007      	b.n	8002746 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b04      	cmp	r3, #4
 8002742:	d1a2      	bne.n	800268a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	fe00e800 	.word	0xfe00e800

08002754 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b10      	cmp	r3, #16
 800276c:	d151      	bne.n	8002812 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800276e:	e022      	b.n	80027b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002776:	d01e      	beq.n	80027b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002778:	f7fe fac0 	bl	8000cfc <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	429a      	cmp	r2, r3
 8002786:	d302      	bcc.n	800278e <I2C_IsAcknowledgeFailed+0x3a>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d113      	bne.n	80027b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f043 0220 	orr.w	r2, r3, #32
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e02e      	b.n	8002814 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d1d5      	bne.n	8002770 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2210      	movs	r2, #16
 80027ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2220      	movs	r2, #32
 80027d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff fe71 	bl	80024bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <I2C_IsAcknowledgeFailed+0xc8>)
 80027e6:	400b      	ands	r3, r1
 80027e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f043 0204 	orr.w	r2, r3, #4
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	fe00e800 	.word	0xfe00e800

08002820 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	817b      	strh	r3, [r7, #10]
 800282e:	4613      	mov	r3, r2
 8002830:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a28      	ldr	r2, [pc, #160]	; (80028d8 <I2C_TransferConfig+0xb8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d009      	beq.n	8002850 <I2C_TransferConfig+0x30>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a26      	ldr	r2, [pc, #152]	; (80028dc <I2C_TransferConfig+0xbc>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d004      	beq.n	8002850 <I2C_TransferConfig+0x30>
 8002846:	f641 1139 	movw	r1, #6457	; 0x1939
 800284a:	4825      	ldr	r0, [pc, #148]	; (80028e0 <I2C_TransferConfig+0xc0>)
 800284c:	f7fd fefa 	bl	8000644 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002856:	d00b      	beq.n	8002870 <I2C_TransferConfig+0x50>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800285e:	d007      	beq.n	8002870 <I2C_TransferConfig+0x50>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <I2C_TransferConfig+0x50>
 8002866:	f641 113a 	movw	r1, #6458	; 0x193a
 800286a:	481d      	ldr	r0, [pc, #116]	; (80028e0 <I2C_TransferConfig+0xc0>)
 800286c:	f7fd feea 	bl	8000644 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <I2C_TransferConfig+0xc4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00f      	beq.n	8002898 <I2C_TransferConfig+0x78>
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <I2C_TransferConfig+0xc8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00b      	beq.n	8002898 <I2C_TransferConfig+0x78>
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4a1a      	ldr	r2, [pc, #104]	; (80028ec <I2C_TransferConfig+0xcc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <I2C_TransferConfig+0x78>
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <I2C_TransferConfig+0x78>
 800288e:	f641 113b 	movw	r1, #6459	; 0x193b
 8002892:	4813      	ldr	r0, [pc, #76]	; (80028e0 <I2C_TransferConfig+0xc0>)
 8002894:	f7fd fed6 	bl	8000644 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	0d5b      	lsrs	r3, r3, #21
 80028a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <I2C_TransferConfig+0xd0>)
 80028a8:	430b      	orrs	r3, r1
 80028aa:	43db      	mvns	r3, r3
 80028ac:	ea02 0103 	and.w	r1, r2, r3
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028b6:	7a7b      	ldrb	r3, [r7, #9]
 80028b8:	041b      	lsls	r3, r3, #16
 80028ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40005400 	.word	0x40005400
 80028dc:	40005c00 	.word	0x40005c00
 80028e0:	08007d64 	.word	0x08007d64
 80028e4:	80004000 	.word	0x80004000
 80028e8:	80002400 	.word	0x80002400
 80028ec:	80002000 	.word	0x80002000
 80028f0:	03ff63ff 	.word	0x03ff63ff

080028f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a2d      	ldr	r2, [pc, #180]	; (80029b8 <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d008      	beq.n	800291a <HAL_I2CEx_ConfigAnalogFilter+0x26>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a2b      	ldr	r2, [pc, #172]	; (80029bc <HAL_I2CEx_ConfigAnalogFilter+0xc8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d003      	beq.n	800291a <HAL_I2CEx_ConfigAnalogFilter+0x26>
 8002912:	2164      	movs	r1, #100	; 0x64
 8002914:	482a      	ldr	r0, [pc, #168]	; (80029c0 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 8002916:	f7fd fe95 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002926:	d003      	beq.n	8002930 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 8002928:	2165      	movs	r1, #101	; 0x65
 800292a:	4825      	ldr	r0, [pc, #148]	; (80029c0 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 800292c:	f7fd fe8a 	bl	8000644 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b20      	cmp	r3, #32
 800293a:	d138      	bne.n	80029ae <HAL_I2CEx_ConfigAnalogFilter+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_I2CEx_ConfigAnalogFilter+0x56>
 8002946:	2302      	movs	r3, #2
 8002948:	e032      	b.n	80029b0 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2224      	movs	r2, #36	; 0x24
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002978:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0201 	orr.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
  }
  else
  {
    return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
  }
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40005400 	.word	0x40005400
 80029bc:	40005c00 	.word	0x40005c00
 80029c0:	08007d9c 	.word	0x08007d9c

080029c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2c      	ldr	r2, [pc, #176]	; (8002a84 <HAL_I2CEx_ConfigDigitalFilter+0xc0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d008      	beq.n	80029ea <HAL_I2CEx_ConfigDigitalFilter+0x26>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <HAL_I2CEx_ConfigDigitalFilter+0xc4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d003      	beq.n	80029ea <HAL_I2CEx_ConfigDigitalFilter+0x26>
 80029e2:	2192      	movs	r1, #146	; 0x92
 80029e4:	4829      	ldr	r0, [pc, #164]	; (8002a8c <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80029e6:	f7fd fe2d 	bl	8000644 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b0f      	cmp	r3, #15
 80029ee:	d903      	bls.n	80029f8 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 80029f0:	2193      	movs	r1, #147	; 0x93
 80029f2:	4826      	ldr	r0, [pc, #152]	; (8002a8c <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80029f4:	f7fd fe26 	bl	8000644 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d139      	bne.n	8002a78 <HAL_I2CEx_ConfigDigitalFilter+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e033      	b.n	8002a7a <HAL_I2CEx_ConfigDigitalFilter+0xb6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2224      	movs	r2, #36	; 0x24
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0201 	bic.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_I2CEx_ConfigDigitalFilter+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40005400 	.word	0x40005400
 8002a88:	40005c00 	.word	0x40005c00
 8002a8c:	08007d9c 	.word	0x08007d9c

08002a90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40007000 	.word	0x40007000

08002aac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aba:	d007      	beq.n	8002acc <HAL_PWREx_ControlVoltageScaling+0x20>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac2:	d003      	beq.n	8002acc <HAL_PWREx_ControlVoltageScaling+0x20>
 8002ac4:	21a8      	movs	r1, #168	; 0xa8
 8002ac6:	4826      	ldr	r0, [pc, #152]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002ac8:	f7fd fdbc 	bl	8000644 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad2:	d130      	bne.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae0:	d038      	beq.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aea:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2232      	movs	r2, #50	; 0x32
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	3301      	adds	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b08:	e002      	b.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1c:	d102      	bne.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x78>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f2      	bne.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b30:	d110      	bne.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e00f      	b.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	d007      	beq.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b4c:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	08007dd8 	.word	0x08007dd8
 8002b64:	40007000 	.word	0x40007000
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	431bde83 	.word	0x431bde83

08002b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f000 bd65 	b.w	800364e <HAL_RCC_OscConfig+0xade>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d028      	beq.n	8002bde <HAL_RCC_OscConfig+0x6e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d122      	bne.n	8002bde <HAL_RCC_OscConfig+0x6e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d11c      	bne.n	8002bde <HAL_RCC_OscConfig+0x6e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d116      	bne.n	8002bde <HAL_RCC_OscConfig+0x6e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d110      	bne.n	8002bde <HAL_RCC_OscConfig+0x6e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10a      	bne.n	8002bde <HAL_RCC_OscConfig+0x6e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d104      	bne.n	8002bde <HAL_RCC_OscConfig+0x6e>
 8002bd4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8002bd8:	48a3      	ldr	r0, [pc, #652]	; (8002e68 <HAL_RCC_OscConfig+0x2f8>)
 8002bda:	f7fd fd33 	bl	8000644 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bde:	4ba3      	ldr	r3, [pc, #652]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be8:	4ba0      	ldr	r3, [pc, #640]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 813f 	beq.w	8002e7e <HAL_RCC_OscConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_OscConfig+0xaa>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d004      	beq.n	8002c1a <HAL_RCC_OscConfig+0xaa>
 8002c10:	f240 11ab 	movw	r1, #427	; 0x1ab
 8002c14:	4894      	ldr	r0, [pc, #592]	; (8002e68 <HAL_RCC_OscConfig+0x2f8>)
 8002c16:	f7fd fd15 	bl	8000644 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	2bff      	cmp	r3, #255	; 0xff
 8002c20:	d904      	bls.n	8002c2c <HAL_RCC_OscConfig+0xbc>
 8002c22:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002c26:	4890      	ldr	r0, [pc, #576]	; (8002e68 <HAL_RCC_OscConfig+0x2f8>)
 8002c28:	f7fd fd0c 	bl	8000644 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d030      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d02c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d028      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	2b30      	cmp	r3, #48	; 0x30
 8002c4a:	d024      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	2b50      	cmp	r3, #80	; 0x50
 8002c5a:	d01c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	2b60      	cmp	r3, #96	; 0x60
 8002c62:	d018      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	2b70      	cmp	r3, #112	; 0x70
 8002c6a:	d014      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d010      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	2b90      	cmp	r3, #144	; 0x90
 8002c7a:	d00c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	2ba0      	cmp	r3, #160	; 0xa0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	2bb0      	cmp	r3, #176	; 0xb0
 8002c8a:	d004      	beq.n	8002c96 <HAL_RCC_OscConfig+0x126>
 8002c8c:	f240 11ad 	movw	r1, #429	; 0x1ad
 8002c90:	4875      	ldr	r0, [pc, #468]	; (8002e68 <HAL_RCC_OscConfig+0x2f8>)
 8002c92:	f7fd fcd7 	bl	8000644 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_RCC_OscConfig+0x13c>
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b0c      	cmp	r3, #12
 8002ca0:	f040 808f 	bne.w	8002dc2 <HAL_RCC_OscConfig+0x252>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	f040 808b 	bne.w	8002dc2 <HAL_RCC_OscConfig+0x252>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cac:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d006      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x156>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f000 bcc4 	b.w	800364e <HAL_RCC_OscConfig+0xade>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1a      	ldr	r2, [r3, #32]
 8002cca:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d004      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x170>
 8002cd6:	4b65      	ldr	r3, [pc, #404]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cde:	e005      	b.n	8002cec <HAL_RCC_OscConfig+0x17c>
 8002ce0:	4b62      	ldr	r3, [pc, #392]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d224      	bcs.n	8002d3a <HAL_RCC_OscConfig+0x1ca>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fef5 	bl	8003ae4 <RCC_SetFlashLatencyFromMSIRange>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_RCC_OscConfig+0x196>
          {
            return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f000 bca4 	b.w	800364e <HAL_RCC_OscConfig+0xade>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d06:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d0c:	f043 0308 	orr.w	r3, r3, #8
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	4953      	ldr	r1, [pc, #332]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d24:	4b51      	ldr	r3, [pc, #324]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	494e      	ldr	r1, [pc, #312]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
 8002d38:	e026      	b.n	8002d88 <HAL_RCC_OscConfig+0x218>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3a:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a4b      	ldr	r2, [pc, #300]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b49      	ldr	r3, [pc, #292]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4946      	ldr	r1, [pc, #280]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d58:	4b44      	ldr	r3, [pc, #272]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	4941      	ldr	r1, [pc, #260]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <HAL_RCC_OscConfig+0x218>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 feb4 	bl	8003ae4 <RCC_SetFlashLatencyFromMSIRange>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_RCC_OscConfig+0x218>
            {
              return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f000 bc63 	b.w	800364e <HAL_RCC_OscConfig+0xade>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d88:	f000 fdea 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 8002d8c:	4601      	mov	r1, r0
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	4a35      	ldr	r2, [pc, #212]	; (8002e70 <HAL_RCC_OscConfig+0x300>)
 8002d9a:	5cd3      	ldrb	r3, [r2, r3]
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	fa21 f303 	lsr.w	r3, r1, r3
 8002da4:	4a33      	ldr	r2, [pc, #204]	; (8002e74 <HAL_RCC_OscConfig+0x304>)
 8002da6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002da8:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <HAL_RCC_OscConfig+0x308>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd ff55 	bl	8000c5c <HAL_InitTick>
 8002db2:	4603      	mov	r3, r0
 8002db4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d05f      	beq.n	8002e7c <HAL_RCC_OscConfig+0x30c>
        {
          return status;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	f000 bc46 	b.w	800364e <HAL_RCC_OscConfig+0xade>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d033      	beq.n	8002e32 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dca:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dd6:	f7fd ff91 	bl	8000cfc <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ddc:	e009      	b.n	8002df2 <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dde:	f7fd ff8d 	bl	8000cfc <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d902      	bls.n	8002df2 <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	f000 bc2e 	b.w	800364e <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df2:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0ef      	beq.n	8002dde <HAL_RCC_OscConfig+0x26e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1a      	ldr	r2, [pc, #104]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002e04:	f043 0308 	orr.w	r3, r3, #8
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4915      	ldr	r1, [pc, #84]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	4910      	ldr	r1, [pc, #64]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
 8002e30:	e025      	b.n	8002e7e <HAL_RCC_OscConfig+0x30e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a0d      	ldr	r2, [pc, #52]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e3e:	f7fd ff5d 	bl	8000cfc <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x2e8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e46:	f7fd ff59 	bl	8000cfc <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e3fa      	b.n	800364e <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <HAL_RCC_OscConfig+0x2fc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2d6>
 8002e64:	e00b      	b.n	8002e7e <HAL_RCC_OscConfig+0x30e>
 8002e66:	bf00      	nop
 8002e68:	08007e14 	.word	0x08007e14
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	08008da4 	.word	0x08008da4
 8002e74:	20000000 	.word	0x20000000
 8002e78:	20000004 	.word	0x20000004
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d07e      	beq.n	8002f88 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00e      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x340>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9a:	d009      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x340>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea4:	d004      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x340>
 8002ea6:	f240 2119 	movw	r1, #537	; 0x219
 8002eaa:	489b      	ldr	r0, [pc, #620]	; (8003118 <HAL_RCC_OscConfig+0x5a8>)
 8002eac:	f7fd fbca 	bl	8000644 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d005      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x352>
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b0c      	cmp	r3, #12
 8002eba:	d10e      	bne.n	8002eda <HAL_RCC_OscConfig+0x36a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d10b      	bne.n	8002eda <HAL_RCC_OscConfig+0x36a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec2:	4b96      	ldr	r3, [pc, #600]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d05b      	beq.n	8002f86 <HAL_RCC_OscConfig+0x416>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d157      	bne.n	8002f86 <HAL_RCC_OscConfig+0x416>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e3b9      	b.n	800364e <HAL_RCC_OscConfig+0xade>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x382>
 8002ee4:	4b8d      	ldr	r3, [pc, #564]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a8c      	ldr	r2, [pc, #560]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	e01d      	b.n	8002f2e <HAL_RCC_OscConfig+0x3be>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002efa:	d10c      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3a6>
 8002efc:	4b87      	ldr	r3, [pc, #540]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a86      	ldr	r2, [pc, #536]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002f02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4b84      	ldr	r3, [pc, #528]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a83      	ldr	r2, [pc, #524]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	e00b      	b.n	8002f2e <HAL_RCC_OscConfig+0x3be>
 8002f16:	4b81      	ldr	r3, [pc, #516]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a80      	ldr	r2, [pc, #512]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b7e      	ldr	r3, [pc, #504]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7d      	ldr	r2, [pc, #500]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d013      	beq.n	8002f5e <HAL_RCC_OscConfig+0x3ee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fd fee1 	bl	8000cfc <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x3e0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3e:	f7fd fedd 	bl	8000cfc <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	; 0x64
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x3e0>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e37e      	b.n	800364e <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f50:	4b72      	ldr	r3, [pc, #456]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3ce>
 8002f5c:	e014      	b.n	8002f88 <HAL_RCC_OscConfig+0x418>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fd fecd 	bl	8000cfc <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x408>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f66:	f7fd fec9 	bl	8000cfc <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	; 0x64
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e36a      	b.n	800364e <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f78:	4b68      	ldr	r3, [pc, #416]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3f6>
 8002f84:	e000      	b.n	8002f88 <HAL_RCC_OscConfig+0x418>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f86:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d077      	beq.n	8003084 <HAL_RCC_OscConfig+0x514>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x440>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa4:	d004      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x440>
 8002fa6:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8002faa:	485b      	ldr	r0, [pc, #364]	; (8003118 <HAL_RCC_OscConfig+0x5a8>)
 8002fac:	f7fd fb4a 	bl	8000644 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8002fb6:	d904      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x452>
 8002fb8:	f240 214d 	movw	r1, #589	; 0x24d
 8002fbc:	4856      	ldr	r0, [pc, #344]	; (8003118 <HAL_RCC_OscConfig+0x5a8>)
 8002fbe:	f7fd fb41 	bl	8000644 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x464>
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	d119      	bne.n	8003002 <HAL_RCC_OscConfig+0x492>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d116      	bne.n	8003002 <HAL_RCC_OscConfig+0x492>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd4:	4b51      	ldr	r3, [pc, #324]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_OscConfig+0x47c>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e330      	b.n	800364e <HAL_RCC_OscConfig+0xade>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fec:	4b4b      	ldr	r3, [pc, #300]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	4948      	ldr	r1, [pc, #288]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003000:	e040      	b.n	8003084 <HAL_RCC_OscConfig+0x514>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d023      	beq.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800300a:	4b44      	ldr	r3, [pc, #272]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a43      	ldr	r2, [pc, #268]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8003010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003016:	f7fd fe71 	bl	8000cfc <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301e:	f7fd fe6d 	bl	8000cfc <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e30e      	b.n	800364e <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003030:	4b3a      	ldr	r3, [pc, #232]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x4ae>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303c:	4b37      	ldr	r3, [pc, #220]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	061b      	lsls	r3, r3, #24
 800304a:	4934      	ldr	r1, [pc, #208]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
 8003050:	e018      	b.n	8003084 <HAL_RCC_OscConfig+0x514>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003052:	4b32      	ldr	r3, [pc, #200]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a31      	ldr	r2, [pc, #196]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 8003058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800305c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fd fe4d 	bl	8000cfc <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x508>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003066:	f7fd fe49 	bl	8000cfc <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x508>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e2ea      	b.n	800364e <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f0      	bne.n	8003066 <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d04e      	beq.n	800312e <HAL_RCC_OscConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_RCC_OscConfig+0x53a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d004      	beq.n	80030aa <HAL_RCC_OscConfig+0x53a>
 80030a0:	f240 218d 	movw	r1, #653	; 0x28d
 80030a4:	481c      	ldr	r0, [pc, #112]	; (8003118 <HAL_RCC_OscConfig+0x5a8>)
 80030a6:	f7fd facd 	bl	8000644 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d01c      	beq.n	80030ec <HAL_RCC_OscConfig+0x57c>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 80030b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b8:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c2:	f7fd fe1b 	bl	8000cfc <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ca:	f7fd fe17 	bl	8000cfc <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e2b8      	b.n	800364e <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 80030de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0ef      	beq.n	80030ca <HAL_RCC_OscConfig+0x55a>
 80030ea:	e020      	b.n	800312e <HAL_RCC_OscConfig+0x5be>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 80030ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <HAL_RCC_OscConfig+0x5ac>)
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fd fdfe 	bl	8000cfc <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003102:	e00d      	b.n	8003120 <HAL_RCC_OscConfig+0x5b0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003104:	f7fd fdfa 	bl	8000cfc <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d906      	bls.n	8003120 <HAL_RCC_OscConfig+0x5b0>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e29b      	b.n	800364e <HAL_RCC_OscConfig+0xade>
 8003116:	bf00      	nop
 8003118:	08007e14 	.word	0x08007e14
 800311c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003120:	4b84      	ldr	r3, [pc, #528]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 8003122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1ea      	bne.n	8003104 <HAL_RCC_OscConfig+0x594>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80b2 	beq.w	80032a0 <HAL_RCC_OscConfig+0x730>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313c:	2300      	movs	r3, #0
 800313e:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00c      	beq.n	8003162 <HAL_RCC_OscConfig+0x5f2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d008      	beq.n	8003162 <HAL_RCC_OscConfig+0x5f2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d004      	beq.n	8003162 <HAL_RCC_OscConfig+0x5f2>
 8003158:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800315c:	4876      	ldr	r0, [pc, #472]	; (8003338 <HAL_RCC_OscConfig+0x7c8>)
 800315e:	f7fd fa71 	bl	8000644 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003162:	4b74      	ldr	r3, [pc, #464]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10d      	bne.n	800318a <HAL_RCC_OscConfig+0x61a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	4b71      	ldr	r3, [pc, #452]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	4a70      	ldr	r2, [pc, #448]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003178:	6593      	str	r3, [r2, #88]	; 0x58
 800317a:	4b6e      	ldr	r3, [pc, #440]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003186:	2301      	movs	r3, #1
 8003188:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318a:	4b6c      	ldr	r3, [pc, #432]	; (800333c <HAL_RCC_OscConfig+0x7cc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d118      	bne.n	80031c8 <HAL_RCC_OscConfig+0x658>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003196:	4b69      	ldr	r3, [pc, #420]	; (800333c <HAL_RCC_OscConfig+0x7cc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a68      	ldr	r2, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x7cc>)
 800319c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a2:	f7fd fdab 	bl	8000cfc <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031aa:	f7fd fda7 	bl	8000cfc <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e248      	b.n	800364e <HAL_RCC_OscConfig+0xade>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031bc:	4b5f      	ldr	r3, [pc, #380]	; (800333c <HAL_RCC_OscConfig+0x7cc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x63a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d108      	bne.n	80031e2 <HAL_RCC_OscConfig+0x672>
 80031d0:	4b58      	ldr	r3, [pc, #352]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	4a57      	ldr	r2, [pc, #348]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031e0:	e024      	b.n	800322c <HAL_RCC_OscConfig+0x6bc>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d110      	bne.n	800320c <HAL_RCC_OscConfig+0x69c>
 80031ea:	4b52      	ldr	r3, [pc, #328]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	4a50      	ldr	r2, [pc, #320]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031fa:	4b4e      	ldr	r3, [pc, #312]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003200:	4a4c      	ldr	r2, [pc, #304]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800320a:	e00f      	b.n	800322c <HAL_RCC_OscConfig+0x6bc>
 800320c:	4b49      	ldr	r3, [pc, #292]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003212:	4a48      	ldr	r2, [pc, #288]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800321c:	4b45      	ldr	r3, [pc, #276]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	4a44      	ldr	r2, [pc, #272]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d016      	beq.n	8003262 <HAL_RCC_OscConfig+0x6f2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003234:	f7fd fd62 	bl	8000cfc <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_OscConfig+0x6e2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323c:	f7fd fd5e 	bl	8000cfc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x6e2>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1fd      	b.n	800364e <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003252:	4b38      	ldr	r3, [pc, #224]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ed      	beq.n	800323c <HAL_RCC_OscConfig+0x6cc>
 8003260:	e015      	b.n	800328e <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fd fd4b 	bl	8000cfc <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x710>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fd fd47 	bl	8000cfc <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x710>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e1e6      	b.n	800364e <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003280:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1ed      	bne.n	800326a <HAL_RCC_OscConfig+0x6fa>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328e:	7ffb      	ldrb	r3, [r7, #31]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d105      	bne.n	80032a0 <HAL_RCC_OscConfig+0x730>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003294:	4b27      	ldr	r3, [pc, #156]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	4a26      	ldr	r2, [pc, #152]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 800329a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d050      	beq.n	800334e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RCC_OscConfig+0x756>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d004      	beq.n	80032c6 <HAL_RCC_OscConfig+0x756>
 80032bc:	f240 3145 	movw	r1, #837	; 0x345
 80032c0:	481d      	ldr	r0, [pc, #116]	; (8003338 <HAL_RCC_OscConfig+0x7c8>)
 80032c2:	f7fd f9bf 	bl	8000644 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01c      	beq.n	8003308 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032ce:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 80032d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032d4:	4a17      	ldr	r2, [pc, #92]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fd fd0d 	bl	8000cfc <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x788>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032e6:	f7fd fd09 	bl	8000cfc <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x788>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e1aa      	b.n	800364e <HAL_RCC_OscConfig+0xade>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032f8:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 80032fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0ef      	beq.n	80032e6 <HAL_RCC_OscConfig+0x776>
 8003306:	e022      	b.n	800334e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 800330a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <HAL_RCC_OscConfig+0x7c4>)
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fd fcf0 	bl	8000cfc <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800331e:	e00f      	b.n	8003340 <HAL_RCC_OscConfig+0x7d0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003320:	f7fd fcec 	bl	8000cfc <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d908      	bls.n	8003340 <HAL_RCC_OscConfig+0x7d0>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e18d      	b.n	800364e <HAL_RCC_OscConfig+0xade>
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
 8003338:	08007e14 	.word	0x08007e14
 800333c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003340:	4ba2      	ldr	r3, [pc, #648]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 8003342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e8      	bne.n	8003320 <HAL_RCC_OscConfig+0x7b0>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00c      	beq.n	8003370 <HAL_RCC_OscConfig+0x800>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	2b01      	cmp	r3, #1
 800335c:	d008      	beq.n	8003370 <HAL_RCC_OscConfig+0x800>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	2b02      	cmp	r3, #2
 8003364:	d004      	beq.n	8003370 <HAL_RCC_OscConfig+0x800>
 8003366:	f240 316e 	movw	r1, #878	; 0x36e
 800336a:	4899      	ldr	r0, [pc, #612]	; (80035d0 <HAL_RCC_OscConfig+0xa60>)
 800336c:	f7fd f96a 	bl	8000644 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8169 	beq.w	800364c <HAL_RCC_OscConfig+0xadc>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	2b02      	cmp	r3, #2
 8003380:	f040 8131 	bne.w	80035e6 <HAL_RCC_OscConfig+0xa76>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d010      	beq.n	80033ae <HAL_RCC_OscConfig+0x83e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d00c      	beq.n	80033ae <HAL_RCC_OscConfig+0x83e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	2b02      	cmp	r3, #2
 800339a:	d008      	beq.n	80033ae <HAL_RCC_OscConfig+0x83e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d004      	beq.n	80033ae <HAL_RCC_OscConfig+0x83e>
 80033a4:	f240 3176 	movw	r1, #886	; 0x376
 80033a8:	4889      	ldr	r0, [pc, #548]	; (80035d0 <HAL_RCC_OscConfig+0xa60>)
 80033aa:	f7fd f94b 	bl	8000644 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_RCC_OscConfig+0x84e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d904      	bls.n	80033c8 <HAL_RCC_OscConfig+0x858>
 80033be:	f240 3177 	movw	r1, #887	; 0x377
 80033c2:	4883      	ldr	r0, [pc, #524]	; (80035d0 <HAL_RCC_OscConfig+0xa60>)
 80033c4:	f7fd f93e 	bl	8000644 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033cc:	2b07      	cmp	r3, #7
 80033ce:	d903      	bls.n	80033d8 <HAL_RCC_OscConfig+0x868>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	2b56      	cmp	r3, #86	; 0x56
 80033d6:	d904      	bls.n	80033e2 <HAL_RCC_OscConfig+0x872>
 80033d8:	f44f 715e 	mov.w	r1, #888	; 0x378
 80033dc:	487c      	ldr	r0, [pc, #496]	; (80035d0 <HAL_RCC_OscConfig+0xa60>)
 80033de:	f7fd f931 	bl	8000644 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d903      	bls.n	80033f2 <HAL_RCC_OscConfig+0x882>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	2b1f      	cmp	r3, #31
 80033f0:	d904      	bls.n	80033fc <HAL_RCC_OscConfig+0x88c>
 80033f2:	f240 317a 	movw	r1, #890	; 0x37a
 80033f6:	4876      	ldr	r0, [pc, #472]	; (80035d0 <HAL_RCC_OscConfig+0xa60>)
 80033f8:	f7fd f924 	bl	8000644 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003400:	2b02      	cmp	r3, #2
 8003402:	d010      	beq.n	8003426 <HAL_RCC_OscConfig+0x8b6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	2b04      	cmp	r3, #4
 800340a:	d00c      	beq.n	8003426 <HAL_RCC_OscConfig+0x8b6>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	2b06      	cmp	r3, #6
 8003412:	d008      	beq.n	8003426 <HAL_RCC_OscConfig+0x8b6>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	2b08      	cmp	r3, #8
 800341a:	d004      	beq.n	8003426 <HAL_RCC_OscConfig+0x8b6>
 800341c:	f44f 715f 	mov.w	r1, #892	; 0x37c
 8003420:	486b      	ldr	r0, [pc, #428]	; (80035d0 <HAL_RCC_OscConfig+0xa60>)
 8003422:	f7fd f90f 	bl	8000644 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b02      	cmp	r3, #2
 800342c:	d010      	beq.n	8003450 <HAL_RCC_OscConfig+0x8e0>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b04      	cmp	r3, #4
 8003434:	d00c      	beq.n	8003450 <HAL_RCC_OscConfig+0x8e0>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	2b06      	cmp	r3, #6
 800343c:	d008      	beq.n	8003450 <HAL_RCC_OscConfig+0x8e0>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2b08      	cmp	r3, #8
 8003444:	d004      	beq.n	8003450 <HAL_RCC_OscConfig+0x8e0>
 8003446:	f240 317d 	movw	r1, #893	; 0x37d
 800344a:	4861      	ldr	r0, [pc, #388]	; (80035d0 <HAL_RCC_OscConfig+0xa60>)
 800344c:	f7fd f8fa 	bl	8000644 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003450:	4b5e      	ldr	r3, [pc, #376]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 0203 	and.w	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	429a      	cmp	r2, r3
 8003462:	d12c      	bne.n	80034be <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	3b01      	subs	r3, #1
 8003470:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d123      	bne.n	80034be <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d11b      	bne.n	80034be <HAL_RCC_OscConfig+0x94e>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d113      	bne.n	80034be <HAL_RCC_OscConfig+0x94e>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	085b      	lsrs	r3, r3, #1
 80034a2:	3b01      	subs	r3, #1
 80034a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d109      	bne.n	80034be <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	085b      	lsrs	r3, r3, #1
 80034b6:	3b01      	subs	r3, #1
 80034b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d067      	beq.n	800358e <HAL_RCC_OscConfig+0xa1e>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	d062      	beq.n	800358a <HAL_RCC_OscConfig+0xa1a>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034c4:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x964>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0bc      	b.n	800364e <HAL_RCC_OscConfig+0xade>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034d4:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a3c      	ldr	r2, [pc, #240]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 80034da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e0:	f7fd fc0c 	bl	8000cfc <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x98a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fd fc08 	bl	8000cfc <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x98a>
              {
                return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e0a9      	b.n	800364e <HAL_RCC_OscConfig+0xade>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fa:	4b34      	ldr	r3, [pc, #208]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x978>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003506:	4b31      	ldr	r3, [pc, #196]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	4b32      	ldr	r3, [pc, #200]	; (80035d4 <HAL_RCC_OscConfig+0xa64>)
 800350c:	4013      	ands	r3, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003516:	3a01      	subs	r2, #1
 8003518:	0112      	lsls	r2, r2, #4
 800351a:	4311      	orrs	r1, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003520:	0212      	lsls	r2, r2, #8
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003528:	0852      	lsrs	r2, r2, #1
 800352a:	3a01      	subs	r2, #1
 800352c:	0552      	lsls	r2, r2, #21
 800352e:	4311      	orrs	r1, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003534:	0852      	lsrs	r2, r2, #1
 8003536:	3a01      	subs	r2, #1
 8003538:	0652      	lsls	r2, r2, #25
 800353a:	4311      	orrs	r1, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003540:	06d2      	lsls	r2, r2, #27
 8003542:	430a      	orrs	r2, r1
 8003544:	4921      	ldr	r1, [pc, #132]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 8003546:	4313      	orrs	r3, r2
 8003548:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 8003550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003554:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 800355c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003560:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003562:	f7fd fbcb 	bl	8000cfc <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0xa0c>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356a:	f7fd fbc7 	bl	8000cfc <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0xa0c>
              {
                return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e068      	b.n	800364e <HAL_RCC_OscConfig+0xade>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357c:	4b13      	ldr	r3, [pc, #76]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x9fa>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003588:	e060      	b.n	800364c <HAL_RCC_OscConfig+0xadc>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e05f      	b.n	800364e <HAL_RCC_OscConfig+0xade>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358e:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d158      	bne.n	800364c <HAL_RCC_OscConfig+0xadc>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 80035a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	4a08      	ldr	r2, [pc, #32]	; (80035cc <HAL_RCC_OscConfig+0xa5c>)
 80035ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035b2:	f7fd fba3 	bl	8000cfc <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b8:	e00e      	b.n	80035d8 <HAL_RCC_OscConfig+0xa68>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fd fb9f 	bl	8000cfc <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d907      	bls.n	80035d8 <HAL_RCC_OscConfig+0xa68>
            {
              return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e040      	b.n	800364e <HAL_RCC_OscConfig+0xade>
 80035cc:	40021000 	.word	0x40021000
 80035d0:	08007e14 	.word	0x08007e14
 80035d4:	019d808c 	.word	0x019d808c
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d8:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <HAL_RCC_OscConfig+0xae8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ea      	beq.n	80035ba <HAL_RCC_OscConfig+0xa4a>
 80035e4:	e032      	b.n	800364c <HAL_RCC_OscConfig+0xadc>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	d02d      	beq.n	8003648 <HAL_RCC_OscConfig+0xad8>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ec:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <HAL_RCC_OscConfig+0xae8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_RCC_OscConfig+0xae8>)
 80035f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f6:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035f8:	4b17      	ldr	r3, [pc, #92]	; (8003658 <HAL_RCC_OscConfig+0xae8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <HAL_RCC_OscConfig+0xaa0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003604:	4b14      	ldr	r3, [pc, #80]	; (8003658 <HAL_RCC_OscConfig+0xae8>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <HAL_RCC_OscConfig+0xae8>)
 800360a:	f023 0303 	bic.w	r3, r3, #3
 800360e:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_RCC_OscConfig+0xae8>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a10      	ldr	r2, [pc, #64]	; (8003658 <HAL_RCC_OscConfig+0xae8>)
 8003616:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361e:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd fb6c 	bl	8000cfc <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0xaca>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003628:	f7fd fb68 	bl	8000cfc <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xaca>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e009      	b.n	800364e <HAL_RCC_OscConfig+0xade>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <HAL_RCC_OscConfig+0xae8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0xab8>
 8003646:	e001      	b.n	800364c <HAL_RCC_OscConfig+0xadc>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0xade>
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000

0800365c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e168      	b.n	8003942 <HAL_RCC_ClockConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_RCC_ClockConfig+0x24>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b0f      	cmp	r3, #15
 800367e:	d904      	bls.n	800368a <HAL_RCC_ClockConfig+0x2e>
 8003680:	f240 4162 	movw	r1, #1122	; 0x462
 8003684:	4873      	ldr	r0, [pc, #460]	; (8003854 <HAL_RCC_ClockConfig+0x1f8>)
 8003686:	f7fc ffdd 	bl	8000644 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d010      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x56>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d00d      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x56>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d00a      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x56>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d007      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x56>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d004      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x56>
 80036a8:	f240 4163 	movw	r1, #1123	; 0x463
 80036ac:	4869      	ldr	r0, [pc, #420]	; (8003854 <HAL_RCC_ClockConfig+0x1f8>)
 80036ae:	f7fc ffc9 	bl	8000644 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b2:	4b69      	ldr	r3, [pc, #420]	; (8003858 <HAL_RCC_ClockConfig+0x1fc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d910      	bls.n	80036e2 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c0:	4b65      	ldr	r3, [pc, #404]	; (8003858 <HAL_RCC_ClockConfig+0x1fc>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f023 0207 	bic.w	r2, r3, #7
 80036c8:	4963      	ldr	r1, [pc, #396]	; (8003858 <HAL_RCC_ClockConfig+0x1fc>)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d0:	4b61      	ldr	r3, [pc, #388]	; (8003858 <HAL_RCC_ClockConfig+0x1fc>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d001      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e12f      	b.n	8003942 <HAL_RCC_ClockConfig+0x2e6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d061      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_RCC_ClockConfig+0xbc>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d00c      	beq.n	8003718 <HAL_RCC_ClockConfig+0xbc>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d008      	beq.n	8003718 <HAL_RCC_ClockConfig+0xbc>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b03      	cmp	r3, #3
 800370c:	d004      	beq.n	8003718 <HAL_RCC_ClockConfig+0xbc>
 800370e:	f240 417a 	movw	r1, #1146	; 0x47a
 8003712:	4850      	ldr	r0, [pc, #320]	; (8003854 <HAL_RCC_ClockConfig+0x1f8>)
 8003714:	f7fc ff96 	bl	8000644 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d107      	bne.n	8003730 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003720:	4b4e      	ldr	r3, [pc, #312]	; (800385c <HAL_RCC_ClockConfig+0x200>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d121      	bne.n	8003770 <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e108      	b.n	8003942 <HAL_RCC_ClockConfig+0x2e6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d107      	bne.n	8003748 <HAL_RCC_ClockConfig+0xec>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003738:	4b48      	ldr	r3, [pc, #288]	; (800385c <HAL_RCC_ClockConfig+0x200>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d115      	bne.n	8003770 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0fc      	b.n	8003942 <HAL_RCC_ClockConfig+0x2e6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <HAL_RCC_ClockConfig+0x104>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003750:	4b42      	ldr	r3, [pc, #264]	; (800385c <HAL_RCC_ClockConfig+0x200>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0f0      	b.n	8003942 <HAL_RCC_ClockConfig+0x2e6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003760:	4b3e      	ldr	r3, [pc, #248]	; (800385c <HAL_RCC_ClockConfig+0x200>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0e8      	b.n	8003942 <HAL_RCC_ClockConfig+0x2e6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003770:	4b3a      	ldr	r3, [pc, #232]	; (800385c <HAL_RCC_ClockConfig+0x200>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 0203 	bic.w	r2, r3, #3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4937      	ldr	r1, [pc, #220]	; (800385c <HAL_RCC_ClockConfig+0x200>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003782:	f7fd fabb 	bl	8000cfc <HAL_GetTick>
 8003786:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_ClockConfig+0x144>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378a:	f7fd fab7 	bl	8000cfc <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0d0      	b.n	8003942 <HAL_RCC_ClockConfig+0x2e6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a0:	4b2e      	ldr	r3, [pc, #184]	; (800385c <HAL_RCC_ClockConfig+0x200>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 020c 	and.w	r2, r3, #12
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d1eb      	bne.n	800378a <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d031      	beq.n	8003822 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d024      	beq.n	8003810 <HAL_RCC_ClockConfig+0x1b4>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d020      	beq.n	8003810 <HAL_RCC_ClockConfig+0x1b4>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b90      	cmp	r3, #144	; 0x90
 80037d4:	d01c      	beq.n	8003810 <HAL_RCC_ClockConfig+0x1b4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2ba0      	cmp	r3, #160	; 0xa0
 80037dc:	d018      	beq.n	8003810 <HAL_RCC_ClockConfig+0x1b4>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2bb0      	cmp	r3, #176	; 0xb0
 80037e4:	d014      	beq.n	8003810 <HAL_RCC_ClockConfig+0x1b4>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2bc0      	cmp	r3, #192	; 0xc0
 80037ec:	d010      	beq.n	8003810 <HAL_RCC_ClockConfig+0x1b4>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2bd0      	cmp	r3, #208	; 0xd0
 80037f4:	d00c      	beq.n	8003810 <HAL_RCC_ClockConfig+0x1b4>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2be0      	cmp	r3, #224	; 0xe0
 80037fc:	d008      	beq.n	8003810 <HAL_RCC_ClockConfig+0x1b4>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2bf0      	cmp	r3, #240	; 0xf0
 8003804:	d004      	beq.n	8003810 <HAL_RCC_ClockConfig+0x1b4>
 8003806:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 800380a:	4812      	ldr	r0, [pc, #72]	; (8003854 <HAL_RCC_ClockConfig+0x1f8>)
 800380c:	f7fc ff1a 	bl	8000644 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCC_ClockConfig+0x200>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	490f      	ldr	r1, [pc, #60]	; (800385c <HAL_RCC_ClockConfig+0x200>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003822:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <HAL_RCC_ClockConfig+0x1fc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d217      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x204>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_RCC_ClockConfig+0x1fc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 0207 	bic.w	r2, r3, #7
 8003838:	4907      	ldr	r1, [pc, #28]	; (8003858 <HAL_RCC_ClockConfig+0x1fc>)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_ClockConfig+0x1fc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d008      	beq.n	8003860 <HAL_RCC_ClockConfig+0x204>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e077      	b.n	8003942 <HAL_RCC_ClockConfig+0x2e6>
 8003852:	bf00      	nop
 8003854:	08007e14 	.word	0x08007e14
 8003858:	40022000 	.word	0x40022000
 800385c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d025      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x25c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d018      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x24a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387c:	d013      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x24a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003886:	d00e      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x24a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x24a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800389a:	d004      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x24a>
 800389c:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 80038a0:	482a      	ldr	r0, [pc, #168]	; (800394c <HAL_RCC_ClockConfig+0x2f0>)
 80038a2:	f7fc fecf 	bl	8000644 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a6:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <HAL_RCC_ClockConfig+0x2f4>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	4927      	ldr	r1, [pc, #156]	; (8003950 <HAL_RCC_ClockConfig+0x2f4>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d026      	beq.n	8003912 <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d018      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2a2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d4:	d013      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2a2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80038de:	d00e      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2a2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038e8:	d009      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2a2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038f2:	d004      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2a2>
 80038f4:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80038f8:	4814      	ldr	r0, [pc, #80]	; (800394c <HAL_RCC_ClockConfig+0x2f0>)
 80038fa:	f7fc fea3 	bl	8000644 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fe:	4b14      	ldr	r3, [pc, #80]	; (8003950 <HAL_RCC_ClockConfig+0x2f4>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4910      	ldr	r1, [pc, #64]	; (8003950 <HAL_RCC_ClockConfig+0x2f4>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003912:	f000 f825 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 8003916:	4601      	mov	r1, r0
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_RCC_ClockConfig+0x2f4>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <HAL_RCC_ClockConfig+0x2f8>)
 8003924:	5cd3      	ldrb	r3, [r2, r3]
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	fa21 f303 	lsr.w	r3, r1, r3
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <HAL_RCC_ClockConfig+0x2fc>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_RCC_ClockConfig+0x300>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd f990 	bl	8000c5c <HAL_InitTick>
 800393c:	4603      	mov	r3, r0
 800393e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003940:	7afb      	ldrb	r3, [r7, #11]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	08007e14 	.word	0x08007e14
 8003950:	40021000 	.word	0x40021000
 8003954:	08008da4 	.word	0x08008da4
 8003958:	20000000 	.word	0x20000000
 800395c:	20000004 	.word	0x20000004

08003960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003960:	b480      	push	{r7}
 8003962:	b089      	sub	sp, #36	; 0x24
 8003964:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396e:	4b3d      	ldr	r3, [pc, #244]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x104>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003978:	4b3a      	ldr	r3, [pc, #232]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x104>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x34>
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d121      	bne.n	80039d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d11e      	bne.n	80039d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003994:	4b33      	ldr	r3, [pc, #204]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x104>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039a0:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x104>)
 80039a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	e005      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039b0:	4b2c      	ldr	r3, [pc, #176]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x104>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039bc:	4a2a      	ldr	r2, [pc, #168]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x108>)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10d      	bne.n	80039e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d102      	bne.n	80039de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039d8:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x10c>)
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	e004      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039e4:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x110>)
 80039e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	2b0c      	cmp	r3, #12
 80039ec:	d133      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x104>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d002      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0xa4>
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d003      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0xaa>
 8003a02:	e005      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a06:	617b      	str	r3, [r7, #20]
      break;
 8003a08:	e005      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a0a:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a0c:	617b      	str	r3, [r7, #20]
      break;
 8003a0e:	e002      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	617b      	str	r3, [r7, #20]
      break;
 8003a14:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	3301      	adds	r3, #1
 8003a22:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	fb02 f203 	mul.w	r2, r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	0e5b      	lsrs	r3, r3, #25
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	3301      	adds	r3, #1
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a56:	69bb      	ldr	r3, [r7, #24]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3724      	adds	r7, #36	; 0x24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	40021000 	.word	0x40021000
 8003a68:	08008dbc 	.word	0x08008dbc
 8003a6c:	00f42400 	.word	0x00f42400
 8003a70:	007a1200 	.word	0x007a1200

08003a74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000000 	.word	0x20000000

08003a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a90:	f7ff fff0 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003a94:	4601      	mov	r1, r0
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	0a1b      	lsrs	r3, r3, #8
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aa2:	5cd3      	ldrb	r3, [r2, r3]
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	08008db4 	.word	0x08008db4

08003ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003abc:	f7ff ffda 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4601      	mov	r1, r0
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0adb      	lsrs	r3, r3, #11
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ace:	5cd3      	ldrb	r3, [r2, r3]
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	08008db4 	.word	0x08008db4

08003ae4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003afc:	f7fe ffc8 	bl	8002a90 <HAL_PWREx_GetVoltageRange>
 8003b00:	6178      	str	r0, [r7, #20]
 8003b02:	e014      	b.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	4a24      	ldr	r2, [pc, #144]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b10:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b1c:	f7fe ffb8 	bl	8002a90 <HAL_PWREx_GetVoltageRange>
 8003b20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b22:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b34:	d10b      	bne.n	8003b4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b80      	cmp	r3, #128	; 0x80
 8003b3a:	d919      	bls.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2ba0      	cmp	r3, #160	; 0xa0
 8003b40:	d902      	bls.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b42:	2302      	movs	r3, #2
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	e013      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b48:	2301      	movs	r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	e010      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d902      	bls.n	8003b5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b54:	2303      	movs	r3, #3
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e00a      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b80      	cmp	r3, #128	; 0x80
 8003b5e:	d102      	bne.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b60:	2302      	movs	r3, #2
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	e004      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b70      	cmp	r3, #112	; 0x70
 8003b6a:	d101      	bne.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 0207 	bic.w	r2, r3, #7
 8003b78:	4909      	ldr	r1, [pc, #36]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40022000 	.word	0x40022000

08003ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bac:	2300      	movs	r3, #0
 8003bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d14b      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d145      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d13f      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d139      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d133      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d12d      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d127      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d121      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d11b      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d115      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10f      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d103      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003c50:	21cb      	movs	r1, #203	; 0xcb
 8003c52:	487c      	ldr	r0, [pc, #496]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003c54:	f7fc fcf6 	bl	8000644 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d041      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00d      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c74:	d008      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c7e:	d003      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003c80:	21d3      	movs	r1, #211	; 0xd3
 8003c82:	4870      	ldr	r0, [pc, #448]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003c84:	f7fc fcde 	bl	8000644 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c90:	d005      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003c92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c96:	d015      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003c9c:	e00f      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x11a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003c9e:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	4a69      	ldr	r2, [pc, #420]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003caa:	e00c      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x122>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fad8 	bl	8004268 <RCCEx_PLLSAI1_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cbc:	e003      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      break;
 8003cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc6:	7cfb      	ldrb	r3, [r7, #19]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ccc:	4b5e      	ldr	r3, [pc, #376]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	495b      	ldr	r1, [pc, #364]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ce2:	e001      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80b8 	beq.w	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d013      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0a:	d00e      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d14:	d009      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d1e:	d004      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d20:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003d24:	4847      	ldr	r0, [pc, #284]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003d26:	f7fc fc8d 	bl	8000644 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d2a:	4b47      	ldr	r3, [pc, #284]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00d      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d40:	4b41      	ldr	r3, [pc, #260]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	4a40      	ldr	r2, [pc, #256]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d4c:	4b3e      	ldr	r3, [pc, #248]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d5c:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3a      	ldr	r2, [pc, #232]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d68:	f7fc ffc8 	bl	8000cfc <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d6e:	e009      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d70:	f7fc ffc4 	bl	8000cfc <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d902      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        ret = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	74fb      	strb	r3, [r7, #19]
        break;
 8003d82:	e005      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d84:	4b31      	ldr	r3, [pc, #196]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ef      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      }
    }

    if(ret == HAL_OK)
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d15c      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d96:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01e      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d019      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003db2:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dbe:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc4:	4a20      	ldr	r2, [pc, #128]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dce:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dde:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d016      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fc ff84 	bl	8000cfc <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df6:	e00b      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fc ff80 	bl	8000cfc <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d902      	bls.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
          {
            ret = HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	74fb      	strb	r3, [r7, #19]
            break;
 8003e0e:	e006      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0ec      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x254>
          }
        }
      }

      if(ret == HAL_OK)
 8003e1e:	7cfb      	ldrb	r3, [r7, #19]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10b      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x298>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e24:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e32:	4905      	ldr	r1, [pc, #20]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e3a:	e00b      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	74bb      	strb	r3, [r7, #18]
 8003e40:	e008      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003e42:	bf00      	nop
 8003e44:	08007e4c 	.word	0x08007e4c
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e54:	7c7b      	ldrb	r3, [r7, #17]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5a:	4ba5      	ldr	r3, [pc, #660]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	4aa4      	ldr	r2, [pc, #656]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01f      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d010      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d00c      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d008      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d004      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003e92:	f240 119b 	movw	r1, #411	; 0x19b
 8003e96:	4897      	ldr	r0, [pc, #604]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e98:	f7fc fbd4 	bl	8000644 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e9c:	4b94      	ldr	r3, [pc, #592]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f023 0203 	bic.w	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	4991      	ldr	r1, [pc, #580]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01f      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d010      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d00c      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2b0c      	cmp	r3, #12
 8003ed4:	d008      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d004      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ede:	f240 11a5 	movw	r1, #421	; 0x1a5
 8003ee2:	4884      	ldr	r0, [pc, #528]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ee4:	f7fc fbae 	bl	8000644 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee8:	4b81      	ldr	r3, [pc, #516]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f023 020c 	bic.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	497e      	ldr	r1, [pc, #504]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d022      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d013      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x396>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d00e      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x396>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f24:	d009      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x396>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2e:	d004      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x396>
 8003f30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003f34:	486f      	ldr	r0, [pc, #444]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f36:	f7fc fb85 	bl	8000644 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f3a:	4b6d      	ldr	r3, [pc, #436]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	4969      	ldr	r1, [pc, #420]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d022      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d013      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f6c:	d00e      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f76:	d009      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f80:	d004      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f82:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003f86:	485b      	ldr	r0, [pc, #364]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f88:	f7fc fb5c 	bl	8000644 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f8c:	4b58      	ldr	r3, [pc, #352]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	4955      	ldr	r1, [pc, #340]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d022      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d013      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fbe:	d00e      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fc8:	d009      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fd2:	d004      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fd4:	f240 11e9 	movw	r1, #489	; 0x1e9
 8003fd8:	4846      	ldr	r0, [pc, #280]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003fda:	f7fc fb33 	bl	8000644 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fde:	4b44      	ldr	r3, [pc, #272]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	4940      	ldr	r1, [pc, #256]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01d      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x498>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00e      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004010:	d009      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401a:	d004      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800401c:	f240 11f1 	movw	r1, #497	; 0x1f1
 8004020:	4834      	ldr	r0, [pc, #208]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004022:	f7fc fb0f 	bl	8000644 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004026:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	492e      	ldr	r1, [pc, #184]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01d      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00e      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d009      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004062:	d004      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004064:	f240 2109 	movw	r1, #521	; 0x209
 8004068:	4822      	ldr	r0, [pc, #136]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800406a:	f7fc faeb 	bl	8000644 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	491c      	ldr	r1, [pc, #112]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d045      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d013      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040a0:	d00e      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040aa:	d009      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80040b4:	d004      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80040b6:	f240 2122 	movw	r1, #546	; 0x222
 80040ba:	480e      	ldr	r0, [pc, #56]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80040bc:	f7fc fac2 	bl	8000644 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	4908      	ldr	r1, [pc, #32]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040de:	d10b      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4a02      	ldr	r2, [pc, #8]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80040e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ea:	60d3      	str	r3, [r2, #12]
 80040ec:	e016      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x578>
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000
 80040f4:	08007e4c 	.word	0x08007e4c
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004100:	d10c      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	2101      	movs	r1, #1
 8004108:	4618      	mov	r0, r3
 800410a:	f000 f8ad 	bl	8004268 <RCCEx_PLLSAI1_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004112:	7cfb      	ldrb	r3, [r7, #19]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x578>
        {
          /* set overall return value */
          status = ret;
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d040      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x606>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	2b00      	cmp	r3, #0
 800412e:	d013      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004138:	d00e      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004142:	d009      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800414c:	d004      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800414e:	f44f 711a 	mov.w	r1, #616	; 0x268
 8004152:	4843      	ldr	r0, [pc, #268]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004154:	f7fc fa76 	bl	8000644 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004158:	4b42      	ldr	r3, [pc, #264]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	493f      	ldr	r1, [pc, #252]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004176:	d106      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004178:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a39      	ldr	r2, [pc, #228]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 800417e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004182:	60d3      	str	r3, [r2, #12]
 8004184:	e011      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x606>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800418e:	d10c      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x606>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	2101      	movs	r1, #1
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f866 	bl	8004268 <RCCEx_PLLSAI1_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x606>
      {
        /* set overall return value */
        status = ret;
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02f      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x672>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00e      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x638>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041c6:	d009      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x638>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041d0:	d004      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x638>
 80041d2:	f44f 7122 	mov.w	r1, #648	; 0x288
 80041d6:	4822      	ldr	r0, [pc, #136]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80041d8:	f7fc fa34 	bl	8000644 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ea:	491e      	ldr	r1, [pc, #120]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041fa:	d10c      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	2102      	movs	r1, #2
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f830 	bl	8004268 <RCCEx_PLLSAI1_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x672>
      {
        /* set overall return value */
        status = ret;
 8004212:	7cfb      	ldrb	r3, [r7, #19]
 8004214:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d018      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x69a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004232:	d004      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8004234:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8004238:	4809      	ldr	r0, [pc, #36]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800423a:	f7fc fa03 	bl	8000644 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424c:	4905      	ldr	r1, [pc, #20]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004254:	7cbb      	ldrb	r3, [r7, #18]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	08007e4c 	.word	0x08007e4c
 8004264:	40021000 	.word	0x40021000

08004268 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d010      	beq.n	80042a0 <RCCEx_PLLSAI1_Config+0x38>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d00c      	beq.n	80042a0 <RCCEx_PLLSAI1_Config+0x38>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d008      	beq.n	80042a0 <RCCEx_PLLSAI1_Config+0x38>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d004      	beq.n	80042a0 <RCCEx_PLLSAI1_Config+0x38>
 8004296:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 800429a:	48a3      	ldr	r0, [pc, #652]	; (8004528 <RCCEx_PLLSAI1_Config+0x2c0>)
 800429c:	f7fc f9d2 	bl	8000644 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <RCCEx_PLLSAI1_Config+0x48>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d904      	bls.n	80042ba <RCCEx_PLLSAI1_Config+0x52>
 80042b0:	f640 3161 	movw	r1, #2913	; 0xb61
 80042b4:	489c      	ldr	r0, [pc, #624]	; (8004528 <RCCEx_PLLSAI1_Config+0x2c0>)
 80042b6:	f7fc f9c5 	bl	8000644 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b07      	cmp	r3, #7
 80042c0:	d903      	bls.n	80042ca <RCCEx_PLLSAI1_Config+0x62>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b56      	cmp	r3, #86	; 0x56
 80042c8:	d904      	bls.n	80042d4 <RCCEx_PLLSAI1_Config+0x6c>
 80042ca:	f640 3162 	movw	r1, #2914	; 0xb62
 80042ce:	4896      	ldr	r0, [pc, #600]	; (8004528 <RCCEx_PLLSAI1_Config+0x2c0>)
 80042d0:	f7fc f9b8 	bl	8000644 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <RCCEx_PLLSAI1_Config+0x90>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <RCCEx_PLLSAI1_Config+0x90>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d007      	beq.n	8004308 <RCCEx_PLLSAI1_Config+0xa0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <RCCEx_PLLSAI1_Config+0xaa>
 8004308:	f640 3163 	movw	r1, #2915	; 0xb63
 800430c:	4886      	ldr	r0, [pc, #536]	; (8004528 <RCCEx_PLLSAI1_Config+0x2c0>)
 800430e:	f7fc f999 	bl	8000644 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004312:	4b86      	ldr	r3, [pc, #536]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d018      	beq.n	8004350 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800431e:	4b83      	ldr	r3, [pc, #524]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0203 	and.w	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d10d      	bne.n	800434a <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
       ||
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004336:	4b7d      	ldr	r3, [pc, #500]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
       ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d044      	beq.n	80043d4 <RCCEx_PLLSAI1_Config+0x16c>
#endif
      )
    {
      status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
 800434e:	e041      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0x16c>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d00c      	beq.n	8004372 <RCCEx_PLLSAI1_Config+0x10a>
 8004358:	2b03      	cmp	r3, #3
 800435a:	d013      	beq.n	8004384 <RCCEx_PLLSAI1_Config+0x11c>
 800435c:	2b01      	cmp	r3, #1
 800435e:	d120      	bne.n	80043a2 <RCCEx_PLLSAI1_Config+0x13a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004360:	4b72      	ldr	r3, [pc, #456]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d11d      	bne.n	80043a8 <RCCEx_PLLSAI1_Config+0x140>
      {
        status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004370:	e01a      	b.n	80043a8 <RCCEx_PLLSAI1_Config+0x140>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004372:	4b6e      	ldr	r3, [pc, #440]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437a:	2b00      	cmp	r3, #0
 800437c:	d116      	bne.n	80043ac <RCCEx_PLLSAI1_Config+0x144>
      {
        status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004382:	e013      	b.n	80043ac <RCCEx_PLLSAI1_Config+0x144>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004384:	4b69      	ldr	r3, [pc, #420]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10f      	bne.n	80043b0 <RCCEx_PLLSAI1_Config+0x148>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004390:	4b66      	ldr	r3, [pc, #408]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <RCCEx_PLLSAI1_Config+0x148>
        {
          status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043a0:	e006      	b.n	80043b0 <RCCEx_PLLSAI1_Config+0x148>
    default:
      status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
      break;
 80043a6:	e004      	b.n	80043b2 <RCCEx_PLLSAI1_Config+0x14a>
      break;
 80043a8:	bf00      	nop
 80043aa:	e002      	b.n	80043b2 <RCCEx_PLLSAI1_Config+0x14a>
      break;
 80043ac:	bf00      	nop
 80043ae:	e000      	b.n	80043b2 <RCCEx_PLLSAI1_Config+0x14a>
      break;
 80043b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10d      	bne.n	80043d4 <RCCEx_PLLSAI1_Config+0x16c>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043b8:	4b5c      	ldr	r3, [pc, #368]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	430b      	orrs	r3, r1
 80043ce:	4957      	ldr	r1, [pc, #348]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f040 80ba 	bne.w	8004550 <RCCEx_PLLSAI1_Config+0x2e8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043dc:	4b53      	ldr	r3, [pc, #332]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a52      	ldr	r2, [pc, #328]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 80043e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e8:	f7fc fc88 	bl	8000cfc <HAL_GetTick>
 80043ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043ee:	e009      	b.n	8004404 <RCCEx_PLLSAI1_Config+0x19c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043f0:	f7fc fc84 	bl	8000cfc <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d902      	bls.n	8004404 <RCCEx_PLLSAI1_Config+0x19c>
      {
        status = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	73fb      	strb	r3, [r7, #15]
        break;
 8004402:	e005      	b.n	8004410 <RCCEx_PLLSAI1_Config+0x1a8>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004404:	4b49      	ldr	r3, [pc, #292]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1ef      	bne.n	80043f0 <RCCEx_PLLSAI1_Config+0x188>
      }
    }

    if(status == HAL_OK)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 809c 	bne.w	8004550 <RCCEx_PLLSAI1_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d11d      	bne.n	800445a <RCCEx_PLLSAI1_Config+0x1f2>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d903      	bls.n	800442e <RCCEx_PLLSAI1_Config+0x1c6>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b1f      	cmp	r3, #31
 800442c:	d904      	bls.n	8004438 <RCCEx_PLLSAI1_Config+0x1d0>
 800442e:	f640 31b6 	movw	r1, #2998	; 0xbb6
 8004432:	483d      	ldr	r0, [pc, #244]	; (8004528 <RCCEx_PLLSAI1_Config+0x2c0>)
 8004434:	f7fc f906 	bl	8000644 <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004438:	4b3c      	ldr	r3, [pc, #240]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004440:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6892      	ldr	r2, [r2, #8]
 8004448:	0211      	lsls	r1, r2, #8
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68d2      	ldr	r2, [r2, #12]
 800444e:	06d2      	lsls	r2, r2, #27
 8004450:	430a      	orrs	r2, r1
 8004452:	4936      	ldr	r1, [pc, #216]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 8004454:	4313      	orrs	r3, r2
 8004456:	610b      	str	r3, [r1, #16]
 8004458:	e051      	b.n	80044fe <RCCEx_PLLSAI1_Config+0x296>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d127      	bne.n	80044b0 <RCCEx_PLLSAI1_Config+0x248>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d010      	beq.n	800448a <RCCEx_PLLSAI1_Config+0x222>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d00c      	beq.n	800448a <RCCEx_PLLSAI1_Config+0x222>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b06      	cmp	r3, #6
 8004476:	d008      	beq.n	800448a <RCCEx_PLLSAI1_Config+0x222>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d004      	beq.n	800448a <RCCEx_PLLSAI1_Config+0x222>
 8004480:	f640 31da 	movw	r1, #3034	; 0xbda
 8004484:	4828      	ldr	r0, [pc, #160]	; (8004528 <RCCEx_PLLSAI1_Config+0x2c0>)
 8004486:	f7fc f8dd 	bl	8000644 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800448a:	4b28      	ldr	r3, [pc, #160]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004492:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6892      	ldr	r2, [r2, #8]
 800449a:	0211      	lsls	r1, r2, #8
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6912      	ldr	r2, [r2, #16]
 80044a0:	0852      	lsrs	r2, r2, #1
 80044a2:	3a01      	subs	r2, #1
 80044a4:	0552      	lsls	r2, r2, #21
 80044a6:	430a      	orrs	r2, r1
 80044a8:	4920      	ldr	r1, [pc, #128]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	610b      	str	r3, [r1, #16]
 80044ae:	e026      	b.n	80044fe <RCCEx_PLLSAI1_Config+0x296>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d010      	beq.n	80044da <RCCEx_PLLSAI1_Config+0x272>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d00c      	beq.n	80044da <RCCEx_PLLSAI1_Config+0x272>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	2b06      	cmp	r3, #6
 80044c6:	d008      	beq.n	80044da <RCCEx_PLLSAI1_Config+0x272>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d004      	beq.n	80044da <RCCEx_PLLSAI1_Config+0x272>
 80044d0:	f640 31ec 	movw	r1, #3052	; 0xbec
 80044d4:	4814      	ldr	r0, [pc, #80]	; (8004528 <RCCEx_PLLSAI1_Config+0x2c0>)
 80044d6:	f7fc f8b5 	bl	8000644 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044da:	4b14      	ldr	r3, [pc, #80]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6892      	ldr	r2, [r2, #8]
 80044ea:	0211      	lsls	r1, r2, #8
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6952      	ldr	r2, [r2, #20]
 80044f0:	0852      	lsrs	r2, r2, #1
 80044f2:	3a01      	subs	r2, #1
 80044f4:	0652      	lsls	r2, r2, #25
 80044f6:	430a      	orrs	r2, r1
 80044f8:	490c      	ldr	r1, [pc, #48]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044fe:	4b0b      	ldr	r3, [pc, #44]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a0a      	ldr	r2, [pc, #40]	; (800452c <RCCEx_PLLSAI1_Config+0x2c4>)
 8004504:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004508:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fc fbf7 	bl	8000cfc <HAL_GetTick>
 800450e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004510:	e00e      	b.n	8004530 <RCCEx_PLLSAI1_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004512:	f7fc fbf3 	bl	8000cfc <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d907      	bls.n	8004530 <RCCEx_PLLSAI1_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	73fb      	strb	r3, [r7, #15]
          break;
 8004524:	e00a      	b.n	800453c <RCCEx_PLLSAI1_Config+0x2d4>
 8004526:	bf00      	nop
 8004528:	08007e4c 	.word	0x08007e4c
 800452c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <RCCEx_PLLSAI1_Config+0x2f4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ea      	beq.n	8004512 <RCCEx_PLLSAI1_Config+0x2aa>
        }
      }

      if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <RCCEx_PLLSAI1_Config+0x2e8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <RCCEx_PLLSAI1_Config+0x2f4>)
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	4904      	ldr	r1, [pc, #16]	; (800455c <RCCEx_PLLSAI1_Config+0x2f4>)
 800454c:	4313      	orrs	r3, r2
 800454e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000

08004560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e1d6      	b.n	8004920 <HAL_SPI_Init+0x3c0>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a90      	ldr	r2, [pc, #576]	; (80047b8 <HAL_SPI_Init+0x258>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_SPI_Init+0x30>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a8e      	ldr	r2, [pc, #568]	; (80047bc <HAL_SPI_Init+0x25c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_SPI_Init+0x30>
 8004586:	f240 1147 	movw	r1, #327	; 0x147
 800458a:	488d      	ldr	r0, [pc, #564]	; (80047c0 <HAL_SPI_Init+0x260>)
 800458c:	f7fc f85a 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d009      	beq.n	80045ac <HAL_SPI_Init+0x4c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a0:	d004      	beq.n	80045ac <HAL_SPI_Init+0x4c>
 80045a2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80045a6:	4886      	ldr	r0, [pc, #536]	; (80047c0 <HAL_SPI_Init+0x260>)
 80045a8:	f7fc f84c 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00e      	beq.n	80045d2 <HAL_SPI_Init+0x72>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045bc:	d009      	beq.n	80045d2 <HAL_SPI_Init+0x72>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c6:	d004      	beq.n	80045d2 <HAL_SPI_Init+0x72>
 80045c8:	f240 1149 	movw	r1, #329	; 0x149
 80045cc:	487c      	ldr	r0, [pc, #496]	; (80047c0 <HAL_SPI_Init+0x260>)
 80045ce:	f7fc f839 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045da:	d040      	beq.n	800465e <HAL_SPI_Init+0xfe>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80045e4:	d03b      	beq.n	800465e <HAL_SPI_Init+0xfe>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80045ee:	d036      	beq.n	800465e <HAL_SPI_Init+0xfe>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045f8:	d031      	beq.n	800465e <HAL_SPI_Init+0xfe>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004602:	d02c      	beq.n	800465e <HAL_SPI_Init+0xfe>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800460c:	d027      	beq.n	800465e <HAL_SPI_Init+0xfe>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004616:	d022      	beq.n	800465e <HAL_SPI_Init+0xfe>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004620:	d01d      	beq.n	800465e <HAL_SPI_Init+0xfe>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800462a:	d018      	beq.n	800465e <HAL_SPI_Init+0xfe>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004634:	d013      	beq.n	800465e <HAL_SPI_Init+0xfe>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800463e:	d00e      	beq.n	800465e <HAL_SPI_Init+0xfe>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004648:	d009      	beq.n	800465e <HAL_SPI_Init+0xfe>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004652:	d004      	beq.n	800465e <HAL_SPI_Init+0xfe>
 8004654:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004658:	4859      	ldr	r0, [pc, #356]	; (80047c0 <HAL_SPI_Init+0x260>)
 800465a:	f7fb fff3 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004666:	d00d      	beq.n	8004684 <HAL_SPI_Init+0x124>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_SPI_Init+0x124>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004678:	d004      	beq.n	8004684 <HAL_SPI_Init+0x124>
 800467a:	f240 114b 	movw	r1, #331	; 0x14b
 800467e:	4850      	ldr	r0, [pc, #320]	; (80047c0 <HAL_SPI_Init+0x260>)
 8004680:	f7fb ffe0 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004688:	2b08      	cmp	r3, #8
 800468a:	d008      	beq.n	800469e <HAL_SPI_Init+0x13e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <HAL_SPI_Init+0x13e>
 8004694:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004698:	4849      	ldr	r0, [pc, #292]	; (80047c0 <HAL_SPI_Init+0x260>)
 800469a:	f7fb ffd3 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d020      	beq.n	80046e8 <HAL_SPI_Init+0x188>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d01c      	beq.n	80046e8 <HAL_SPI_Init+0x188>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	2b10      	cmp	r3, #16
 80046b4:	d018      	beq.n	80046e8 <HAL_SPI_Init+0x188>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	2b18      	cmp	r3, #24
 80046bc:	d014      	beq.n	80046e8 <HAL_SPI_Init+0x188>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d010      	beq.n	80046e8 <HAL_SPI_Init+0x188>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	2b28      	cmp	r3, #40	; 0x28
 80046cc:	d00c      	beq.n	80046e8 <HAL_SPI_Init+0x188>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	2b30      	cmp	r3, #48	; 0x30
 80046d4:	d008      	beq.n	80046e8 <HAL_SPI_Init+0x188>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	2b38      	cmp	r3, #56	; 0x38
 80046dc:	d004      	beq.n	80046e8 <HAL_SPI_Init+0x188>
 80046de:	f240 114d 	movw	r1, #333	; 0x14d
 80046e2:	4837      	ldr	r0, [pc, #220]	; (80047c0 <HAL_SPI_Init+0x260>)
 80046e4:	f7fb ffae 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_SPI_Init+0x1a2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	2b80      	cmp	r3, #128	; 0x80
 80046f6:	d004      	beq.n	8004702 <HAL_SPI_Init+0x1a2>
 80046f8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80046fc:	4830      	ldr	r0, [pc, #192]	; (80047c0 <HAL_SPI_Init+0x260>)
 80046fe:	f7fb ffa1 	bl	8000644 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_SPI_Init+0x1bc>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b10      	cmp	r3, #16
 8004710:	d004      	beq.n	800471c <HAL_SPI_Init+0x1bc>
 8004712:	f240 114f 	movw	r1, #335	; 0x14f
 8004716:	482a      	ldr	r0, [pc, #168]	; (80047c0 <HAL_SPI_Init+0x260>)
 8004718:	f7fb ff94 	bl	8000644 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	d14f      	bne.n	80047c4 <HAL_SPI_Init+0x264>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_SPI_Init+0x1de>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d004      	beq.n	800473e <HAL_SPI_Init+0x1de>
 8004734:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8004738:	4821      	ldr	r0, [pc, #132]	; (80047c0 <HAL_SPI_Init+0x260>)
 800473a:	f7fb ff83 	bl	8000644 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d008      	beq.n	8004758 <HAL_SPI_Init+0x1f8>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d004      	beq.n	8004758 <HAL_SPI_Init+0x1f8>
 800474e:	f240 1153 	movw	r1, #339	; 0x153
 8004752:	481b      	ldr	r0, [pc, #108]	; (80047c0 <HAL_SPI_Init+0x260>)
 8004754:	f7fb ff76 	bl	8000644 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004760:	d125      	bne.n	80047ae <HAL_SPI_Init+0x24e>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d057      	beq.n	800481a <HAL_SPI_Init+0x2ba>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	2b08      	cmp	r3, #8
 8004770:	d053      	beq.n	800481a <HAL_SPI_Init+0x2ba>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	2b10      	cmp	r3, #16
 8004778:	d04f      	beq.n	800481a <HAL_SPI_Init+0x2ba>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	2b18      	cmp	r3, #24
 8004780:	d04b      	beq.n	800481a <HAL_SPI_Init+0x2ba>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	2b20      	cmp	r3, #32
 8004788:	d047      	beq.n	800481a <HAL_SPI_Init+0x2ba>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	2b28      	cmp	r3, #40	; 0x28
 8004790:	d043      	beq.n	800481a <HAL_SPI_Init+0x2ba>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	2b30      	cmp	r3, #48	; 0x30
 8004798:	d03f      	beq.n	800481a <HAL_SPI_Init+0x2ba>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	2b38      	cmp	r3, #56	; 0x38
 80047a0:	d03b      	beq.n	800481a <HAL_SPI_Init+0x2ba>
 80047a2:	f240 1157 	movw	r1, #343	; 0x157
 80047a6:	4806      	ldr	r0, [pc, #24]	; (80047c0 <HAL_SPI_Init+0x260>)
 80047a8:	f7fb ff4c 	bl	8000644 <assert_failed>
 80047ac:	e035      	b.n	800481a <HAL_SPI_Init+0x2ba>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	61da      	str	r2, [r3, #28]
 80047b4:	e031      	b.n	800481a <HAL_SPI_Init+0x2ba>
 80047b6:	bf00      	nop
 80047b8:	40013000 	.word	0x40013000
 80047bc:	40003c00 	.word	0x40003c00
 80047c0:	08007e88 	.word	0x08007e88
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d020      	beq.n	800480e <HAL_SPI_Init+0x2ae>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d01c      	beq.n	800480e <HAL_SPI_Init+0x2ae>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d018      	beq.n	800480e <HAL_SPI_Init+0x2ae>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	2b18      	cmp	r3, #24
 80047e2:	d014      	beq.n	800480e <HAL_SPI_Init+0x2ae>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d010      	beq.n	800480e <HAL_SPI_Init+0x2ae>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	2b28      	cmp	r3, #40	; 0x28
 80047f2:	d00c      	beq.n	800480e <HAL_SPI_Init+0x2ae>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	2b30      	cmp	r3, #48	; 0x30
 80047fa:	d008      	beq.n	800480e <HAL_SPI_Init+0x2ae>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2b38      	cmp	r3, #56	; 0x38
 8004802:	d004      	beq.n	800480e <HAL_SPI_Init+0x2ae>
 8004804:	f240 1161 	movw	r1, #353	; 0x161
 8004808:	4847      	ldr	r0, [pc, #284]	; (8004928 <HAL_SPI_Init+0x3c8>)
 800480a:	f7fb ff1b 	bl	8000644 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <HAL_SPI_Init+0x2da>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7fb ff79 	bl	800072c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004850:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800485a:	d902      	bls.n	8004862 <HAL_SPI_Init+0x302>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e002      	b.n	8004868 <HAL_SPI_Init+0x308>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004866:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004870:	d007      	beq.n	8004882 <HAL_SPI_Init+0x322>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800487a:	d002      	beq.n	8004882 <HAL_SPI_Init+0x322>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	ea42 0103 	orr.w	r1, r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	0c1b      	lsrs	r3, r3, #16
 80048de:	f003 0204 	and.w	r2, r3, #4
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048fe:	ea42 0103 	orr.w	r1, r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	08007e88 	.word	0x08007e88

0800492c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d009      	beq.n	800495c <HAL_SPI_Transmit+0x30>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004950:	d004      	beq.n	800495c <HAL_SPI_Transmit+0x30>
 8004952:	f240 313e 	movw	r1, #830	; 0x33e
 8004956:	4890      	ldr	r0, [pc, #576]	; (8004b98 <HAL_SPI_Transmit+0x26c>)
 8004958:	f7fb fe74 	bl	8000644 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_SPI_Transmit+0x3e>
 8004966:	2302      	movs	r3, #2
 8004968:	e15a      	b.n	8004c20 <HAL_SPI_Transmit+0x2f4>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004972:	f7fc f9c3 	bl	8000cfc <HAL_GetTick>
 8004976:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d002      	beq.n	800498e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8004988:	2302      	movs	r3, #2
 800498a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800498c:	e13f      	b.n	8004c0e <HAL_SPI_Transmit+0x2e2>
  }

  if ((pData == NULL) || (Size == 0U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_SPI_Transmit+0x6e>
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800499e:	e136      	b.n	8004c0e <HAL_SPI_Transmit+0x2e2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2203      	movs	r2, #3
 80049a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	88fa      	ldrh	r2, [r7, #6]
 80049b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ea:	d10f      	bne.n	8004a0c <HAL_SPI_Transmit+0xe0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	d007      	beq.n	8004a2a <HAL_SPI_Transmit+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a32:	d94b      	bls.n	8004acc <HAL_SPI_Transmit+0x1a0>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_SPI_Transmit+0x116>
 8004a3c:	8afb      	ldrh	r3, [r7, #22]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d13e      	bne.n	8004ac0 <HAL_SPI_Transmit+0x194>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	881a      	ldrh	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	1c9a      	adds	r2, r3, #2
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a66:	e02b      	b.n	8004ac0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d112      	bne.n	8004a9c <HAL_SPI_Transmit+0x170>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	881a      	ldrh	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	1c9a      	adds	r2, r3, #2
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a9a:	e011      	b.n	8004ac0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a9c:	f7fc f92e 	bl	8000cfc <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d803      	bhi.n	8004ab4 <HAL_SPI_Transmit+0x188>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab2:	d102      	bne.n	8004aba <HAL_SPI_Transmit+0x18e>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <HAL_SPI_Transmit+0x194>
        {
          errorcode = HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004abe:	e0a6      	b.n	8004c0e <HAL_SPI_Transmit+0x2e2>
    while (hspi->TxXferCount > 0U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1ce      	bne.n	8004a68 <HAL_SPI_Transmit+0x13c>
 8004aca:	e07e      	b.n	8004bca <HAL_SPI_Transmit+0x29e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_SPI_Transmit+0x1ae>
 8004ad4:	8afb      	ldrh	r3, [r7, #22]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d172      	bne.n	8004bc0 <HAL_SPI_Transmit+0x294>
    {
      if (hspi->TxXferCount > 1U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d912      	bls.n	8004b0a <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	881a      	ldrh	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	1c9a      	adds	r2, r3, #2
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b02      	subs	r3, #2
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b08:	e05a      	b.n	8004bc0 <HAL_SPI_Transmit+0x294>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	330c      	adds	r3, #12
 8004b14:	7812      	ldrb	r2, [r2, #0]
 8004b16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b30:	e046      	b.n	8004bc0 <HAL_SPI_Transmit+0x294>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d12d      	bne.n	8004b9c <HAL_SPI_Transmit+0x270>
      {
        if (hspi->TxXferCount > 1U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d912      	bls.n	8004b70 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	881a      	ldrh	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	1c9a      	adds	r2, r3, #2
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b02      	subs	r3, #2
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b6e:	e027      	b.n	8004bc0 <HAL_SPI_Transmit+0x294>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	7812      	ldrb	r2, [r2, #0]
 8004b7c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b96:	e013      	b.n	8004bc0 <HAL_SPI_Transmit+0x294>
 8004b98:	08007e88 	.word	0x08007e88
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b9c:	f7fc f8ae 	bl	8000cfc <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d803      	bhi.n	8004bb4 <HAL_SPI_Transmit+0x288>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d102      	bne.n	8004bba <HAL_SPI_Transmit+0x28e>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d102      	bne.n	8004bc0 <HAL_SPI_Transmit+0x294>
        {
          errorcode = HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bbe:	e026      	b.n	8004c0e <HAL_SPI_Transmit+0x2e2>
    while (hspi->TxXferCount > 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1b3      	bne.n	8004b32 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	6839      	ldr	r1, [r7, #0]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f940 	bl	8004e54 <SPI_EndRxTxTransaction>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_SPI_Transmit+0x2b4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <HAL_SPI_Transmit+0x2d2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_SPI_Transmit+0x2e0>
  {
    errorcode = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	77fb      	strb	r3, [r7, #31]
 8004c0a:	e000      	b.n	8004c0e <HAL_SPI_Transmit+0x2e2>
  }

error:
 8004c0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3720      	adds	r7, #32
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c38:	f7fc f860 	bl	8000cfc <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	4413      	add	r3, r2
 8004c46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c48:	f7fc f858 	bl	8000cfc <HAL_GetTick>
 8004c4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c4e:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	015b      	lsls	r3, r3, #5
 8004c54:	0d1b      	lsrs	r3, r3, #20
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	fb02 f303 	mul.w	r3, r2, r3
 8004c5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c5e:	e054      	b.n	8004d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	d050      	beq.n	8004d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c68:	f7fc f848 	bl	8000cfc <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d902      	bls.n	8004c7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d13d      	bne.n	8004cfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c96:	d111      	bne.n	8004cbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca0:	d004      	beq.n	8004cac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004caa:	d107      	bne.n	8004cbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc4:	d10f      	bne.n	8004ce6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ce4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e017      	b.n	8004d2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4013      	ands	r3, r2
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	bf0c      	ite	eq
 8004d1a:	2301      	moveq	r3, #1
 8004d1c:	2300      	movne	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d19b      	bne.n	8004c60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000000 	.word	0x20000000

08004d38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d46:	f7fb ffd9 	bl	8000cfc <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	4413      	add	r3, r2
 8004d54:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d56:	f7fb ffd1 	bl	8000cfc <HAL_GetTick>
 8004d5a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d5c:	4b3c      	ldr	r3, [pc, #240]	; (8004e50 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	00da      	lsls	r2, r3, #3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	0d1b      	lsrs	r3, r3, #20
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d74:	e05f      	b.n	8004e36 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d7c:	d106      	bne.n	8004d8c <SPI_WaitFifoStateUntilTimeout+0x54>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d103      	bne.n	8004d8c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d050      	beq.n	8004e36 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d94:	f7fb ffb2 	bl	8000cfc <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d902      	bls.n	8004daa <SPI_WaitFifoStateUntilTimeout+0x72>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d13d      	bne.n	8004e26 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004db8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc2:	d111      	bne.n	8004de8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dcc:	d004      	beq.n	8004dd8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd6:	d107      	bne.n	8004de8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df0:	d10f      	bne.n	8004e12 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e010      	b.n	8004e48 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d197      	bne.n	8004d76 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3720      	adds	r7, #32
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20000000 	.word	0x20000000

08004e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f7ff ff63 	bl	8004d38 <SPI_WaitFifoStateUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d007      	beq.n	8004e88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7c:	f043 0220 	orr.w	r2, r3, #32
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e027      	b.n	8004ed8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2180      	movs	r1, #128	; 0x80
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff fec8 	bl	8004c28 <SPI_WaitFlagStateUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea2:	f043 0220 	orr.w	r2, r3, #32
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e014      	b.n	8004ed8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff ff3c 	bl	8004d38 <SPI_WaitFifoStateUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e000      	b.n	8004ed8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e06d      	b.n	8004fce <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d014      	beq.n	8004f24 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a36      	ldr	r2, [pc, #216]	; (8004fd8 <HAL_UART_Init+0xf8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d023      	beq.n	8004f4c <HAL_UART_Init+0x6c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a34      	ldr	r2, [pc, #208]	; (8004fdc <HAL_UART_Init+0xfc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01e      	beq.n	8004f4c <HAL_UART_Init+0x6c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a33      	ldr	r2, [pc, #204]	; (8004fe0 <HAL_UART_Init+0x100>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d019      	beq.n	8004f4c <HAL_UART_Init+0x6c>
 8004f18:	f240 1143 	movw	r1, #323	; 0x143
 8004f1c:	4831      	ldr	r0, [pc, #196]	; (8004fe4 <HAL_UART_Init+0x104>)
 8004f1e:	f7fb fb91 	bl	8000644 <assert_failed>
 8004f22:	e013      	b.n	8004f4c <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a2b      	ldr	r2, [pc, #172]	; (8004fd8 <HAL_UART_Init+0xf8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00e      	beq.n	8004f4c <HAL_UART_Init+0x6c>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2a      	ldr	r2, [pc, #168]	; (8004fdc <HAL_UART_Init+0xfc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d009      	beq.n	8004f4c <HAL_UART_Init+0x6c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a28      	ldr	r2, [pc, #160]	; (8004fe0 <HAL_UART_Init+0x100>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_UART_Init+0x6c>
 8004f42:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004f46:	4827      	ldr	r0, [pc, #156]	; (8004fe4 <HAL_UART_Init+0x104>)
 8004f48:	f7fb fb7c 	bl	8000644 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7fb fc73 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2224      	movs	r2, #36	; 0x24
 8004f66:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fbc3 	bl	8005704 <UART_SetConfig>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e022      	b.n	8004fce <HAL_UART_Init+0xee>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_UART_Init+0xb6>
  {
    UART_AdvFeatureConfig(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fe69 	bl	8005c68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fa4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fb4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 ff94 	bl	8005ef4 <UART_CheckIdleState>
 8004fcc:	4603      	mov	r3, r0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40013800 	.word	0x40013800
 8004fdc:	40004400 	.word	0x40004400
 8004fe0:	40008000 	.word	0x40008000
 8004fe4:	08007ec0 	.word	0x08007ec0

08004fe8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	f040 8081 	bne.w	8005104 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_UART_Transmit+0x26>
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e079      	b.n	8005106 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_UART_Transmit+0x38>
 800501c:	2302      	movs	r3, #2
 800501e:	e072      	b.n	8005106 <HAL_UART_Transmit+0x11e>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2221      	movs	r2, #33	; 0x21
 8005032:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005034:	f7fb fe62 	bl	8000cfc <HAL_GetTick>
 8005038:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	88fa      	ldrh	r2, [r7, #6]
 8005046:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	d108      	bne.n	8005066 <HAL_UART_Transmit+0x7e>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	e003      	b.n	800506e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005076:	e02d      	b.n	80050d4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2200      	movs	r2, #0
 8005080:	2180      	movs	r1, #128	; 0x80
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 ff7b 	bl	8005f7e <UART_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e039      	b.n	8005106 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10b      	bne.n	80050b0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	881a      	ldrh	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a4:	b292      	uxth	r2, r2
 80050a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	3302      	adds	r3, #2
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e008      	b.n	80050c2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	b292      	uxth	r2, r2
 80050ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	3301      	adds	r3, #1
 80050c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1cb      	bne.n	8005078 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2200      	movs	r2, #0
 80050e8:	2140      	movs	r1, #64	; 0x40
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 ff47 	bl	8005f7e <UART_WaitOnFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e005      	b.n	8005106 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005122:	2b20      	cmp	r3, #32
 8005124:	d16c      	bne.n	8005200 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_UART_Receive_DMA+0x22>
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e065      	b.n	8005202 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_UART_Receive_DMA+0x34>
 8005140:	2302      	movs	r3, #2
 8005142:	e05e      	b.n	8005202 <HAL_UART_Receive_DMA+0xf2>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	88fa      	ldrh	r2, [r7, #6]
 8005156:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2222      	movs	r2, #34	; 0x22
 8005164:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516a:	2b00      	cmp	r3, #0
 800516c:	d02a      	beq.n	80051c4 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005172:	4a26      	ldr	r2, [pc, #152]	; (800520c <HAL_UART_Receive_DMA+0xfc>)
 8005174:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517a:	4a25      	ldr	r2, [pc, #148]	; (8005210 <HAL_UART_Receive_DMA+0x100>)
 800517c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005182:	4a24      	ldr	r2, [pc, #144]	; (8005214 <HAL_UART_Receive_DMA+0x104>)
 8005184:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800518a:	2200      	movs	r2, #0
 800518c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3324      	adds	r3, #36	; 0x24
 8005198:	4619      	mov	r1, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	461a      	mov	r2, r3
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	f7fc f8d1 	bl	8001348 <HAL_DMA_Start_IT>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2210      	movs	r2, #16
 80051b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e01e      	b.n	8005202 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051da:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051fa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	e000      	b.n	8005202 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005200:	2302      	movs	r3, #2
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	080060df 	.word	0x080060df
 8005210:	08006147 	.word	0x08006147
 8005214:	08006163 	.word	0x08006163

08005218 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005224:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800522a:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_UART_DMAPause+0x22>
 8005236:	2302      	movs	r3, #2
 8005238:	e03c      	b.n	80052b4 <HAL_UART_DMAPause+0x9c>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524c:	2b80      	cmp	r3, #128	; 0x80
 800524e:	d10a      	bne.n	8005266 <HAL_UART_DMAPause+0x4e>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b21      	cmp	r3, #33	; 0x21
 8005254:	d107      	bne.n	8005266 <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005264:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d11a      	bne.n	80052aa <HAL_UART_DMAPause+0x92>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b22      	cmp	r3, #34	; 0x22
 8005278:	d117      	bne.n	80052aa <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005288:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0201 	bic.w	r2, r2, #1
 8005298:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a8:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_UART_DMAResume+0x16>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e034      	b.n	8005340 <HAL_UART_DMAResume+0x80>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e2:	2b21      	cmp	r3, #33	; 0x21
 80052e4:	d107      	bne.n	80052f6 <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052f4:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052fa:	2b22      	cmp	r3, #34	; 0x22
 80052fc:	d11b      	bne.n	8005336 <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2208      	movs	r2, #8
 8005304:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005314:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0201 	orr.w	r2, r2, #1
 8005324:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005334:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005358:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800535e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b80      	cmp	r3, #128	; 0x80
 800536c:	d126      	bne.n	80053bc <HAL_UART_DMAStop+0x70>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b21      	cmp	r3, #33	; 0x21
 8005372:	d123      	bne.n	80053bc <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005382:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005388:	2b00      	cmp	r3, #0
 800538a:	d014      	beq.n	80053b6 <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005390:	4618      	mov	r0, r3
 8005392:	f7fc f847 	bl	8001424 <HAL_DMA_Abort>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00c      	beq.n	80053b6 <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fc f96d 	bl	8001680 <HAL_DMA_GetError>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d104      	bne.n	80053b6 <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2210      	movs	r2, #16
 80053b0:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e031      	b.n	800541a <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fe5c 	bl	8006074 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d126      	bne.n	8005418 <HAL_UART_DMAStop+0xcc>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b22      	cmp	r3, #34	; 0x22
 80053ce:	d123      	bne.n	8005418 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053de:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d014      	beq.n	8005412 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fc f819 	bl	8001424 <HAL_DMA_Abort>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fc f93f 	bl	8001680 <HAL_DMA_GetError>
 8005402:	4603      	mov	r3, r0
 8005404:	2b20      	cmp	r3, #32
 8005406:	d104      	bne.n	8005412 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2210      	movs	r2, #16
 800540c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e003      	b.n	800541a <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fe43 	bl	800609e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	f640 030f 	movw	r3, #2063	; 0x80f
 800544a:	4013      	ands	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d113      	bne.n	800547c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00e      	beq.n	800547c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d009      	beq.n	800547c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8114 	beq.w	800569a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	4798      	blx	r3
      }
      return;
 800547a:	e10e      	b.n	800569a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80d6 	beq.w	8005630 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d105      	bne.n	800549a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4b86      	ldr	r3, [pc, #536]	; (80056ac <HAL_UART_IRQHandler+0x288>)
 8005492:	4013      	ands	r3, r2
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80cb 	beq.w	8005630 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00e      	beq.n	80054c2 <HAL_UART_IRQHandler+0x9e>
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2201      	movs	r2, #1
 80054b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ba:	f043 0201 	orr.w	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00e      	beq.n	80054ea <HAL_UART_IRQHandler+0xc6>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2202      	movs	r2, #2
 80054dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054e2:	f043 0204 	orr.w	r2, r3, #4
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00e      	beq.n	8005512 <HAL_UART_IRQHandler+0xee>
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d009      	beq.n	8005512 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2204      	movs	r2, #4
 8005504:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550a:	f043 0202 	orr.w	r2, r3, #2
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d013      	beq.n	8005544 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d104      	bne.n	8005530 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2208      	movs	r2, #8
 8005536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800553c:	f043 0208 	orr.w	r2, r3, #8
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00f      	beq.n	800556e <HAL_UART_IRQHandler+0x14a>
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00a      	beq.n	800556e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8093 	beq.w	800569e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b40      	cmp	r3, #64	; 0x40
 80055ae:	d004      	beq.n	80055ba <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d031      	beq.n	800561e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fd6f 	bl	800609e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d123      	bne.n	8005616 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d013      	beq.n	800560e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ea:	4a31      	ldr	r2, [pc, #196]	; (80056b0 <HAL_UART_IRQHandler+0x28c>)
 80055ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fb ff54 	bl	80014a0 <HAL_DMA_Abort_IT>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d016      	beq.n	800562c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005608:	4610      	mov	r0, r2
 800560a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560c:	e00e      	b.n	800562c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f86e 	bl	80056f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	e00a      	b.n	800562c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f86a 	bl	80056f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800561c:	e006      	b.n	800562c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f866 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800562a:	e038      	b.n	800569e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800562c:	bf00      	nop
    return;
 800562e:	e036      	b.n	800569e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00d      	beq.n	8005656 <HAL_UART_IRQHandler+0x232>
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d008      	beq.n	8005656 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800564c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fdf2 	bl	8006238 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005654:	e026      	b.n	80056a4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00d      	beq.n	800567c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005666:	2b00      	cmp	r3, #0
 8005668:	d008      	beq.n	800567c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800566e:	2b00      	cmp	r3, #0
 8005670:	d017      	beq.n	80056a2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4798      	blx	r3
    }
    return;
 800567a:	e012      	b.n	80056a2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00e      	beq.n	80056a4 <HAL_UART_IRQHandler+0x280>
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fdb8 	bl	8006206 <UART_EndTransmit_IT>
    return;
 8005696:	bf00      	nop
 8005698:	e004      	b.n	80056a4 <HAL_UART_IRQHandler+0x280>
      return;
 800569a:	bf00      	nop
 800569c:	e002      	b.n	80056a4 <HAL_UART_IRQHandler+0x280>
    return;
 800569e:	bf00      	nop
 80056a0:	e000      	b.n	80056a4 <HAL_UART_IRQHandler+0x280>
    return;
 80056a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80056a4:	3720      	adds	r7, #32
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	04000120 	.word	0x04000120
 80056b0:	080061db 	.word	0x080061db

080056b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005704:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005708:	b088      	sub	sp, #32
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	76bb      	strb	r3, [r7, #26]
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	4aab      	ldr	r2, [pc, #684]	; (80059c4 <UART_SetConfig+0x2c0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d904      	bls.n	8005726 <UART_SetConfig+0x22>
 800571c:	f640 31b1 	movw	r1, #2993	; 0xbb1
 8005720:	48a9      	ldr	r0, [pc, #676]	; (80059c8 <UART_SetConfig+0x2c4>)
 8005722:	f7fa ff8f 	bl	8000644 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800572e:	d00d      	beq.n	800574c <UART_SetConfig+0x48>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d009      	beq.n	800574c <UART_SetConfig+0x48>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005740:	d004      	beq.n	800574c <UART_SetConfig+0x48>
 8005742:	f640 31b2 	movw	r1, #2994	; 0xbb2
 8005746:	48a0      	ldr	r0, [pc, #640]	; (80059c8 <UART_SetConfig+0x2c4>)
 8005748:	f7fa ff7c 	bl	8000644 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a9e      	ldr	r2, [pc, #632]	; (80059cc <UART_SetConfig+0x2c8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d10e      	bne.n	8005774 <UART_SetConfig+0x70>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d030      	beq.n	80057c0 <UART_SetConfig+0xbc>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005766:	d02b      	beq.n	80057c0 <UART_SetConfig+0xbc>
 8005768:	f640 31b5 	movw	r1, #2997	; 0xbb5
 800576c:	4896      	ldr	r0, [pc, #600]	; (80059c8 <UART_SetConfig+0x2c4>)
 800576e:	f7fa ff69 	bl	8000644 <assert_failed>
 8005772:	e025      	b.n	80057c0 <UART_SetConfig+0xbc>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577c:	d012      	beq.n	80057a4 <UART_SetConfig+0xa0>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00e      	beq.n	80057a4 <UART_SetConfig+0xa0>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800578e:	d009      	beq.n	80057a4 <UART_SetConfig+0xa0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005798:	d004      	beq.n	80057a4 <UART_SetConfig+0xa0>
 800579a:	f640 31b9 	movw	r1, #3001	; 0xbb9
 800579e:	488a      	ldr	r0, [pc, #552]	; (80059c8 <UART_SetConfig+0x2c4>)
 80057a0:	f7fa ff50 	bl	8000644 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d009      	beq.n	80057c0 <UART_SetConfig+0xbc>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b4:	d004      	beq.n	80057c0 <UART_SetConfig+0xbc>
 80057b6:	f640 31ba 	movw	r1, #3002	; 0xbba
 80057ba:	4883      	ldr	r0, [pc, #524]	; (80059c8 <UART_SetConfig+0x2c4>)
 80057bc:	f7fa ff42 	bl	8000644 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00e      	beq.n	80057e6 <UART_SetConfig+0xe2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d0:	d009      	beq.n	80057e6 <UART_SetConfig+0xe2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057da:	d004      	beq.n	80057e6 <UART_SetConfig+0xe2>
 80057dc:	f640 31bd 	movw	r1, #3005	; 0xbbd
 80057e0:	4879      	ldr	r0, [pc, #484]	; (80059c8 <UART_SetConfig+0x2c4>)
 80057e2:	f7fa ff2f 	bl	8000644 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f023 030c 	bic.w	r3, r3, #12
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <UART_SetConfig+0xf6>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d104      	bne.n	8005804 <UART_SetConfig+0x100>
 80057fa:	f640 31be 	movw	r1, #3006	; 0xbbe
 80057fe:	4872      	ldr	r0, [pc, #456]	; (80059c8 <UART_SetConfig+0x2c4>)
 8005800:	f7fa ff20 	bl	8000644 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d013      	beq.n	8005834 <UART_SetConfig+0x130>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005814:	d00e      	beq.n	8005834 <UART_SetConfig+0x130>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800581e:	d009      	beq.n	8005834 <UART_SetConfig+0x130>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005828:	d004      	beq.n	8005834 <UART_SetConfig+0x130>
 800582a:	f640 31bf 	movw	r1, #3007	; 0xbbf
 800582e:	4866      	ldr	r0, [pc, #408]	; (80059c8 <UART_SetConfig+0x2c4>)
 8005830:	f7fa ff08 	bl	8000644 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d009      	beq.n	8005850 <UART_SetConfig+0x14c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005844:	d004      	beq.n	8005850 <UART_SetConfig+0x14c>
 8005846:	f44f 613c 	mov.w	r1, #3008	; 0xbc0
 800584a:	485f      	ldr	r0, [pc, #380]	; (80059c8 <UART_SetConfig+0x2c4>)
 800584c:	f7fa fefa 	bl	8000644 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	4313      	orrs	r3, r2
 8005866:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	4b58      	ldr	r3, [pc, #352]	; (80059d0 <UART_SetConfig+0x2cc>)
 8005870:	4013      	ands	r3, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	69f9      	ldr	r1, [r7, #28]
 8005878:	430b      	orrs	r3, r1
 800587a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a4b      	ldr	r2, [pc, #300]	; (80059cc <UART_SetConfig+0x2c8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <UART_SetConfig+0x1a8>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	430a      	orrs	r2, r1
 80058be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a43      	ldr	r2, [pc, #268]	; (80059d4 <UART_SetConfig+0x2d0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d122      	bne.n	8005910 <UART_SetConfig+0x20c>
 80058ca:	4b43      	ldr	r3, [pc, #268]	; (80059d8 <UART_SetConfig+0x2d4>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d817      	bhi.n	8005908 <UART_SetConfig+0x204>
 80058d8:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <UART_SetConfig+0x1dc>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	080058f1 	.word	0x080058f1
 80058e4:	080058fd 	.word	0x080058fd
 80058e8:	080058f7 	.word	0x080058f7
 80058ec:	08005903 	.word	0x08005903
 80058f0:	2301      	movs	r3, #1
 80058f2:	76fb      	strb	r3, [r7, #27]
 80058f4:	e080      	b.n	80059f8 <UART_SetConfig+0x2f4>
 80058f6:	2302      	movs	r3, #2
 80058f8:	76fb      	strb	r3, [r7, #27]
 80058fa:	e07d      	b.n	80059f8 <UART_SetConfig+0x2f4>
 80058fc:	2304      	movs	r3, #4
 80058fe:	76fb      	strb	r3, [r7, #27]
 8005900:	e07a      	b.n	80059f8 <UART_SetConfig+0x2f4>
 8005902:	2308      	movs	r3, #8
 8005904:	76fb      	strb	r3, [r7, #27]
 8005906:	e077      	b.n	80059f8 <UART_SetConfig+0x2f4>
 8005908:	2310      	movs	r3, #16
 800590a:	76fb      	strb	r3, [r7, #27]
 800590c:	bf00      	nop
 800590e:	e073      	b.n	80059f8 <UART_SetConfig+0x2f4>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a31      	ldr	r2, [pc, #196]	; (80059dc <UART_SetConfig+0x2d8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d134      	bne.n	8005984 <UART_SetConfig+0x280>
 800591a:	4b2f      	ldr	r3, [pc, #188]	; (80059d8 <UART_SetConfig+0x2d4>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005920:	f003 030c 	and.w	r3, r3, #12
 8005924:	2b0c      	cmp	r3, #12
 8005926:	d829      	bhi.n	800597c <UART_SetConfig+0x278>
 8005928:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <UART_SetConfig+0x22c>)
 800592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	08005965 	.word	0x08005965
 8005934:	0800597d 	.word	0x0800597d
 8005938:	0800597d 	.word	0x0800597d
 800593c:	0800597d 	.word	0x0800597d
 8005940:	08005971 	.word	0x08005971
 8005944:	0800597d 	.word	0x0800597d
 8005948:	0800597d 	.word	0x0800597d
 800594c:	0800597d 	.word	0x0800597d
 8005950:	0800596b 	.word	0x0800596b
 8005954:	0800597d 	.word	0x0800597d
 8005958:	0800597d 	.word	0x0800597d
 800595c:	0800597d 	.word	0x0800597d
 8005960:	08005977 	.word	0x08005977
 8005964:	2300      	movs	r3, #0
 8005966:	76fb      	strb	r3, [r7, #27]
 8005968:	e046      	b.n	80059f8 <UART_SetConfig+0x2f4>
 800596a:	2302      	movs	r3, #2
 800596c:	76fb      	strb	r3, [r7, #27]
 800596e:	e043      	b.n	80059f8 <UART_SetConfig+0x2f4>
 8005970:	2304      	movs	r3, #4
 8005972:	76fb      	strb	r3, [r7, #27]
 8005974:	e040      	b.n	80059f8 <UART_SetConfig+0x2f4>
 8005976:	2308      	movs	r3, #8
 8005978:	76fb      	strb	r3, [r7, #27]
 800597a:	e03d      	b.n	80059f8 <UART_SetConfig+0x2f4>
 800597c:	2310      	movs	r3, #16
 800597e:	76fb      	strb	r3, [r7, #27]
 8005980:	bf00      	nop
 8005982:	e039      	b.n	80059f8 <UART_SetConfig+0x2f4>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a10      	ldr	r2, [pc, #64]	; (80059cc <UART_SetConfig+0x2c8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d132      	bne.n	80059f4 <UART_SetConfig+0x2f0>
 800598e:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <UART_SetConfig+0x2d4>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599c:	d020      	beq.n	80059e0 <UART_SetConfig+0x2dc>
 800599e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a2:	d802      	bhi.n	80059aa <UART_SetConfig+0x2a6>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <UART_SetConfig+0x2b4>
 80059a8:	e020      	b.n	80059ec <UART_SetConfig+0x2e8>
 80059aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ae:	d006      	beq.n	80059be <UART_SetConfig+0x2ba>
 80059b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059b4:	d017      	beq.n	80059e6 <UART_SetConfig+0x2e2>
 80059b6:	e019      	b.n	80059ec <UART_SetConfig+0x2e8>
 80059b8:	2300      	movs	r3, #0
 80059ba:	76fb      	strb	r3, [r7, #27]
 80059bc:	e01c      	b.n	80059f8 <UART_SetConfig+0x2f4>
 80059be:	2302      	movs	r3, #2
 80059c0:	76fb      	strb	r3, [r7, #27]
 80059c2:	e019      	b.n	80059f8 <UART_SetConfig+0x2f4>
 80059c4:	00989680 	.word	0x00989680
 80059c8:	08007ec0 	.word	0x08007ec0
 80059cc:	40008000 	.word	0x40008000
 80059d0:	efff69f3 	.word	0xefff69f3
 80059d4:	40013800 	.word	0x40013800
 80059d8:	40021000 	.word	0x40021000
 80059dc:	40004400 	.word	0x40004400
 80059e0:	2304      	movs	r3, #4
 80059e2:	76fb      	strb	r3, [r7, #27]
 80059e4:	e008      	b.n	80059f8 <UART_SetConfig+0x2f4>
 80059e6:	2308      	movs	r3, #8
 80059e8:	76fb      	strb	r3, [r7, #27]
 80059ea:	e005      	b.n	80059f8 <UART_SetConfig+0x2f4>
 80059ec:	2310      	movs	r3, #16
 80059ee:	76fb      	strb	r3, [r7, #27]
 80059f0:	bf00      	nop
 80059f2:	e001      	b.n	80059f8 <UART_SetConfig+0x2f4>
 80059f4:	2310      	movs	r3, #16
 80059f6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a98      	ldr	r2, [pc, #608]	; (8005c60 <UART_SetConfig+0x55c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d174      	bne.n	8005aec <UART_SetConfig+0x3e8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a02:	7efb      	ldrb	r3, [r7, #27]
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d824      	bhi.n	8005a52 <UART_SetConfig+0x34e>
 8005a08:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <UART_SetConfig+0x30c>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005a53 	.word	0x08005a53
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a53 	.word	0x08005a53
 8005a20:	08005a43 	.word	0x08005a43
 8005a24:	08005a53 	.word	0x08005a53
 8005a28:	08005a53 	.word	0x08005a53
 8005a2c:	08005a53 	.word	0x08005a53
 8005a30:	08005a4b 	.word	0x08005a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a34:	f7fe f82a 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8005a38:	6178      	str	r0, [r7, #20]
        break;
 8005a3a:	e00f      	b.n	8005a5c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a3c:	4b89      	ldr	r3, [pc, #548]	; (8005c64 <UART_SetConfig+0x560>)
 8005a3e:	617b      	str	r3, [r7, #20]
        break;
 8005a40:	e00c      	b.n	8005a5c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a42:	f7fd ff8d 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 8005a46:	6178      	str	r0, [r7, #20]
        break;
 8005a48:	e008      	b.n	8005a5c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4e:	617b      	str	r3, [r7, #20]
        break;
 8005a50:	e004      	b.n	8005a5c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	76bb      	strb	r3, [r7, #26]
        break;
 8005a5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80f2 	beq.w	8005c48 <UART_SetConfig+0x544>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	4413      	add	r3, r2
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d305      	bcc.n	8005a80 <UART_SetConfig+0x37c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d902      	bls.n	8005a86 <UART_SetConfig+0x382>
      {
        ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	76bb      	strb	r3, [r7, #26]
 8005a84:	e0e0      	b.n	8005c48 <UART_SetConfig+0x544>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	f04f 0400 	mov.w	r4, #0
 8005a96:	0214      	lsls	r4, r2, #8
 8005a98:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005a9c:	020b      	lsls	r3, r1, #8
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6852      	ldr	r2, [r2, #4]
 8005aa2:	0852      	lsrs	r2, r2, #1
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	eb13 0b01 	adds.w	fp, r3, r1
 8005aae:	eb44 0c02 	adc.w	ip, r4, r2
 8005ab2:	4658      	mov	r0, fp
 8005ab4:	4661      	mov	r1, ip
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f04f 0400 	mov.w	r4, #0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	f7fa fb83 	bl	80001cc <__aeabi_uldivmod>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	460c      	mov	r4, r1
 8005aca:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad2:	d308      	bcc.n	8005ae6 <UART_SetConfig+0x3e2>
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ada:	d204      	bcs.n	8005ae6 <UART_SetConfig+0x3e2>
        {
          huart->Instance->BRR = usartdiv;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	60da      	str	r2, [r3, #12]
 8005ae4:	e0b0      	b.n	8005c48 <UART_SetConfig+0x544>
        }
        else
        {
          ret = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	76bb      	strb	r3, [r7, #26]
 8005aea:	e0ad      	b.n	8005c48 <UART_SetConfig+0x544>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af4:	d15c      	bne.n	8005bb0 <UART_SetConfig+0x4ac>
  {
    switch (clocksource)
 8005af6:	7efb      	ldrb	r3, [r7, #27]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d828      	bhi.n	8005b4e <UART_SetConfig+0x44a>
 8005afc:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <UART_SetConfig+0x400>)
 8005afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b02:	bf00      	nop
 8005b04:	08005b29 	.word	0x08005b29
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b39 	.word	0x08005b39
 8005b10:	08005b4f 	.word	0x08005b4f
 8005b14:	08005b3f 	.word	0x08005b3f
 8005b18:	08005b4f 	.word	0x08005b4f
 8005b1c:	08005b4f 	.word	0x08005b4f
 8005b20:	08005b4f 	.word	0x08005b4f
 8005b24:	08005b47 	.word	0x08005b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b28:	f7fd ffb0 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8005b2c:	6178      	str	r0, [r7, #20]
        break;
 8005b2e:	e013      	b.n	8005b58 <UART_SetConfig+0x454>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b30:	f7fd ffc2 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8005b34:	6178      	str	r0, [r7, #20]
        break;
 8005b36:	e00f      	b.n	8005b58 <UART_SetConfig+0x454>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b38:	4b4a      	ldr	r3, [pc, #296]	; (8005c64 <UART_SetConfig+0x560>)
 8005b3a:	617b      	str	r3, [r7, #20]
        break;
 8005b3c:	e00c      	b.n	8005b58 <UART_SetConfig+0x454>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3e:	f7fd ff0f 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 8005b42:	6178      	str	r0, [r7, #20]
        break;
 8005b44:	e008      	b.n	8005b58 <UART_SetConfig+0x454>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4a:	617b      	str	r3, [r7, #20]
        break;
 8005b4c:	e004      	b.n	8005b58 <UART_SetConfig+0x454>
      default:
        pclk = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	76bb      	strb	r3, [r7, #26]
        break;
 8005b56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d074      	beq.n	8005c48 <UART_SetConfig+0x544>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	005a      	lsls	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	441a      	add	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b0f      	cmp	r3, #15
 8005b7a:	d916      	bls.n	8005baa <UART_SetConfig+0x4a6>
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b82:	d212      	bcs.n	8005baa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f023 030f 	bic.w	r3, r3, #15
 8005b8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	085b      	lsrs	r3, r3, #1
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	89fb      	ldrh	r3, [r7, #14]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	89fa      	ldrh	r2, [r7, #14]
 8005ba6:	60da      	str	r2, [r3, #12]
 8005ba8:	e04e      	b.n	8005c48 <UART_SetConfig+0x544>
      }
      else
      {
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	76bb      	strb	r3, [r7, #26]
 8005bae:	e04b      	b.n	8005c48 <UART_SetConfig+0x544>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bb0:	7efb      	ldrb	r3, [r7, #27]
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d827      	bhi.n	8005c06 <UART_SetConfig+0x502>
 8005bb6:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <UART_SetConfig+0x4b8>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005be1 	.word	0x08005be1
 8005bc0:	08005be9 	.word	0x08005be9
 8005bc4:	08005bf1 	.word	0x08005bf1
 8005bc8:	08005c07 	.word	0x08005c07
 8005bcc:	08005bf7 	.word	0x08005bf7
 8005bd0:	08005c07 	.word	0x08005c07
 8005bd4:	08005c07 	.word	0x08005c07
 8005bd8:	08005c07 	.word	0x08005c07
 8005bdc:	08005bff 	.word	0x08005bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be0:	f7fd ff54 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8005be4:	6178      	str	r0, [r7, #20]
        break;
 8005be6:	e013      	b.n	8005c10 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be8:	f7fd ff66 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8005bec:	6178      	str	r0, [r7, #20]
        break;
 8005bee:	e00f      	b.n	8005c10 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf0:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <UART_SetConfig+0x560>)
 8005bf2:	617b      	str	r3, [r7, #20]
        break;
 8005bf4:	e00c      	b.n	8005c10 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf6:	f7fd feb3 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 8005bfa:	6178      	str	r0, [r7, #20]
        break;
 8005bfc:	e008      	b.n	8005c10 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c02:	617b      	str	r3, [r7, #20]
        break;
 8005c04:	e004      	b.n	8005c10 <UART_SetConfig+0x50c>
      default:
        pclk = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	76bb      	strb	r3, [r7, #26]
        break;
 8005c0e:	bf00      	nop
    }

    if (pclk != 0U)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d018      	beq.n	8005c48 <UART_SetConfig+0x544>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	085a      	lsrs	r2, r3, #1
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	441a      	add	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b0f      	cmp	r3, #15
 8005c30:	d908      	bls.n	8005c44 <UART_SetConfig+0x540>
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c38:	d204      	bcs.n	8005c44 <UART_SetConfig+0x540>
      {
        huart->Instance->BRR = usartdiv;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	e001      	b.n	8005c48 <UART_SetConfig+0x544>
      }
      else
      {
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005c54:	7ebb      	ldrb	r3, [r7, #26]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3720      	adds	r7, #32
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005c60:	40008000 	.word	0x40008000
 8005c64:	00f42400 	.word	0x00f42400

08005c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	2bff      	cmp	r3, #255	; 0xff
 8005c76:	d904      	bls.n	8005c82 <UART_AdvFeatureConfig+0x1a>
 8005c78:	f640 41a8 	movw	r1, #3240	; 0xca8
 8005c7c:	489a      	ldr	r0, [pc, #616]	; (8005ee8 <UART_AdvFeatureConfig+0x280>)
 8005c7e:	f7fa fce1 	bl	8000644 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d018      	beq.n	8005cc0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <UART_AdvFeatureConfig+0x42>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c9e:	d004      	beq.n	8005caa <UART_AdvFeatureConfig+0x42>
 8005ca0:	f640 41ad 	movw	r1, #3245	; 0xcad
 8005ca4:	4890      	ldr	r0, [pc, #576]	; (8005ee8 <UART_AdvFeatureConfig+0x280>)
 8005ca6:	f7fa fccd 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d018      	beq.n	8005cfe <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d009      	beq.n	8005ce8 <UART_AdvFeatureConfig+0x80>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cdc:	d004      	beq.n	8005ce8 <UART_AdvFeatureConfig+0x80>
 8005cde:	f640 41b4 	movw	r1, #3252	; 0xcb4
 8005ce2:	4881      	ldr	r0, [pc, #516]	; (8005ee8 <UART_AdvFeatureConfig+0x280>)
 8005ce4:	f7fa fcae 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d018      	beq.n	8005d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <UART_AdvFeatureConfig+0xbe>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d1a:	d004      	beq.n	8005d26 <UART_AdvFeatureConfig+0xbe>
 8005d1c:	f640 41bb 	movw	r1, #3259	; 0xcbb
 8005d20:	4871      	ldr	r0, [pc, #452]	; (8005ee8 <UART_AdvFeatureConfig+0x280>)
 8005d22:	f7fa fc8f 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d018      	beq.n	8005d7a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d009      	beq.n	8005d64 <UART_AdvFeatureConfig+0xfc>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d58:	d004      	beq.n	8005d64 <UART_AdvFeatureConfig+0xfc>
 8005d5a:	f640 41c2 	movw	r1, #3266	; 0xcc2
 8005d5e:	4862      	ldr	r0, [pc, #392]	; (8005ee8 <UART_AdvFeatureConfig+0x280>)
 8005d60:	f7fa fc70 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d018      	beq.n	8005db8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <UART_AdvFeatureConfig+0x13a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d96:	d004      	beq.n	8005da2 <UART_AdvFeatureConfig+0x13a>
 8005d98:	f640 41c9 	movw	r1, #3273	; 0xcc9
 8005d9c:	4852      	ldr	r0, [pc, #328]	; (8005ee8 <UART_AdvFeatureConfig+0x280>)
 8005d9e:	f7fa fc51 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d018      	beq.n	8005df6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d009      	beq.n	8005de0 <UART_AdvFeatureConfig+0x178>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd4:	d004      	beq.n	8005de0 <UART_AdvFeatureConfig+0x178>
 8005dd6:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
 8005dda:	4843      	ldr	r0, [pc, #268]	; (8005ee8 <UART_AdvFeatureConfig+0x280>)
 8005ddc:	f7fa fc32 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d04f      	beq.n	8005ea2 <UART_AdvFeatureConfig+0x23a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a39      	ldr	r2, [pc, #228]	; (8005eec <UART_AdvFeatureConfig+0x284>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d009      	beq.n	8005e20 <UART_AdvFeatureConfig+0x1b8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a37      	ldr	r2, [pc, #220]	; (8005ef0 <UART_AdvFeatureConfig+0x288>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d004      	beq.n	8005e20 <UART_AdvFeatureConfig+0x1b8>
 8005e16:	f640 41d7 	movw	r1, #3287	; 0xcd7
 8005e1a:	4833      	ldr	r0, [pc, #204]	; (8005ee8 <UART_AdvFeatureConfig+0x280>)
 8005e1c:	f7fa fc12 	bl	8000644 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d009      	beq.n	8005e3c <UART_AdvFeatureConfig+0x1d4>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e30:	d004      	beq.n	8005e3c <UART_AdvFeatureConfig+0x1d4>
 8005e32:	f640 41d8 	movw	r1, #3288	; 0xcd8
 8005e36:	482c      	ldr	r0, [pc, #176]	; (8005ee8 <UART_AdvFeatureConfig+0x280>)
 8005e38:	f7fa fc04 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e5a:	d122      	bne.n	8005ea2 <UART_AdvFeatureConfig+0x23a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d013      	beq.n	8005e8c <UART_AdvFeatureConfig+0x224>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e6c:	d00e      	beq.n	8005e8c <UART_AdvFeatureConfig+0x224>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e76:	d009      	beq.n	8005e8c <UART_AdvFeatureConfig+0x224>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e80:	d004      	beq.n	8005e8c <UART_AdvFeatureConfig+0x224>
 8005e82:	f640 41dd 	movw	r1, #3293	; 0xcdd
 8005e86:	4818      	ldr	r0, [pc, #96]	; (8005ee8 <UART_AdvFeatureConfig+0x280>)
 8005e88:	f7fa fbdc 	bl	8000644 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d018      	beq.n	8005ee0 <UART_AdvFeatureConfig+0x278>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d009      	beq.n	8005eca <UART_AdvFeatureConfig+0x262>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ebe:	d004      	beq.n	8005eca <UART_AdvFeatureConfig+0x262>
 8005ec0:	f640 41e5 	movw	r1, #3301	; 0xce5
 8005ec4:	4808      	ldr	r0, [pc, #32]	; (8005ee8 <UART_AdvFeatureConfig+0x280>)
 8005ec6:	f7fa fbbd 	bl	8000644 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	605a      	str	r2, [r3, #4]
  }
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	08007ec0 	.word	0x08007ec0
 8005eec:	40013800 	.word	0x40013800
 8005ef0:	40004400 	.word	0x40004400

08005ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005f02:	f7fa fefb 	bl	8000cfc <HAL_GetTick>
 8005f06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d10e      	bne.n	8005f34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f82a 	bl	8005f7e <UART_WaitOnFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e020      	b.n	8005f76 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d10e      	bne.n	8005f60 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f814 	bl	8005f7e <UART_WaitOnFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e00a      	b.n	8005f76 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	603b      	str	r3, [r7, #0]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f8e:	e05d      	b.n	800604c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d059      	beq.n	800604c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f98:	f7fa feb0 	bl	8000cfc <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d302      	bcc.n	8005fae <UART_WaitOnFlagUntilTimeout+0x30>
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d11b      	bne.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fbc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e042      	b.n	800606c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d02b      	beq.n	800604c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006002:	d123      	bne.n	800604c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800600c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800601c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0201 	bic.w	r2, r2, #1
 800602c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e00f      	b.n	800606c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69da      	ldr	r2, [r3, #28]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4013      	ands	r3, r2
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	429a      	cmp	r2, r3
 800605a:	bf0c      	ite	eq
 800605c:	2301      	moveq	r3, #1
 800605e:	2300      	movne	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	461a      	mov	r2, r3
 8006064:	79fb      	ldrb	r3, [r7, #7]
 8006066:	429a      	cmp	r2, r3
 8006068:	d092      	beq.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800608a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060b4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0201 	bic.w	r2, r2, #1
 80060c4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d11e      	bne.n	8006138 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006110:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006130:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff fac5 	bl	80056c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff fac1 	bl	80056dc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b086      	sub	sp, #24
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006174:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800617a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006186:	2b80      	cmp	r3, #128	; 0x80
 8006188:	d109      	bne.n	800619e <UART_DMAError+0x3c>
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	2b21      	cmp	r3, #33	; 0x21
 800618e:	d106      	bne.n	800619e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2200      	movs	r2, #0
 8006194:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006198:	6978      	ldr	r0, [r7, #20]
 800619a:	f7ff ff6b 	bl	8006074 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d109      	bne.n	80061c0 <UART_DMAError+0x5e>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b22      	cmp	r3, #34	; 0x22
 80061b0:	d106      	bne.n	80061c0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80061ba:	6978      	ldr	r0, [r7, #20]
 80061bc:	f7ff ff6f 	bl	800609e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061c4:	f043 0210 	orr.w	r2, r3, #16
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061cc:	6978      	ldr	r0, [r7, #20]
 80061ce:	f7ff fa8f 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061d2:	bf00      	nop
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f7ff fa79 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800621c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fa42 	bl	80056b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006230:	bf00      	nop
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_DWT_Delay_us>:
/**
 * @brief This function provides a delay (in microseconds)
 * @param microseconds: delay in microseconds
 */
__STATIC_INLINE void HAL_DWT_Delay_us(volatile uint32_t microseconds)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <HAL_DWT_Delay_us+0x3c>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	60fb      	str	r3, [r7, #12]
 /* Go to number of cycles for system */
 microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800625a:	f7fd fc0b 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 800625e:	4602      	mov	r2, r0
 8006260:	4b0a      	ldr	r3, [pc, #40]	; (800628c <HAL_DWT_Delay_us+0x40>)
 8006262:	fba3 2302 	umull	r2, r3, r3, r2
 8006266:	0c9b      	lsrs	r3, r3, #18
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	fb02 f303 	mul.w	r3, r2, r3
 800626e:	607b      	str	r3, [r7, #4]
 /* Delay till end */
 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8006270:	bf00      	nop
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <HAL_DWT_Delay_us+0x3c>)
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	1ad2      	subs	r2, r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d3f8      	bcc.n	8006272 <HAL_DWT_Delay_us+0x26>
}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	e0001000 	.word	0xe0001000
 800628c:	431bde83 	.word	0x431bde83

08006290 <HAL_GPIO_EXTI_Callback>:
 * 			(3) External Interrupt Mode with rising edge trigger detection enabled
 * 			for OLED_GPIO_FR_Pin (PB0).<br>
 * 			(4) NVIC for EXTI line[0] interrupts enabled.<br>
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==OLED_FR_Pin)
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d10a      	bne.n	80062b6 <HAL_GPIO_EXTI_Callback+0x26>
	{
		// FR signal synchronized
		// Copy frame buffer to GDDRAM on-the-spot of this interrupt callback if there is pending data to flush
		if(fb_flush_pending_get()){
 80062a0:	f000 fb84 	bl	80069ac <fb_flush_pending_get>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <HAL_GPIO_EXTI_Callback+0x32>
			fb_spi_transfer(fb_flush_area);
 80062aa:	4b08      	ldr	r3, [pc, #32]	; (80062cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80062ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80062b0:	f000 fac4 	bl	800683c <fb_spi_transfer>
	{
		//Set flag for ssd7317_get_gesture() on a valid touch event.
		//Polling ssd7317_get_gesture() is required in non-RTOS environment.
		touch_event_set();
	}
}
 80062b4:	e005      	b.n	80062c2 <HAL_GPIO_EXTI_Callback+0x32>
	else if (GPIO_Pin==TCH_IRQ_Pin)
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062bc:	d101      	bne.n	80062c2 <HAL_GPIO_EXTI_Callback+0x32>
		touch_event_set();
 80062be:	f000 fd79 	bl	8006db4 <touch_event_set>
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000168 	.word	0x20000168

080062d0 <ssd7317_init>:
 *
 * 				ssd7317_init();	//OLED display On after this function
 * 			}
 * @endcode
 */
void ssd7317_init(void){
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
	/*(1)Configure GPIO pins for display and touch interfaces*/
	MX_GPIO_Init();
 80062d6:	f000 f84b 	bl	8006370 <MX_GPIO_Init>
	/*(2)Enable DMA for SPI*/
#ifdef USE_SPI_DMA
	MX_DMA_Init();
#endif
	/*(3)Initialize SPI interface for the display part*/
	MX_SPI1_Init();
 80062da:	f000 f8cd 	bl	8006478 <MX_SPI1_Init>
	/*(4)Initialize I2C interface for touch*/
	MX_I2C1_Init();
 80062de:	f000 f909 	bl	80064f4 <MX_I2C1_Init>

	/*(6)Send initialization commands through SPI according to data sheet except 0xaf*/
	spi_write_command((const uint8_t*)SSD7317_INIT_TBL, sizeof(SSD7317_INIT_TBL));
 80062e2:	212b      	movs	r1, #43	; 0x2b
 80062e4:	4816      	ldr	r0, [pc, #88]	; (8006340 <ssd7317_init+0x70>)
 80062e6:	f000 f945 	bl	8006574 <spi_write_command>

	/*(7) Hw reset for touch screen*/
	HAL_GPIO_WritePin(TCH_TRES_GPIO_Port, TCH_TRES_Pin, GPIO_PIN_RESET);
 80062ea:	2200      	movs	r2, #0
 80062ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062f4:	f7fb fc26 	bl	8001b44 <HAL_GPIO_WritePin>
	/*TRES set low for 1ms*/
	HAL_Delay(1);
 80062f8:	2001      	movs	r0, #1
 80062fa:	f7fa fd0b 	bl	8000d14 <HAL_Delay>
	/*TRES pin set high for normal operation*/
	HAL_GPIO_WritePin(TCH_TRES_GPIO_Port, TCH_TRES_Pin, GPIO_PIN_SET);
 80062fe:	2201      	movs	r2, #1
 8006300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006308:	f7fb fc1c 	bl	8001b44 <HAL_GPIO_WritePin>

	/*(8)Clear frame buffer and copy full screen to GDDRAM by non-DMA.
	 * No sync with FR should be implemented because SSD7317 not switched on yet -> no FR signal
	 * */
	rect_t screen = {0,0,OLED_HOR_RES-1,OLED_VER_RES-1};
 800630c:	4a0d      	ldr	r2, [pc, #52]	; (8006344 <ssd7317_init+0x74>)
 800630e:	463b      	mov	r3, r7
 8006310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006314:	e883 0003 	stmia.w	r3, {r0, r1}
	fb_clear(screen, BLACK);
 8006318:	2200      	movs	r2, #0
 800631a:	463b      	mov	r3, r7
 800631c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006320:	f000 fa4e 	bl	80067c0 <fb_clear>
	spi_write_data((const uint8_t *)&frame_buffer[0], (sizeof(frame_buffer)/sizeof(color_t)));
 8006324:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006328:	4807      	ldr	r0, [pc, #28]	; (8006348 <ssd7317_init+0x78>)
 800632a:	f000 f947 	bl	80065bc <spi_write_data>

	/*(9)Display ON for OLED (12V VCC on and send over command 0xaf)*/
	ssd7317_display_on();
 800632e:	f000 f80d 	bl	800634c <ssd7317_display_on>

	/*(10)Initialization for the touch controller*/
	touch_init();
 8006332:	f000 fc23 	bl	8006b7c <touch_init>
}
 8006336:	bf00      	nop
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	08008dec 	.word	0x08008dec
 8006344:	08007efc 	.word	0x08007efc
 8006348:	2000048c 	.word	0x2000048c

0800634c <ssd7317_display_on>:
/**
 *@brief
 *\b	Description:<br>
 *	Enable 12V VCC and then switch OLED On with command 0xAF.
 */
void ssd7317_display_on(void){
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
	const uint8_t cmd[1]={0xaf};
 8006352:	23af      	movs	r3, #175	; 0xaf
 8006354:	713b      	strb	r3, [r7, #4]

	/*Software delay 1ms for VCC ramp up*/
	HAL_Delay(1);
 8006356:	2001      	movs	r0, #1
 8006358:	f7fa fcdc 	bl	8000d14 <HAL_Delay>

	/*Send display ON command*/
	spi_write_command((const uint8_t*)cmd, 1);
 800635c:	1d3b      	adds	r3, r7, #4
 800635e:	2101      	movs	r1, #1
 8006360:	4618      	mov	r0, r3
 8006362:	f000 f907 	bl	8006574 <spi_write_command>
}
 8006366:	bf00      	nop
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <MX_GPIO_Init>:
  * 		Direct copy from STM32CubeIDE Code Generation utility.
  * @param 	None
  * @return None
  */
static void MX_GPIO_Init(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006376:	f107 030c 	add.w	r3, r7, #12
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	605a      	str	r2, [r3, #4]
 8006380:	609a      	str	r2, [r3, #8]
 8006382:	60da      	str	r2, [r3, #12]
 8006384:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006386:	4b38      	ldr	r3, [pc, #224]	; (8006468 <MX_GPIO_Init+0xf8>)
 8006388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638a:	4a37      	ldr	r2, [pc, #220]	; (8006468 <MX_GPIO_Init+0xf8>)
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006392:	4b35      	ldr	r3, [pc, #212]	; (8006468 <MX_GPIO_Init+0xf8>)
 8006394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	60bb      	str	r3, [r7, #8]
 800639c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800639e:	4b32      	ldr	r3, [pc, #200]	; (8006468 <MX_GPIO_Init+0xf8>)
 80063a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a2:	4a31      	ldr	r2, [pc, #196]	; (8006468 <MX_GPIO_Init+0xf8>)
 80063a4:	f043 0302 	orr.w	r3, r3, #2
 80063a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063aa:	4b2f      	ldr	r3, [pc, #188]	; (8006468 <MX_GPIO_Init+0xf8>)
 80063ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	607b      	str	r3, [r7, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, TCH_TRES_Pin, GPIO_PIN_SET);
 80063b6:	2201      	movs	r2, #1
 80063b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063c0:	f7fb fbc0 	bl	8001b44 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80063c4:	2200      	movs	r2, #0
 80063c6:	2102      	movs	r1, #2
 80063c8:	4828      	ldr	r0, [pc, #160]	; (800646c <MX_GPIO_Init+0xfc>)
 80063ca:	f7fb fbbb 	bl	8001b44 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : OLED_FR_Pin */
	  GPIO_InitStruct.Pin = OLED_FR_Pin;
 80063ce:	2301      	movs	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80063d2:	4b27      	ldr	r3, [pc, #156]	; (8006470 <MX_GPIO_Init+0x100>)
 80063d4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063d6:	2301      	movs	r3, #1
 80063d8:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(OLED_FR_GPIO_Port, &GPIO_InitStruct);
 80063da:	f107 030c 	add.w	r3, r7, #12
 80063de:	4619      	mov	r1, r3
 80063e0:	4822      	ldr	r0, [pc, #136]	; (800646c <MX_GPIO_Init+0xfc>)
 80063e2:	f7fb f989 	bl	80016f8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : OLED_DC_Pin */
	  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80063e6:	2302      	movs	r3, #2
 80063e8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063ea:	2301      	movs	r3, #1
 80063ec:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063f2:	2302      	movs	r3, #2
 80063f4:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80063f6:	f107 030c 	add.w	r3, r7, #12
 80063fa:	4619      	mov	r1, r3
 80063fc:	481b      	ldr	r0, [pc, #108]	; (800646c <MX_GPIO_Init+0xfc>)
 80063fe:	f7fb f97b 	bl	80016f8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : TCH_TRES_Pin */
	  GPIO_InitStruct.Pin = TCH_TRES_Pin;
 8006402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006406:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006408:	2301      	movs	r3, #1
 800640a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800640c:	2301      	movs	r3, #1
 800640e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006410:	2300      	movs	r3, #0
 8006412:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(TCH_TRES_GPIO_Port, &GPIO_InitStruct);
 8006414:	f107 030c 	add.w	r3, r7, #12
 8006418:	4619      	mov	r1, r3
 800641a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800641e:	f7fb f96b 	bl	80016f8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : TCH_IRQ_Pin */
	  GPIO_InitStruct.Pin = TCH_IRQ_Pin;
 8006422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006426:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006428:	4b12      	ldr	r3, [pc, #72]	; (8006474 <MX_GPIO_Init+0x104>)
 800642a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800642c:	2301      	movs	r3, #1
 800642e:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(TCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8006430:	f107 030c 	add.w	r3, r7, #12
 8006434:	4619      	mov	r1, r3
 8006436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800643a:	f7fb f95d 	bl	80016f8 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800643e:	2200      	movs	r2, #0
 8006440:	2100      	movs	r1, #0
 8006442:	2006      	movs	r0, #6
 8006444:	f7fa fd78 	bl	8000f38 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006448:	2006      	movs	r0, #6
 800644a:	f7fa fda1 	bl	8000f90 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800644e:	2200      	movs	r2, #0
 8006450:	2100      	movs	r1, #0
 8006452:	2028      	movs	r0, #40	; 0x28
 8006454:	f7fa fd70 	bl	8000f38 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006458:	2028      	movs	r0, #40	; 0x28
 800645a:	f7fa fd99 	bl	8000f90 <HAL_NVIC_EnableIRQ>
}
 800645e:	bf00      	nop
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40021000 	.word	0x40021000
 800646c:	48000400 	.word	0x48000400
 8006470:	10110000 	.word	0x10110000
 8006474:	10210000 	.word	0x10210000

08006478 <MX_SPI1_Init>:
  * 		Direct copy from STM32CubeIDE Code Generation utility.
  * @param 	None
  * @return None
  */
static void MX_SPI1_Init(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800647c:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <MX_SPI1_Init+0x74>)
 800647e:	4a1c      	ldr	r2, [pc, #112]	; (80064f0 <MX_SPI1_Init+0x78>)
 8006480:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8006482:	4b1a      	ldr	r3, [pc, #104]	; (80064ec <MX_SPI1_Init+0x74>)
 8006484:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006488:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800648a:	4b18      	ldr	r3, [pc, #96]	; (80064ec <MX_SPI1_Init+0x74>)
 800648c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006490:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006492:	4b16      	ldr	r3, [pc, #88]	; (80064ec <MX_SPI1_Init+0x74>)
 8006494:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006498:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800649a:	4b14      	ldr	r3, [pc, #80]	; (80064ec <MX_SPI1_Init+0x74>)
 800649c:	2200      	movs	r2, #0
 800649e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80064a0:	4b12      	ldr	r3, [pc, #72]	; (80064ec <MX_SPI1_Init+0x74>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <MX_SPI1_Init+0x74>)
 80064a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80064ac:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064ae:	4b0f      	ldr	r3, [pc, #60]	; (80064ec <MX_SPI1_Init+0x74>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80064b4:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <MX_SPI1_Init+0x74>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80064ba:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <MX_SPI1_Init+0x74>)
 80064bc:	2200      	movs	r2, #0
 80064be:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <MX_SPI1_Init+0x74>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80064c6:	4b09      	ldr	r3, [pc, #36]	; (80064ec <MX_SPI1_Init+0x74>)
 80064c8:	2207      	movs	r2, #7
 80064ca:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80064cc:	4b07      	ldr	r3, [pc, #28]	; (80064ec <MX_SPI1_Init+0x74>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80064d2:	4b06      	ldr	r3, [pc, #24]	; (80064ec <MX_SPI1_Init+0x74>)
 80064d4:	2208      	movs	r2, #8
 80064d6:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80064d8:	4804      	ldr	r0, [pc, #16]	; (80064ec <MX_SPI1_Init+0x74>)
 80064da:	f7fe f841 	bl	8004560 <HAL_SPI_Init>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <MX_SPI1_Init+0x70>
	{
		Error_Handler();
 80064e4:	f7fa f8a7 	bl	8000636 <Error_Handler>
	}
}
 80064e8:	bf00      	nop
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	200000b8 	.word	0x200000b8
 80064f0:	40013000 	.word	0x40013000

080064f4 <MX_I2C1_Init>:
  * 		Direct copy from STM32CubeIDE Code Generation utility.
  * @param 	None
  * @return None
  */
static void MX_I2C1_Init(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80064f8:	4b1b      	ldr	r3, [pc, #108]	; (8006568 <MX_I2C1_Init+0x74>)
 80064fa:	4a1c      	ldr	r2, [pc, #112]	; (800656c <MX_I2C1_Init+0x78>)
 80064fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80064fe:	4b1a      	ldr	r3, [pc, #104]	; (8006568 <MX_I2C1_Init+0x74>)
 8006500:	4a1b      	ldr	r2, [pc, #108]	; (8006570 <MX_I2C1_Init+0x7c>)
 8006502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006504:	4b18      	ldr	r3, [pc, #96]	; (8006568 <MX_I2C1_Init+0x74>)
 8006506:	2200      	movs	r2, #0
 8006508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800650a:	4b17      	ldr	r3, [pc, #92]	; (8006568 <MX_I2C1_Init+0x74>)
 800650c:	2201      	movs	r2, #1
 800650e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006510:	4b15      	ldr	r3, [pc, #84]	; (8006568 <MX_I2C1_Init+0x74>)
 8006512:	2200      	movs	r2, #0
 8006514:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <MX_I2C1_Init+0x74>)
 8006518:	2200      	movs	r2, #0
 800651a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800651c:	4b12      	ldr	r3, [pc, #72]	; (8006568 <MX_I2C1_Init+0x74>)
 800651e:	2200      	movs	r2, #0
 8006520:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006522:	4b11      	ldr	r3, [pc, #68]	; (8006568 <MX_I2C1_Init+0x74>)
 8006524:	2200      	movs	r2, #0
 8006526:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006528:	4b0f      	ldr	r3, [pc, #60]	; (8006568 <MX_I2C1_Init+0x74>)
 800652a:	2200      	movs	r2, #0
 800652c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800652e:	480e      	ldr	r0, [pc, #56]	; (8006568 <MX_I2C1_Init+0x74>)
 8006530:	f7fb fb50 	bl	8001bd4 <HAL_I2C_Init>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <MX_I2C1_Init+0x4a>
  {
	  Error_Handler();
 800653a:	f7fa f87c 	bl	8000636 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800653e:	2100      	movs	r1, #0
 8006540:	4809      	ldr	r0, [pc, #36]	; (8006568 <MX_I2C1_Init+0x74>)
 8006542:	f7fc f9d7 	bl	80028f4 <HAL_I2CEx_ConfigAnalogFilter>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <MX_I2C1_Init+0x5c>
  {
	  Error_Handler();
 800654c:	f7fa f873 	bl	8000636 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006550:	2100      	movs	r1, #0
 8006552:	4805      	ldr	r0, [pc, #20]	; (8006568 <MX_I2C1_Init+0x74>)
 8006554:	f7fc fa36 	bl	80029c4 <HAL_I2CEx_ConfigDigitalFilter>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <MX_I2C1_Init+0x6e>
  {
	  Error_Handler();
 800655e:	f7fa f86a 	bl	8000636 <Error_Handler>
  }
}
 8006562:	bf00      	nop
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	2000011c 	.word	0x2000011c
 800656c:	40005400 	.word	0x40005400
 8006570:	00707cbb 	.word	0x00707cbb

08006574 <spi_write_command>:
  * @brief 	SPI command write (non-DMA).
  * @param 	*command points to the command array to send.
  * @param	len is the data length in byte.
  * @return None
  */
void spi_write_command(const uint8_t *command, uint16_t len){
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	807b      	strh	r3, [r7, #2]

	/*DC pin set low for command send*/
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8006580:	2200      	movs	r2, #0
 8006582:	2102      	movs	r1, #2
 8006584:	480b      	ldr	r0, [pc, #44]	; (80065b4 <spi_write_command+0x40>)
 8006586:	f7fb fadd 	bl	8001b44 <HAL_GPIO_WritePin>

	/*SPI send with non-DMA method = blocking transfer*/
	HAL_StatusTypeDef err = HAL_SPI_Transmit(&hspi1, (uint8_t *)command, len, 10);
 800658a:	887a      	ldrh	r2, [r7, #2]
 800658c:	230a      	movs	r3, #10
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4809      	ldr	r0, [pc, #36]	; (80065b8 <spi_write_command+0x44>)
 8006592:	f7fe f9cb 	bl	800492c <HAL_SPI_Transmit>
 8006596:	4603      	mov	r3, r0
 8006598:	73fb      	strb	r3, [r7, #15]

	switch(err){
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d002      	beq.n	80065a6 <spi_write_command+0x32>
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d000      	beq.n	80065a6 <spi_write_command+0x32>
		case HAL_TIMEOUT:
		case HAL_ERROR:
			Error_Handler();
		break;
		default:
		break;
 80065a4:	e002      	b.n	80065ac <spi_write_command+0x38>
			Error_Handler();
 80065a6:	f7fa f846 	bl	8000636 <Error_Handler>
		break;
 80065aa:	bf00      	nop
	}
}
 80065ac:	bf00      	nop
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	48000400 	.word	0x48000400
 80065b8:	200000b8 	.word	0x200000b8

080065bc <spi_write_data>:
  * @brief 	SPI data write (non-DMA).
  * @param 	*data points to the data array to send.
  * @param	len is the data length in byte.
  * @return 	None
  */
void spi_write_data(const uint8_t *data, uint16_t len){
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]

	/*DC pin set high for data send in next SPI transfer*/
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 80065c8:	2201      	movs	r2, #1
 80065ca:	2102      	movs	r1, #2
 80065cc:	480b      	ldr	r0, [pc, #44]	; (80065fc <spi_write_data+0x40>)
 80065ce:	f7fb fab9 	bl	8001b44 <HAL_GPIO_WritePin>

	/*SPI send (non-DMA) = blocking function*/
	HAL_StatusTypeDef err = HAL_SPI_Transmit(&hspi1, (uint8_t *)data, len, 10);
 80065d2:	887a      	ldrh	r2, [r7, #2]
 80065d4:	230a      	movs	r3, #10
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	4809      	ldr	r0, [pc, #36]	; (8006600 <spi_write_data+0x44>)
 80065da:	f7fe f9a7 	bl	800492c <HAL_SPI_Transmit>
 80065de:	4603      	mov	r3, r0
 80065e0:	73fb      	strb	r3, [r7, #15]

	switch(err){
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d002      	beq.n	80065ee <spi_write_data+0x32>
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d000      	beq.n	80065ee <spi_write_data+0x32>
		case HAL_TIMEOUT:
		case HAL_ERROR:
			Error_Handler();
		break;
		default:
		break;
 80065ec:	e002      	b.n	80065f4 <spi_write_data+0x38>
			Error_Handler();
 80065ee:	f7fa f822 	bl	8000636 <Error_Handler>
		break;
 80065f2:	bf00      	nop
	}
}
 80065f4:	bf00      	nop
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	48000400 	.word	0x48000400
 8006600:	200000b8 	.word	0x200000b8

08006604 <fb_set_pixel>:
 * @param x is the x-coordinate
 * @param y is the y-coordinate
 * @param color is WHITE/BLACK
 */
static void fb_set_pixel(int16_t x, int16_t y, color_t color)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	80fb      	strh	r3, [r7, #6]
 800660e:	460b      	mov	r3, r1
 8006610:	80bb      	strh	r3, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	70fb      	strb	r3, [r7, #3]
	if(color==WHITE)
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d127      	bne.n	800666c <fb_set_pixel+0x68>
		frame_buffer[BUFIDX(x,y)] |= PIXIDX(x);
 800661c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006620:	10db      	asrs	r3, r3, #3
 8006622:	b21b      	sxth	r3, r3
 8006624:	4619      	mov	r1, r3
 8006626:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	440b      	add	r3, r1
 8006634:	4a25      	ldr	r2, [pc, #148]	; (80066cc <fb_set_pixel+0xc8>)
 8006636:	5cd3      	ldrb	r3, [r2, r3]
 8006638:	b25a      	sxtb	r2, r3
 800663a:	88fb      	ldrh	r3, [r7, #6]
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	2101      	movs	r1, #1
 8006642:	fa01 f303 	lsl.w	r3, r1, r3
 8006646:	b25b      	sxtb	r3, r3
 8006648:	4313      	orrs	r3, r2
 800664a:	b259      	sxtb	r1, r3
 800664c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006650:	10db      	asrs	r3, r3, #3
 8006652:	b21b      	sxth	r3, r3
 8006654:	4618      	mov	r0, r3
 8006656:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800665a:	4613      	mov	r3, r2
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4403      	add	r3, r0
 8006664:	b2c9      	uxtb	r1, r1
 8006666:	4a19      	ldr	r2, [pc, #100]	; (80066cc <fb_set_pixel+0xc8>)
 8006668:	54d1      	strb	r1, [r2, r3]
	else
		frame_buffer[BUFIDX(x,y)] &= ~PIXIDX(x);
}
 800666a:	e028      	b.n	80066be <fb_set_pixel+0xba>
		frame_buffer[BUFIDX(x,y)] &= ~PIXIDX(x);
 800666c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006670:	10db      	asrs	r3, r3, #3
 8006672:	b21b      	sxth	r3, r3
 8006674:	4619      	mov	r1, r3
 8006676:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	4a11      	ldr	r2, [pc, #68]	; (80066cc <fb_set_pixel+0xc8>)
 8006686:	5cd3      	ldrb	r3, [r2, r3]
 8006688:	b25a      	sxtb	r2, r3
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	2101      	movs	r1, #1
 8006692:	fa01 f303 	lsl.w	r3, r1, r3
 8006696:	b25b      	sxtb	r3, r3
 8006698:	43db      	mvns	r3, r3
 800669a:	b25b      	sxtb	r3, r3
 800669c:	4013      	ands	r3, r2
 800669e:	b259      	sxtb	r1, r3
 80066a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066a4:	10db      	asrs	r3, r3, #3
 80066a6:	b21b      	sxth	r3, r3
 80066a8:	4618      	mov	r0, r3
 80066aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80066ae:	4613      	mov	r3, r2
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4403      	add	r3, r0
 80066b8:	b2c9      	uxtb	r1, r1
 80066ba:	4a04      	ldr	r2, [pc, #16]	; (80066cc <fb_set_pixel+0xc8>)
 80066bc:	54d1      	strb	r1, [r2, r3]
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	2000048c 	.word	0x2000048c

080066d0 <fb_fill_area>:
 *	No SPI transfer is called yet. Only frame buffer operation invoked.
 * @param area is the area to fill with (x1,y1) the top left and (x2,y2) the lower right corner (inclusive)
 * @param color is a pointer to the pattern in non-volatile media i.e. MCU's Flash
 */
static void fb_fill_area(rect_t area, const color_t* color, bool negative)
{
 80066d0:	b590      	push	{r4, r7, lr}
 80066d2:	b089      	sub	sp, #36	; 0x24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	f107 0408 	add.w	r4, r7, #8
 80066da:	e884 0003 	stmia.w	r4, {r0, r1}
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	70fb      	strb	r3, [r7, #3]
				frame_buffer[page]|= color[index++];
			}
		}
	}
	*/
	uint16_t width_in_byte = ((area.x2-area.x1+1) +7)>>3;
 80066e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80066e6:	461a      	mov	r2, r3
 80066e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	3308      	adds	r3, #8
 80066f0:	10db      	asrs	r3, r3, #3
 80066f2:	833b      	strh	r3, [r7, #24]
	uint8_t  pixel, bit_position;
	color_t _color;

	for(uint16_t y=0; y<(area.y2-area.y1+1); y++){
 80066f4:	2300      	movs	r3, #0
 80066f6:	83bb      	strh	r3, [r7, #28]
 80066f8:	e053      	b.n	80067a2 <fb_fill_area+0xd2>
		for(uint16_t x=0; x<(area.x2-area.x1+1); x++){
 80066fa:	2300      	movs	r3, #0
 80066fc:	837b      	strh	r3, [r7, #26]
 80066fe:	e043      	b.n	8006788 <fb_fill_area+0xb8>
			pixel = color[(y*width_in_byte) + BUFIDX(x,0)];
 8006700:	8bbb      	ldrh	r3, [r7, #28]
 8006702:	8b3a      	ldrh	r2, [r7, #24]
 8006704:	fb02 f303 	mul.w	r3, r2, r3
 8006708:	8b7a      	ldrh	r2, [r7, #26]
 800670a:	08d2      	lsrs	r2, r2, #3
 800670c:	b292      	uxth	r2, r2
 800670e:	4413      	add	r3, r2
 8006710:	461a      	mov	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4413      	add	r3, r2
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	75fb      	strb	r3, [r7, #23]
			//pixel = BIT_REVERSE(pixel); //if there is no software setup to flip the bit, uncomment this line
			bit_position = x%8;
 800671a:	8b7b      	ldrh	r3, [r7, #26]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	75bb      	strb	r3, [r7, #22]
			pixel = pixel>>bit_position; //right shift to the lowest bit for comparison
 8006724:	7dfa      	ldrb	r2, [r7, #23]
 8006726:	7dbb      	ldrb	r3, [r7, #22]
 8006728:	fa42 f303 	asr.w	r3, r2, r3
 800672c:	75fb      	strb	r3, [r7, #23]

			//Image inverse can be implemented by swapping WHITE and BLACK
			if(negative){
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <fb_fill_area+0x7a>
				(pixel&0x01)?(_color=BLACK):(_color=WHITE);
 8006734:	7dfb      	ldrb	r3, [r7, #23]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <fb_fill_area+0x74>
 800673e:	2300      	movs	r3, #0
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e00c      	b.n	800675e <fb_fill_area+0x8e>
 8006744:	2301      	movs	r3, #1
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e009      	b.n	800675e <fb_fill_area+0x8e>
			}else{
				(pixel&0x01)?(_color=WHITE):(_color=BLACK);
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <fb_fill_area+0x8a>
 8006754:	2301      	movs	r3, #1
 8006756:	77fb      	strb	r3, [r7, #31]
 8006758:	e001      	b.n	800675e <fb_fill_area+0x8e>
 800675a:	2300      	movs	r3, #0
 800675c:	77fb      	strb	r3, [r7, #31]
			}
				fb_set_pixel(area.x1+x, area.y1+y, _color);
 800675e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006762:	b29a      	uxth	r2, r3
 8006764:	8b7b      	ldrh	r3, [r7, #26]
 8006766:	4413      	add	r3, r2
 8006768:	b29b      	uxth	r3, r3
 800676a:	b218      	sxth	r0, r3
 800676c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006770:	b29a      	uxth	r2, r3
 8006772:	8bbb      	ldrh	r3, [r7, #28]
 8006774:	4413      	add	r3, r2
 8006776:	b29b      	uxth	r3, r3
 8006778:	b21b      	sxth	r3, r3
 800677a:	7ffa      	ldrb	r2, [r7, #31]
 800677c:	4619      	mov	r1, r3
 800677e:	f7ff ff41 	bl	8006604 <fb_set_pixel>
		for(uint16_t x=0; x<(area.x2-area.x1+1); x++){
 8006782:	8b7b      	ldrh	r3, [r7, #26]
 8006784:	3301      	adds	r3, #1
 8006786:	837b      	strh	r3, [r7, #26]
 8006788:	8b7a      	ldrh	r2, [r7, #26]
 800678a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800678e:	4619      	mov	r1, r3
 8006790:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006794:	1acb      	subs	r3, r1, r3
 8006796:	3301      	adds	r3, #1
 8006798:	429a      	cmp	r2, r3
 800679a:	dbb1      	blt.n	8006700 <fb_fill_area+0x30>
	for(uint16_t y=0; y<(area.y2-area.y1+1); y++){
 800679c:	8bbb      	ldrh	r3, [r7, #28]
 800679e:	3301      	adds	r3, #1
 80067a0:	83bb      	strh	r3, [r7, #28]
 80067a2:	8bba      	ldrh	r2, [r7, #28]
 80067a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067a8:	4619      	mov	r1, r3
 80067aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80067ae:	1acb      	subs	r3, r1, r3
 80067b0:	3301      	adds	r3, #1
 80067b2:	429a      	cmp	r2, r3
 80067b4:	dba1      	blt.n	80066fa <fb_fill_area+0x2a>
		}
	}
}
 80067b6:	bf00      	nop
 80067b8:	3724      	adds	r7, #36	; 0x24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd90      	pop	{r4, r7, pc}
	...

080067c0 <fb_clear>:
  * @param	area to fill in frame buffer
  * @param 	color_t color is WHITE or BLACK
  * @return None
  */
static void fb_clear(rect_t area, color_t color)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	f107 0308 	add.w	r3, r7, #8
 80067ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80067ce:	4613      	mov	r3, r2
 80067d0:	71fb      	strb	r3, [r7, #7]
	color_t _color=0xff;
 80067d2:	23ff      	movs	r3, #255	; 0xff
 80067d4:	75fb      	strb	r3, [r7, #23]

	if(color==BLACK){
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <fb_clear+0x20>
		_color=0x00;
 80067dc:	2300      	movs	r3, #0
 80067de:	75fb      	strb	r3, [r7, #23]
	}

	for(uint16_t y=area.y1; y<=area.y2; y++)
 80067e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80067e4:	82bb      	strh	r3, [r7, #20]
 80067e6:	e01b      	b.n	8006820 <fb_clear+0x60>
	{
		for(uint16_t x=area.x1; x<=area.x2; x+=8)
 80067e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80067ec:	827b      	strh	r3, [r7, #18]
 80067ee:	e00f      	b.n	8006810 <fb_clear+0x50>
		{
			frame_buffer[BUFIDX(x,y)] = _color;
 80067f0:	8a7b      	ldrh	r3, [r7, #18]
 80067f2:	08db      	lsrs	r3, r3, #3
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	4619      	mov	r1, r3
 80067f8:	8aba      	ldrh	r2, [r7, #20]
 80067fa:	4613      	mov	r3, r2
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	440b      	add	r3, r1
 8006804:	490c      	ldr	r1, [pc, #48]	; (8006838 <fb_clear+0x78>)
 8006806:	7dfa      	ldrb	r2, [r7, #23]
 8006808:	54ca      	strb	r2, [r1, r3]
		for(uint16_t x=area.x1; x<=area.x2; x+=8)
 800680a:	8a7b      	ldrh	r3, [r7, #18]
 800680c:	3308      	adds	r3, #8
 800680e:	827b      	strh	r3, [r7, #18]
 8006810:	8a7b      	ldrh	r3, [r7, #18]
 8006812:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006816:	4293      	cmp	r3, r2
 8006818:	ddea      	ble.n	80067f0 <fb_clear+0x30>
	for(uint16_t y=area.y1; y<=area.y2; y++)
 800681a:	8abb      	ldrh	r3, [r7, #20]
 800681c:	3301      	adds	r3, #1
 800681e:	82bb      	strh	r3, [r7, #20]
 8006820:	8abb      	ldrh	r3, [r7, #20]
 8006822:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006826:	4293      	cmp	r3, r2
 8006828:	ddde      	ble.n	80067e8 <fb_clear+0x28>
		}
	}
}
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	2000048c 	.word	0x2000048c

0800683c <fb_spi_transfer>:
  * \b	Description:<br>
  * 	Fill GDDRAM of OLED with frame buffer content by SPI transfers<br>
  * @param	area is the content in frame buffer to copy to GDDRAM
  */
static void fb_spi_transfer(rect_t area)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	463b      	mov	r3, r7
 8006844:	e883 0003 	stmia.w	r3, {r0, r1}
	/*avoid running outside array index, may use assert here*/
	if(	area.y1>(OLED_VER_RES-1)|| area.y2>(OLED_VER_RES-1) || area.x2>(OLED_HOR_RES-1))
 8006848:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800684c:	2b7f      	cmp	r3, #127	; 0x7f
 800684e:	dc07      	bgt.n	8006860 <fb_spi_transfer+0x24>
 8006850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006854:	2b7f      	cmp	r3, #127	; 0x7f
 8006856:	dc03      	bgt.n	8006860 <fb_spi_transfer+0x24>
 8006858:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800685c:	2b5f      	cmp	r3, #95	; 0x5f
 800685e:	dd05      	ble.n	800686c <fb_spi_transfer+0x30>
	{
#ifdef  USE_FULL_ASSERT
		assert_failed((uint8_t *)__FILE__,__LINE__);
 8006860:	f240 319f 	movw	r1, #927	; 0x39f
 8006864:	482a      	ldr	r0, [pc, #168]	; (8006910 <fb_spi_transfer+0xd4>)
 8006866:	f7f9 feed 	bl	8000644 <assert_failed>
 800686a:	e04d      	b.n	8006908 <fb_spi_transfer+0xcc>
#endif
		return;
	}

	/*Set segment address with command {0x21, start SEG, end SEG}*/
	uint8_t cmd[3] = {0x21, (uint8_t)area.y1, (uint8_t)area.y2};
 800686c:	2321      	movs	r3, #33	; 0x21
 800686e:	723b      	strb	r3, [r7, #8]
 8006870:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	727b      	strb	r3, [r7, #9]
 8006878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	72bb      	strb	r3, [r7, #10]
	spi_write_command((const uint8_t *)&cmd, 3);
 8006880:	f107 0308 	add.w	r3, r7, #8
 8006884:	2103      	movs	r1, #3
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fe74 	bl	8006574 <spi_write_command>

	/*Set page address with command {0x22, start PAGE=0, end PAGE=11(for 96*128 OLED resolution)}*/
	cmd[0] = 0x22;
 800688c:	2322      	movs	r3, #34	; 0x22
 800688e:	723b      	strb	r3, [r7, #8]
	cmd[1] = BUFIDX(0,0);
 8006890:	2300      	movs	r3, #0
 8006892:	727b      	strb	r3, [r7, #9]
	cmd[2] = BUFIDX((OLED_HOR_RES-1),0);
 8006894:	230b      	movs	r3, #11
 8006896:	72bb      	strb	r3, [r7, #10]
	spi_write_command((const uint8_t *)&cmd, 3);
 8006898:	f107 0308 	add.w	r3, r7, #8
 800689c:	2103      	movs	r1, #3
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff fe68 	bl	8006574 <spi_write_command>

	uint16_t length = (area.y2-area.y1+1)*(cmd[2]-cmd[1]+1);
 80068a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068a8:	461a      	mov	r2, r3
 80068aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	3301      	adds	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	7abb      	ldrb	r3, [r7, #10]
 80068b6:	4619      	mov	r1, r3
 80068b8:	7a7b      	ldrb	r3, [r7, #9]
 80068ba:	1acb      	subs	r3, r1, r3
 80068bc:	3301      	adds	r3, #1
 80068be:	b29b      	uxth	r3, r3
 80068c0:	fb12 f303 	smulbb	r3, r2, r3
 80068c4:	81fb      	strh	r3, [r7, #14]
	/*DC pin set high for data send in next SPI transfer*/
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 80068c6:	2201      	movs	r2, #1
 80068c8:	2102      	movs	r1, #2
 80068ca:	4812      	ldr	r0, [pc, #72]	; (8006914 <fb_spi_transfer+0xd8>)
 80068cc:	f7fb f93a 	bl	8001b44 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	/*DMA send = non blocking function*/
	HAL_StatusTypeDef err = HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)&frame_buffer[BUFIDX(0,area.y1)], length);
#else
	/*non-DMA SPI transfer, it is a blocking function*/
	HAL_StatusTypeDef err = HAL_SPI_Transmit(&hspi1, (uint8_t *)&frame_buffer[BUFIDX(0,area.y1)], length, 10);
 80068d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80068d4:	461a      	mov	r2, r3
 80068d6:	4613      	mov	r3, r2
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	461a      	mov	r2, r3
 80068e0:	4b0d      	ldr	r3, [pc, #52]	; (8006918 <fb_spi_transfer+0xdc>)
 80068e2:	18d1      	adds	r1, r2, r3
 80068e4:	89fa      	ldrh	r2, [r7, #14]
 80068e6:	230a      	movs	r3, #10
 80068e8:	480c      	ldr	r0, [pc, #48]	; (800691c <fb_spi_transfer+0xe0>)
 80068ea:	f7fe f81f 	bl	800492c <HAL_SPI_Transmit>
 80068ee:	4603      	mov	r3, r0
 80068f0:	737b      	strb	r3, [r7, #13]
	fb_flush_pending_clear();
 80068f2:	f000 f84f 	bl	8006994 <fb_flush_pending_clear>
#endif

	switch(err){
 80068f6:	7b7b      	ldrb	r3, [r7, #13]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d002      	beq.n	8006902 <fb_spi_transfer+0xc6>
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d000      	beq.n	8006902 <fb_spi_transfer+0xc6>
		case HAL_TIMEOUT:
		case HAL_ERROR:
			Error_Handler();
			break;
		default:
			break;
 8006900:	e002      	b.n	8006908 <fb_spi_transfer+0xcc>
			Error_Handler();
 8006902:	f7f9 fe98 	bl	8000636 <Error_Handler>
			break;
 8006906:	bf00      	nop
	}
}
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	08007f04 	.word	0x08007f04
 8006914:	48000400 	.word	0x48000400
 8006918:	2000048c 	.word	0x2000048c
 800691c:	200000b8 	.word	0x200000b8

08006920 <fb_flush_pending_set>:
 *	Set flag to tell that GUI content to be flushed.
 *	Used in HAL_GPIO_EXTI_Callback().
 *@param area is the content in frame buffer to copy to GDDRAM
 */
static void fb_flush_pending_set(rect_t area)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	463b      	mov	r3, r7
 8006928:	e883 0003 	stmia.w	r3, {r0, r1}
	fb_flush_area = area;
 800692c:	4b07      	ldr	r3, [pc, #28]	; (800694c <fb_flush_pending_set+0x2c>)
 800692e:	461a      	mov	r2, r3
 8006930:	463b      	mov	r3, r7
 8006932:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006936:	e882 0003 	stmia.w	r2, {r0, r1}
	fb_flush_pending = true;
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <fb_flush_pending_set+0x30>)
 800693c:	2201      	movs	r2, #1
 800693e:	701a      	strb	r2, [r3, #0]
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	20000168 	.word	0x20000168
 8006950:	200000b5 	.word	0x200000b5

08006954 <fb_flush_suspend>:

/**
 * @brief Wait until previous SPI transfer (if any) has finished
 */
static void fb_flush_suspend(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
	uint8_t timeout = 20;
 800695a:	2314      	movs	r3, #20
 800695c:	71fb      	strb	r3, [r7, #7]
	while(fb_flush_pending_get())
 800695e:	e00d      	b.n	800697c <fb_flush_suspend+0x28>
	{
		if(timeout-- == 0)
 8006960:	79fb      	ldrb	r3, [r7, #7]
 8006962:	1e5a      	subs	r2, r3, #1
 8006964:	71fa      	strb	r2, [r7, #7]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <fb_flush_suspend+0x22>
		{
	#ifdef USE_FULL_ASSERT
				//Error with DMA Flag not protected well. Check timing.
				assert_failed((uint8_t *)__FILE__, __LINE__);
 800696a:	f240 31de 	movw	r1, #990	; 0x3de
 800696e:	4808      	ldr	r0, [pc, #32]	; (8006990 <fb_flush_suspend+0x3c>)
 8006970:	f7f9 fe68 	bl	8000644 <assert_failed>
	#endif
				break;
 8006974:	e007      	b.n	8006986 <fb_flush_suspend+0x32>
		}
		HAL_Delay(1);
 8006976:	2001      	movs	r0, #1
 8006978:	f7fa f9cc 	bl	8000d14 <HAL_Delay>
	while(fb_flush_pending_get())
 800697c:	f000 f816 	bl	80069ac <fb_flush_pending_get>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1ec      	bne.n	8006960 <fb_flush_suspend+0xc>
	}
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	08007f04 	.word	0x08007f04

08006994 <fb_flush_pending_clear>:
 * @brief
 * \b	Description:
 * 	Clear flush pending flag
 */
static void fb_flush_pending_clear(void)
{
 8006994:	b480      	push	{r7}
 8006996:	af00      	add	r7, sp, #0
	fb_flush_pending = false;
 8006998:	4b03      	ldr	r3, [pc, #12]	; (80069a8 <fb_flush_pending_clear+0x14>)
 800699a:	2200      	movs	r2, #0
 800699c:	701a      	strb	r2, [r3, #0]
}
 800699e:	bf00      	nop
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	200000b5 	.word	0x200000b5

080069ac <fb_flush_pending_get>:

/**
 * @return Frame buffer flush pending flag
 */
static bool fb_flush_pending_get(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
	return fb_flush_pending;
 80069b0:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <fb_flush_pending_get+0x14>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	b2db      	uxtb	r3, r3
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	200000b5 	.word	0x200000b5

080069c4 <i2c_write>:
 * @param reg is the register address sending with LSB first i.e. 0xf0 sending first with reg=0x0af0
 * @param *data points to the data buffer to send
 * @param len is the byte count to send
 */
static void i2c_write(uint8_t slave, uint16_t reg, const uint8_t *data, uint16_t len)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08a      	sub	sp, #40	; 0x28
 80069c8:	af04      	add	r7, sp, #16
 80069ca:	60ba      	str	r2, [r7, #8]
 80069cc:	461a      	mov	r2, r3
 80069ce:	4603      	mov	r3, r0
 80069d0:	73fb      	strb	r3, [r7, #15]
 80069d2:	460b      	mov	r3, r1
 80069d4:	81bb      	strh	r3, [r7, #12]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef err;

	if(len){
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01c      	beq.n	8006a1a <i2c_write+0x56>
		//swap high and low bytes so that lower byte is sent first
		uint16_t reg_byte_swap = ((reg<<8)&0xff00) | ((reg>>8)&0x00ff);
 80069e0:	89bb      	ldrh	r3, [r7, #12]
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	b21a      	sxth	r2, r3
 80069e6:	89bb      	ldrh	r3, [r7, #12]
 80069e8:	0a1b      	lsrs	r3, r3, #8
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	b21b      	sxth	r3, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b21b      	sxth	r3, r3
 80069f2:	82bb      	strh	r3, [r7, #20]
		err = HAL_I2C_Mem_Write(&hi2c1, slave<<1, reg_byte_swap, 2, (uint8_t *)data, len, 5000);
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	b299      	uxth	r1, r3
 80069fc:	8aba      	ldrh	r2, [r7, #20]
 80069fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a02:	9302      	str	r3, [sp, #8]
 8006a04:	88fb      	ldrh	r3, [r7, #6]
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	4810      	ldr	r0, [pc, #64]	; (8006a50 <i2c_write+0x8c>)
 8006a10:	f7fb fbde 	bl	80021d0 <HAL_I2C_Mem_Write>
 8006a14:	4603      	mov	r3, r0
 8006a16:	75fb      	strb	r3, [r7, #23]
 8006a18:	e00e      	b.n	8006a38 <i2c_write+0x74>
	}
	else
	{
		err = HAL_I2C_Master_Transmit(&hi2c1, slave<<1, (uint8_t *)&reg, 2, 500);
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	b299      	uxth	r1, r3
 8006a22:	f107 020c 	add.w	r2, r7, #12
 8006a26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	4808      	ldr	r0, [pc, #32]	; (8006a50 <i2c_write+0x8c>)
 8006a30:	f7fb f9e4 	bl	8001dfc <HAL_I2C_Master_Transmit>
 8006a34:	4603      	mov	r3, r0
 8006a36:	75fb      	strb	r3, [r7, #23]
	}

	switch(err){
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d000      	beq.n	8006a40 <i2c_write+0x7c>
		case HAL_ERROR:
			Error_Handler();
			break;
			default:
			break;
 8006a3e:	e002      	b.n	8006a46 <i2c_write+0x82>
			Error_Handler();
 8006a40:	f7f9 fdf9 	bl	8000636 <Error_Handler>
			break;
 8006a44:	bf00      	nop
		}
}
 8006a46:	bf00      	nop
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	2000011c 	.word	0x2000011c

08006a54 <i2c_read>:
 * @param reg is the register to read from
 * @param buffer points to an array to keep incoming characters
 * @param len is the byte count to read
 */
static void i2c_read(uint8_t slave, uint16_t reg, uint8_t *buffer, uint16_t len)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60ba      	str	r2, [r7, #8]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	73fb      	strb	r3, [r7, #15]
 8006a62:	460b      	mov	r3, r1
 8006a64:	81bb      	strh	r3, [r7, #12]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef err = HAL_I2C_Master_Transmit(&hi2c1, slave<<1, (uint8_t *)&reg, 2, 500);
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	b299      	uxth	r1, r3
 8006a72:	f107 020c 	add.w	r2, r7, #12
 8006a76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	4816      	ldr	r0, [pc, #88]	; (8006ad8 <i2c_read+0x84>)
 8006a80:	f7fb f9bc 	bl	8001dfc <HAL_I2C_Master_Transmit>
 8006a84:	4603      	mov	r3, r0
 8006a86:	75fb      	strb	r3, [r7, #23]
	switch(err){
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d000      	beq.n	8006a90 <i2c_read+0x3c>
			case HAL_ERROR:
				Error_Handler();
				break;
				default:
				break;
 8006a8e:	e002      	b.n	8006a96 <i2c_read+0x42>
				Error_Handler();
 8006a90:	f7f9 fdd1 	bl	8000636 <Error_Handler>
				break;
 8006a94:	bf00      	nop
			}

	HAL_DWT_Delay_us(200); //delay for 200us is mandatory for I2C Read
 8006a96:	20c8      	movs	r0, #200	; 0xc8
 8006a98:	f7ff fbd8 	bl	800624c <HAL_DWT_Delay_us>

	err = HAL_I2C_Master_Receive(&hi2c1, (slave<<1)|0x01, buffer, len, 1000);
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	b21b      	sxth	r3, r3
 8006aa2:	f043 0301 	orr.w	r3, r3, #1
 8006aa6:	b21b      	sxth	r3, r3
 8006aa8:	b299      	uxth	r1, r3
 8006aaa:	88fa      	ldrh	r2, [r7, #6]
 8006aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	4808      	ldr	r0, [pc, #32]	; (8006ad8 <i2c_read+0x84>)
 8006ab8:	f7fb fa94 	bl	8001fe4 <HAL_I2C_Master_Receive>
 8006abc:	4603      	mov	r3, r0
 8006abe:	75fb      	strb	r3, [r7, #23]

	switch(err){
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d000      	beq.n	8006ac8 <i2c_read+0x74>
		case HAL_ERROR:
			Error_Handler();
			break;
			default:
			break;
 8006ac6:	e002      	b.n	8006ace <i2c_read+0x7a>
			Error_Handler();
 8006ac8:	f7f9 fdb5 	bl	8000636 <Error_Handler>
			break;
 8006acc:	bf00      	nop
		}
}
 8006ace:	bf00      	nop
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	2000011c 	.word	0x2000011c

08006adc <touch_crc_checksum>:
 * @param 	byte_cnt is the size of PM_content, TM_content, & DM_content arrays defined in SSD7317_Init_table.c.
 * @param 	trig_cmd is the command to trigger a CRC read: PM trigger(0x03), DM trigger (0x05), TM trigger (0x09)
 * @return 	CRC value calculated by SSD7317
 */
static uint16_t touch_crc_checksum(uint16_t byte_cnt, uint8_t trig_cmd)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	460a      	mov	r2, r1
 8006ae6:	80fb      	strh	r3, [r7, #6]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	717b      	strb	r3, [r7, #5]
	uint16_t i2c_ret=0, expiry_ms=5; //preset 5ms for CRC calculation time
 8006aec:	2300      	movs	r3, #0
 8006aee:	81bb      	strh	r3, [r7, #12]
 8006af0:	2305      	movs	r3, #5
 8006af2:	81fb      	strh	r3, [r7, #14]

	//(1)Clear SA
	i2c_write(TOUCH_SA, 0x0000, 0, 0);
 8006af4:	2300      	movs	r3, #0
 8006af6:	2200      	movs	r2, #0
 8006af8:	2100      	movs	r1, #0
 8006afa:	2053      	movs	r0, #83	; 0x53
 8006afc:	f7ff ff62 	bl	80069c4 <i2c_write>

	//(2)Send CRC trigger command
	uint8_t data[3] = {(uint8_t)byte_cnt&0xff, (uint8_t)(byte_cnt>>8), trig_cmd};
 8006b00:	88fb      	ldrh	r3, [r7, #6]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	723b      	strb	r3, [r7, #8]
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	0a1b      	lsrs	r3, r3, #8
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	727b      	strb	r3, [r7, #9]
 8006b10:	797b      	ldrb	r3, [r7, #5]
 8006b12:	72bb      	strb	r3, [r7, #10]
	i2c_write(TOUCH_SA_BIOS, 0x8100, (const uint8_t *)&data, 3);
 8006b14:	f107 0208 	add.w	r2, r7, #8
 8006b18:	2303      	movs	r3, #3
 8006b1a:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8006b1e:	2057      	movs	r0, #87	; 0x57
 8006b20:	f7ff ff50 	bl	80069c4 <i2c_write>

	//(3)Read S&L and wait until CRC is ready; otherwise, a timeout failure triggered
	while(i2c_ret!=0xcaf0){
 8006b24:	e016      	b.n	8006b54 <touch_crc_checksum+0x78>
		i2c_read(TOUCH_SA, 0x0af0, (uint8_t *)&i2c_ret, 2);
 8006b26:	f107 020c 	add.w	r2, r7, #12
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8006b30:	2053      	movs	r0, #83	; 0x53
 8006b32:	f7ff ff8f 	bl	8006a54 <i2c_read>
		HAL_Delay(1);
 8006b36:	2001      	movs	r0, #1
 8006b38:	f7fa f8ec 	bl	8000d14 <HAL_Delay>
		if((expiry_ms--)==0){
 8006b3c:	89fb      	ldrh	r3, [r7, #14]
 8006b3e:	1e5a      	subs	r2, r3, #1
 8006b40:	81fa      	strh	r2, [r7, #14]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <touch_crc_checksum+0x78>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006b46:	f240 4153 	movw	r1, #1107	; 0x453
 8006b4a:	480b      	ldr	r0, [pc, #44]	; (8006b78 <touch_crc_checksum+0x9c>)
 8006b4c:	f7f9 fd7a 	bl	8000644 <assert_failed>
#endif
			return 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e00d      	b.n	8006b70 <touch_crc_checksum+0x94>
	while(i2c_ret!=0xcaf0){
 8006b54:	89bb      	ldrh	r3, [r7, #12]
 8006b56:	f64c 22f0 	movw	r2, #51952	; 0xcaf0
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d1e3      	bne.n	8006b26 <touch_crc_checksum+0x4a>
		}
	}

	//(4)Read CRC from 0x8100
	i2c_read(TOUCH_SA_BIOS, 0x8100, (uint8_t *)&i2c_ret, 2);
 8006b5e:	f107 020c 	add.w	r2, r7, #12
 8006b62:	2302      	movs	r3, #2
 8006b64:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8006b68:	2057      	movs	r0, #87	; 0x57
 8006b6a:	f7ff ff73 	bl	8006a54 <i2c_read>

	return i2c_ret;
 8006b6e:	89bb      	ldrh	r3, [r7, #12]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	08007f04 	.word	0x08007f04

08006b7c <touch_init>:
 *@brief
 *\b	Description:<br>
 *	Initialize touch interface to implement "Reset and Boot" procedures as stated on Section 3<br>
 */
static void touch_init(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
	uint16_t i2c_ret;

	//(0) Initialize micro-seconds software delay in STM32. A delay of 200us is mandatory in Touch_I2C_Read().
	if(HAL_DWT_Delay_Init()){
 8006b82:	f000 fa3b 	bl	8006ffc <HAL_DWT_Delay_Init>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d004      	beq.n	8006b96 <touch_init+0x1a>
#ifdef USE_FULL_ASSERT
		assert_failed((uint8_t *)__FILE__, __LINE__);
 8006b8c:	f240 416b 	movw	r1, #1131	; 0x46b
 8006b90:	4879      	ldr	r0, [pc, #484]	; (8006d78 <touch_init+0x1fc>)
 8006b92:	f7f9 fd57 	bl	8000644 <assert_failed>
#endif
	}

	//(1) IC Initialization with 0x0af0 (I2C send with lower byte first)
	i2c_read(TOUCH_SA, 0x0af0, (uint8_t *)&i2c_ret, 2);
 8006b96:	1d3a      	adds	r2, r7, #4
 8006b98:	2302      	movs	r3, #2
 8006b9a:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8006b9e:	2053      	movs	r0, #83	; 0x53
 8006ba0:	f7ff ff58 	bl	8006a54 <i2c_read>
	if(i2c_ret!=0xcaf0){
 8006ba4:	88bb      	ldrh	r3, [r7, #4]
 8006ba6:	f64c 22f0 	movw	r2, #51952	; 0xcaf0
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d005      	beq.n	8006bba <touch_init+0x3e>
#ifdef USE_FULL_ASSERT
		assert_failed((uint8_t *)__FILE__, __LINE__);
 8006bae:	f240 4173 	movw	r1, #1139	; 0x473
 8006bb2:	4871      	ldr	r0, [pc, #452]	; (8006d78 <touch_init+0x1fc>)
 8006bb4:	f7f9 fd46 	bl	8000644 <assert_failed>
 8006bb8:	e0db      	b.n	8006d72 <touch_init+0x1f6>
		return;
	}

	//(2) Send byte sequence for PM-select for 1228 bytes in 24 blocks of 512 bytes each
	//PM Select
	i2c_write(TOUCH_SA, 0x0001, 0, 0);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	2053      	movs	r0, #83	; 0x53
 8006bc2:	f7ff feff 	bl	80069c4 <i2c_write>
	for(uint8_t n=0; n<24; n++){
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	71fb      	strb	r3, [r7, #7]
 8006bca:	e010      	b.n	8006bee <touch_init+0x72>
		i2c_write(TOUCH_SA_BIOS, 2*n, (const uint8_t *)&FW_PM.content[n*512], 512);
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	b299      	uxth	r1, r3
 8006bd4:	4b69      	ldr	r3, [pc, #420]	; (8006d7c <touch_init+0x200>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	79fa      	ldrb	r2, [r7, #7]
 8006bda:	0252      	lsls	r2, r2, #9
 8006bdc:	441a      	add	r2, r3
 8006bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006be2:	2057      	movs	r0, #87	; 0x57
 8006be4:	f7ff feee 	bl	80069c4 <i2c_write>
	for(uint8_t n=0; n<24; n++){
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	3301      	adds	r3, #1
 8006bec:	71fb      	strb	r3, [r7, #7]
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	2b17      	cmp	r3, #23
 8006bf2:	d9eb      	bls.n	8006bcc <touch_init+0x50>
	}

	//(3) Send byte sequence for TM-select 1844 bytes,
	i2c_write(TOUCH_SA, 0x0003, 0, 0);
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2103      	movs	r1, #3
 8006bfa:	2053      	movs	r0, #83	; 0x53
 8006bfc:	f7ff fee2 	bl	80069c4 <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0, (const uint8_t *)&FW_TM.content[0], 512);
 8006c00:	4b5f      	ldr	r3, [pc, #380]	; (8006d80 <touch_init+0x204>)
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c08:	2100      	movs	r1, #0
 8006c0a:	2057      	movs	r0, #87	; 0x57
 8006c0c:	f7ff feda 	bl	80069c4 <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0002, (const uint8_t *)&FW_TM.content[512], 512);
 8006c10:	4b5b      	ldr	r3, [pc, #364]	; (8006d80 <touch_init+0x204>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8006c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c1c:	2102      	movs	r1, #2
 8006c1e:	2057      	movs	r0, #87	; 0x57
 8006c20:	f7ff fed0 	bl	80069c4 <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0004, (const uint8_t *)&FW_TM.content[1024], 512);
 8006c24:	4b56      	ldr	r3, [pc, #344]	; (8006d80 <touch_init+0x204>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8006c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c30:	2104      	movs	r1, #4
 8006c32:	2057      	movs	r0, #87	; 0x57
 8006c34:	f7ff fec6 	bl	80069c4 <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0006, (const uint8_t *)&FW_TM.content[1536], 308); //send remainder bytes
 8006c38:	4b51      	ldr	r3, [pc, #324]	; (8006d80 <touch_init+0x204>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 8006c40:	f44f 739a 	mov.w	r3, #308	; 0x134
 8006c44:	2106      	movs	r1, #6
 8006c46:	2057      	movs	r0, #87	; 0x57
 8006c48:	f7ff febc 	bl	80069c4 <i2c_write>

	//(4) Send byte sequence for DM-select for 2048 bytes
	i2c_write(TOUCH_SA, 0x0002, 0, 0);
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2102      	movs	r1, #2
 8006c52:	2053      	movs	r0, #83	; 0x53
 8006c54:	f7ff feb6 	bl	80069c4 <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0, (const uint8_t *)&FW_DM.content[0], 512);
 8006c58:	4b4a      	ldr	r3, [pc, #296]	; (8006d84 <touch_init+0x208>)
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c60:	2100      	movs	r1, #0
 8006c62:	2057      	movs	r0, #87	; 0x57
 8006c64:	f7ff feae 	bl	80069c4 <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0002, (const uint8_t *)&FW_DM.content[512], 512);
 8006c68:	4b46      	ldr	r3, [pc, #280]	; (8006d84 <touch_init+0x208>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8006c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c74:	2102      	movs	r1, #2
 8006c76:	2057      	movs	r0, #87	; 0x57
 8006c78:	f7ff fea4 	bl	80069c4 <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0004, (const uint8_t *)&FW_DM.content[1024], 512);
 8006c7c:	4b41      	ldr	r3, [pc, #260]	; (8006d84 <touch_init+0x208>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8006c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c88:	2104      	movs	r1, #4
 8006c8a:	2057      	movs	r0, #87	; 0x57
 8006c8c:	f7ff fe9a 	bl	80069c4 <i2c_write>
	i2c_write(TOUCH_SA_BIOS, 0x0006, (const uint8_t *)&FW_DM.content[1536], 512);
 8006c90:	4b3c      	ldr	r3, [pc, #240]	; (8006d84 <touch_init+0x208>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 8006c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c9c:	2106      	movs	r1, #6
 8006c9e:	2057      	movs	r0, #87	; 0x57
 8006ca0:	f7ff fe90 	bl	80069c4 <i2c_write>

	//Do checksum for PM Trig
	if(touch_crc_checksum(FW_PM.byte_cnt, 0x03)!=FW_PM.crc){
 8006ca4:	4b35      	ldr	r3, [pc, #212]	; (8006d7c <touch_init+0x200>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2103      	movs	r1, #3
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff ff15 	bl	8006adc <touch_crc_checksum>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4b31      	ldr	r3, [pc, #196]	; (8006d7c <touch_init+0x200>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d004      	beq.n	8006cc8 <touch_init+0x14c>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006cbe:	f44f 6192 	mov.w	r1, #1168	; 0x490
 8006cc2:	482d      	ldr	r0, [pc, #180]	; (8006d78 <touch_init+0x1fc>)
 8006cc4:	f7f9 fcbe 	bl	8000644 <assert_failed>
#endif
	}
	//Do checksum for TM Trig
	if(touch_crc_checksum(FW_TM.byte_cnt, 0x09)!=FW_TM.crc){
 8006cc8:	4b2d      	ldr	r3, [pc, #180]	; (8006d80 <touch_init+0x204>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2109      	movs	r1, #9
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff ff03 	bl	8006adc <touch_crc_checksum>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4b29      	ldr	r3, [pc, #164]	; (8006d80 <touch_init+0x204>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d004      	beq.n	8006cec <touch_init+0x170>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006ce2:	f240 4196 	movw	r1, #1174	; 0x496
 8006ce6:	4824      	ldr	r0, [pc, #144]	; (8006d78 <touch_init+0x1fc>)
 8006ce8:	f7f9 fcac 	bl	8000644 <assert_failed>
#endif
	}
	//Do checksum for DM Trig
	if(touch_crc_checksum(FW_DM.byte_cnt, 0x05)!=FW_DM.crc){
 8006cec:	4b25      	ldr	r3, [pc, #148]	; (8006d84 <touch_init+0x208>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2105      	movs	r1, #5
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff fef1 	bl	8006adc <touch_crc_checksum>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4b21      	ldr	r3, [pc, #132]	; (8006d84 <touch_init+0x208>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d004      	beq.n	8006d10 <touch_init+0x194>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006d06:	f240 419c 	movw	r1, #1180	; 0x49c
 8006d0a:	481b      	ldr	r0, [pc, #108]	; (8006d78 <touch_init+0x1fc>)
 8006d0c:	f7f9 fc9a 	bl	8000644 <assert_failed>
#endif
	}

	//(5) MCU Un-stall(means passing control to MCU)
	i2c_write(TOUCH_SA, 0x0000, 0, 0);
 8006d10:	2300      	movs	r3, #0
 8006d12:	2200      	movs	r2, #0
 8006d14:	2100      	movs	r1, #0
 8006d16:	2053      	movs	r0, #83	; 0x53
 8006d18:	f7ff fe54 	bl	80069c4 <i2c_write>
	uint8_t data[2]={0,0};
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	703b      	strb	r3, [r7, #0]
 8006d20:	2300      	movs	r3, #0
 8006d22:	707b      	strb	r3, [r7, #1]
	i2c_write(TOUCH_SA_BIOS, 0x8300, (const uint8_t *)&data, 2);
 8006d24:	463a      	mov	r2, r7
 8006d26:	2302      	movs	r3, #2
 8006d28:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8006d2c:	2057      	movs	r0, #87	; 0x57
 8006d2e:	f7ff fe49 	bl	80069c4 <i2c_write>
	data[0]=0x03;
 8006d32:	2303      	movs	r3, #3
 8006d34:	703b      	strb	r3, [r7, #0]
	i2c_write(TOUCH_SA_BIOS, 0x8000, (const uint8_t *)&data, 2);
 8006d36:	463a      	mov	r2, r7
 8006d38:	2302      	movs	r3, #2
 8006d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d3e:	2057      	movs	r0, #87	; 0x57
 8006d40:	f7ff fe40 	bl	80069c4 <i2c_write>
	data[0]=0x00;
 8006d44:	2300      	movs	r3, #0
 8006d46:	703b      	strb	r3, [r7, #0]
	i2c_write(TOUCH_SA_BIOS, 0x8000, (const uint8_t *)&data, 2);
 8006d48:	463a      	mov	r2, r7
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d50:	2057      	movs	r0, #87	; 0x57
 8006d52:	f7ff fe37 	bl	80069c4 <i2c_write>

	//(6) After MCU Un-stall, wait 5ms
	HAL_Delay(5);
 8006d56:	2005      	movs	r0, #5
 8006d58:	f7f9 ffdc 	bl	8000d14 <HAL_Delay>

	//(7) Send display command 0xf4, 0x90 for initialization complete
	data[0]=0xf4;
 8006d5c:	23f4      	movs	r3, #244	; 0xf4
 8006d5e:	703b      	strb	r3, [r7, #0]
	data[1]=0x90;
 8006d60:	2390      	movs	r3, #144	; 0x90
 8006d62:	707b      	strb	r3, [r7, #1]
	spi_write_command((const uint8_t*)&data, 2);
 8006d64:	463b      	mov	r3, r7
 8006d66:	2102      	movs	r1, #2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff fc03 	bl	8006574 <spi_write_command>

	//(8) Clear interrupt
	touch_event_clear();
 8006d6e:	f000 f80b 	bl	8006d88 <touch_event_clear>
}
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	08007f04 	.word	0x08007f04
 8006d7c:	2000000c 	.word	0x2000000c
 8006d80:	20000018 	.word	0x20000018
 8006d84:	20000024 	.word	0x20000024

08006d88 <touch_event_clear>:
 * \b Note:<br>
 * 		There is a typo error on section 3.3.6. <br>
 * 		The correct sequence should be 0x43 0x00 0x00 0x00.<br>
 */
static void touch_event_clear(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
	uint16_t cmd=0; //sending two bytes of 0x00
 8006d8e:	2300      	movs	r3, #0
 8006d90:	80fb      	strh	r3, [r7, #6]

	i2c_write(TOUCH_SA, 0x0043, (const uint8_t *)&cmd, 2);
 8006d92:	1dba      	adds	r2, r7, #6
 8006d94:	2302      	movs	r3, #2
 8006d96:	2143      	movs	r1, #67	; 0x43
 8006d98:	2053      	movs	r0, #83	; 0x53
 8006d9a:	f7ff fe13 	bl	80069c4 <i2c_write>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006d9e:	b672      	cpsid	i

	__disable_irq();
	touch_event_flag = false;
 8006da0:	4b03      	ldr	r3, [pc, #12]	; (8006db0 <touch_event_clear+0x28>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006da6:	b662      	cpsie	i
	__enable_irq();

}
 8006da8:	bf00      	nop
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	200000b4 	.word	0x200000b4

08006db4 <touch_event_set>:
 * @brief
 * \b		Description:<br>
 * 		Set IRQ flag in IRQ handler for a high-to-low IRQ pin transition triggered by a touch event
 */
void touch_event_set(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
	touch_event_flag = true;
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <touch_event_set+0x14>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	701a      	strb	r2, [r3, #0]
}
 8006dbe:	bf00      	nop
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	200000b4 	.word	0x200000b4

08006dcc <ssd7317_get_charsize>:
/**
 * @brief
 * \b Description:<br>
 */
void   ssd7317_get_charsize(const tFont* font, uint16_t ascii_code, uint16_t *w, uint16_t *h)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	607a      	str	r2, [r7, #4]
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	817b      	strh	r3, [r7, #10]
	*w=0; *h=0;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	801a      	strh	r2, [r3, #0]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2200      	movs	r2, #0
 8006de6:	801a      	strh	r2, [r3, #0]
	const tChar* pChar = font->chars;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	617b      	str	r3, [r7, #20]

	if(pChar!=0){
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d016      	beq.n	8006e22 <ssd7317_get_charsize+0x56>
		uint16_t _code = ascii_code-pChar[0].code; //need to offset the first array member
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	897a      	ldrh	r2, [r7, #10]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	827b      	strh	r3, [r7, #18]
		*w = pChar[_code].image->width;
 8006e00:	8a7b      	ldrh	r3, [r7, #18]
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4413      	add	r3, r2
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	889a      	ldrh	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	801a      	strh	r2, [r3, #0]
		*h = pChar[_code].image->height;
 8006e10:	8a7b      	ldrh	r3, [r7, #18]
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4413      	add	r3, r2
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	88da      	ldrh	r2, [r3, #6]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	801a      	strh	r2, [r3, #0]
	}else{
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
#endif
	}
}
 8006e20:	e004      	b.n	8006e2c <ssd7317_get_charsize+0x60>
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006e22:	f240 51f5 	movw	r1, #1525	; 0x5f5
 8006e26:	4803      	ldr	r0, [pc, #12]	; (8006e34 <ssd7317_get_charsize+0x68>)
 8006e28:	f7f9 fc0c 	bl	8000644 <assert_failed>
}
 8006e2c:	bf00      	nop
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	08007f04 	.word	0x08007f04

08006e38 <ssd7317_put_string>:
/**
 * @brief
 * \b Description:<br>
 */
rect_t ssd7317_put_string(uint16_t left, uint16_t top, const tFont* font, const char *str, bool negative)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08e      	sub	sp, #56	; 0x38
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	607b      	str	r3, [r7, #4]
 8006e42:	460b      	mov	r3, r1
 8006e44:	817b      	strh	r3, [r7, #10]
 8006e46:	4613      	mov	r3, r2
 8006e48:	813b      	strh	r3, [r7, #8]
	rect_t err={0,0,0,0};
 8006e4a:	f107 031c 	add.w	r3, r7, #28
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	605a      	str	r2, [r3, #4]

	/* make sure *font and *str are not NULL pointer */
	if(font==0 || str==0){
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <ssd7317_put_string+0x28>
 8006e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10c      	bne.n	8006e7a <ssd7317_put_string+0x42>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006e60:	f240 6105 	movw	r1, #1541	; 0x605
 8006e64:	4849      	ldr	r0, [pc, #292]	; (8006f8c <ssd7317_put_string+0x154>)
 8006e66:	f7f9 fbed 	bl	8000644 <assert_failed>
#endif
			return err;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f107 031c 	add.w	r3, r7, #28
 8006e72:	cb03      	ldmia	r3!, {r0, r1}
 8006e74:	6010      	str	r0, [r2, #0]
 8006e76:	6051      	str	r1, [r2, #4]
 8006e78:	e084      	b.n	8006f84 <ssd7317_put_string+0x14c>

	}

	const tChar* pChar = font->chars;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* make sure all characters in range*/
	const char *pStr = str;
 8006e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e82:	637b      	str	r3, [r7, #52]	; 0x34

	while(*pStr != '\0')
 8006e84:	e020      	b.n	8006ec8 <ssd7317_put_string+0x90>
	{
		if((pChar[0].code>*pStr) || (*pStr>(pChar[0].code+font->length-1))){
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e8c:	7812      	ldrb	r2, [r2, #0]
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	dc0a      	bgt.n	8006ea8 <ssd7317_put_string+0x70>
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	4619      	mov	r1, r3
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	4299      	cmp	r1, r3
 8006ea6:	dd0c      	ble.n	8006ec2 <ssd7317_put_string+0x8a>
#ifdef USE_FULL_ASSERT
				assert_failed((uint8_t *)__FILE__, __LINE__); //character out of range
 8006ea8:	f240 6114 	movw	r1, #1556	; 0x614
 8006eac:	4837      	ldr	r0, [pc, #220]	; (8006f8c <ssd7317_put_string+0x154>)
 8006eae:	f7f9 fbc9 	bl	8000644 <assert_failed>
#endif
				return err;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f107 031c 	add.w	r3, r7, #28
 8006eba:	cb03      	ldmia	r3!, {r0, r1}
 8006ebc:	6010      	str	r0, [r2, #0]
 8006ebe:	6051      	str	r1, [r2, #4]
 8006ec0:	e060      	b.n	8006f84 <ssd7317_put_string+0x14c>

		}
		pStr++;
 8006ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	637b      	str	r3, [r7, #52]	; 0x34
	while(*pStr != '\0')
 8006ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1da      	bne.n	8006e86 <ssd7317_put_string+0x4e>
	}

	/* Now, data assert all pass. We can get each char from the string and put it in frame buffer */
	rect_t area= {left,top,left,top + (font->chars->image->height-1)};
 8006ed0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006ed4:	82bb      	strh	r3, [r7, #20]
 8006ed6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006eda:	82fb      	strh	r3, [r7, #22]
 8006edc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006ee0:	833b      	strh	r3, [r7, #24]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	88da      	ldrh	r2, [r3, #6]
 8006eea:	893b      	ldrh	r3, [r7, #8]
 8006eec:	4413      	add	r3, r2
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	b21b      	sxth	r3, r3
 8006ef6:	837b      	strh	r3, [r7, #26]

	uint16_t _x = left;
 8006ef8:	897b      	ldrh	r3, [r7, #10]
 8006efa:	867b      	strh	r3, [r7, #50]	; 0x32

	while(*str != '\0')
 8006efc:	e02c      	b.n	8006f58 <ssd7317_put_string+0x120>
	{
		uint16_t _code = *str - pChar[0].code; //need to offset the first array member
 8006efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	857b      	strh	r3, [r7, #42]	; 0x2a
		const uint8_t* pData = pChar[_code].image->data;
 8006f0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f14:	4413      	add	r3, r2
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24

		_x += (pChar[_code].image->width);
 8006f1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f22:	4413      	add	r3, r2
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	889a      	ldrh	r2, [r3, #4]
 8006f28:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006f2a:	4413      	add	r3, r2
 8006f2c:	867b      	strh	r3, [r7, #50]	; 0x32
		area.x2 = _x-1;
 8006f2e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	b21b      	sxth	r3, r3
 8006f36:	833b      	strh	r3, [r7, #24]
		fb_fill_area(area,pData,negative);
 8006f38:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f3e:	f107 0114 	add.w	r1, r7, #20
 8006f42:	c903      	ldmia	r1, {r0, r1}
 8006f44:	f7ff fbc4 	bl	80066d0 <fb_fill_area>
		area.x1 = _x+1; //increment for new area.x1
 8006f48:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	b21b      	sxth	r3, r3
 8006f50:	82bb      	strh	r3, [r7, #20]

		str++;
 8006f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f54:	3301      	adds	r3, #1
 8006f56:	643b      	str	r3, [r7, #64]	; 0x40
	while(*str != '\0')
 8006f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1ce      	bne.n	8006efe <ssd7317_put_string+0xc6>
	}

	fb_flush_suspend();	//wait until previous SPI flushes finished
 8006f60:	f7ff fcf8 	bl	8006954 <fb_flush_suspend>
	fb_flush_pending_set(area); //set flag to indicate frame buffer flush pending and wait for a FR pulse
 8006f64:	f107 0314 	add.w	r3, r7, #20
 8006f68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f6c:	f7ff fcd8 	bl	8006920 <fb_flush_pending_set>

	area.x1 = left;
 8006f70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006f74:	82bb      	strh	r3, [r7, #20]

	return area;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	f107 0314 	add.w	r3, r7, #20
 8006f7e:	cb03      	ldmia	r3!, {r0, r1}
 8006f80:	6010      	str	r0, [r2, #0]
 8006f82:	6051      	str	r1, [r2, #4]
}
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	3738      	adds	r7, #56	; 0x38
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	08007f04 	.word	0x08007f04

08006f90 <ssd7317_get_stringsize>:
/**
 * @brief
 * \b Description:<br>
 */
void   ssd7317_get_stringsize(const tFont* font, const char *str, uint16_t *w, uint16_t *h)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
	if((font==0) || (str==0)){
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <ssd7317_get_stringsize+0x1a>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d105      	bne.n	8006fb6 <ssd7317_get_stringsize+0x26>
#ifdef USE_FULL_ASSERT
			assert_failed((uint8_t *)__FILE__, __LINE__);
 8006faa:	f240 613e 	movw	r1, #1598	; 0x63e
 8006fae:	4812      	ldr	r0, [pc, #72]	; (8006ff8 <ssd7317_get_stringsize+0x68>)
 8006fb0:	f7f9 fb48 	bl	8000644 <assert_failed>
 8006fb4:	e01c      	b.n	8006ff0 <ssd7317_get_stringsize+0x60>
			return;
#endif
	}

	uint16_t _w, _h, _x = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	82fb      	strh	r3, [r7, #22]

	while(*str != '\0'){
 8006fba:	e00f      	b.n	8006fdc <ssd7317_get_stringsize+0x4c>
		ssd7317_get_charsize(font, (const uint16_t)*str++, &_w, &_h);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	60ba      	str	r2, [r7, #8]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	b299      	uxth	r1, r3
 8006fc6:	f107 0312 	add.w	r3, r7, #18
 8006fca:	f107 0214 	add.w	r2, r7, #20
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7ff fefc 	bl	8006dcc <ssd7317_get_charsize>
		_x += _w;
 8006fd4:	8aba      	ldrh	r2, [r7, #20]
 8006fd6:	8afb      	ldrh	r3, [r7, #22]
 8006fd8:	4413      	add	r3, r2
 8006fda:	82fb      	strh	r3, [r7, #22]
	while(*str != '\0'){
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1eb      	bne.n	8006fbc <ssd7317_get_stringsize+0x2c>
	}

	*w = _x;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8afa      	ldrh	r2, [r7, #22]
 8006fe8:	801a      	strh	r2, [r3, #0]
	*h = _h;
 8006fea:	8a7a      	ldrh	r2, [r7, #18]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	801a      	strh	r2, [r3, #0]
}
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	08007f04 	.word	0x08007f04

08006ffc <HAL_DWT_Delay_Init>:
 * @return Error DWT counter
 * 1: clock cycle counter not started
 * 0: clock cycle counter works
 */

uint32_t HAL_DWT_Delay_Init(void){
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
	/* Disable TRC */
	 CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8007000:	4b14      	ldr	r3, [pc, #80]	; (8007054 <HAL_DWT_Delay_Init+0x58>)
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	4a13      	ldr	r2, [pc, #76]	; (8007054 <HAL_DWT_Delay_Init+0x58>)
 8007006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800700a:	60d3      	str	r3, [r2, #12]
	 /* Enable TRC */
	 CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800700c:	4b11      	ldr	r3, [pc, #68]	; (8007054 <HAL_DWT_Delay_Init+0x58>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	4a10      	ldr	r2, [pc, #64]	; (8007054 <HAL_DWT_Delay_Init+0x58>)
 8007012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007016:	60d3      	str	r3, [r2, #12]
	 /* Disable clock cycle counter */
	 DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8007018:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <HAL_DWT_Delay_Init+0x5c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a0e      	ldr	r2, [pc, #56]	; (8007058 <HAL_DWT_Delay_Init+0x5c>)
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	6013      	str	r3, [r2, #0]
	 /* Enable clock cycle counter */
	 DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8007024:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <HAL_DWT_Delay_Init+0x5c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a0b      	ldr	r2, [pc, #44]	; (8007058 <HAL_DWT_Delay_Init+0x5c>)
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	6013      	str	r3, [r2, #0]
	 /* Reset the clock cycle counter value */
	 DWT->CYCCNT = 0;
 8007030:	4b09      	ldr	r3, [pc, #36]	; (8007058 <HAL_DWT_Delay_Init+0x5c>)
 8007032:	2200      	movs	r2, #0
 8007034:	605a      	str	r2, [r3, #4]
	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8007036:	bf00      	nop
	__ASM volatile ("NOP");
 8007038:	bf00      	nop
	__ASM volatile ("NOP");
 800703a:	bf00      	nop
	 /* Check if clock cycle counter has started */
	if(DWT->CYCCNT)
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <HAL_DWT_Delay_Init+0x5c>)
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <HAL_DWT_Delay_Init+0x4c>
	{
	 return 0; /*clock cycle counter started*/
 8007044:	2300      	movs	r3, #0
 8007046:	e000      	b.n	800704a <HAL_DWT_Delay_Init+0x4e>
	}
	else
	{
	 return 1; /*clock cycle counter not started*/
 8007048:	2301      	movs	r3, #1
	}
}
 800704a:	4618      	mov	r0, r3
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	e000edf0 	.word	0xe000edf0
 8007058:	e0001000 	.word	0xe0001000

0800705c <rpc_buffer_empty>:
 * 			This function returns the number of characters in the communication buffer
 * @return 	`true` if the buffer is empty
 * 			`false` if the buffer is not empty, message removal from the receiving buffer is required
 */
static bool rpc_buffer_empty(void)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
	bool empty = true;
 8007062:	2301      	movs	r3, #1
 8007064:	71fb      	strb	r3, [r7, #7]

	if(rpc_rx_buf.ctr > 0)
 8007066:	4b06      	ldr	r3, [pc, #24]	; (8007080 <rpc_buffer_empty+0x24>)
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <rpc_buffer_empty+0x16>
		empty = false;
 800706e:	2300      	movs	r3, #0
 8007070:	71fb      	strb	r3, [r7, #7]

	return empty;
 8007072:	79fb      	ldrb	r3, [r7, #7]
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	20000170 	.word	0x20000170

08007084 <rpc_get_command>:
 * @return	If FreeRTOS is used, this is the status code that indicates the
 * 			execution status of the function with the same return code of osSemaphoreAcquire()
 * 			If no FreeRTOS is used, the return value is always 0
 */
static int8_t rpc_get_command(uint8_t *buf, uint16_t *length, uint32_t timeout)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
	int8_t err = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	757b      	strb	r3, [r7, #21]

	*length = 0;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	801a      	strh	r2, [r3, #0]

	if(!rpc_buffer_empty()){
 800709a:	f7ff ffdf 	bl	800705c <rpc_buffer_empty>
 800709e:	4603      	mov	r3, r0
 80070a0:	f083 0301 	eor.w	r3, r3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d01f      	beq.n	80070ea <rpc_get_command+0x66>
		HAL_UART_DMAPause(&huart2);
 80070aa:	4813      	ldr	r0, [pc, #76]	; (80070f8 <rpc_get_command+0x74>)
 80070ac:	f7fe f8b4 	bl	8005218 <HAL_UART_DMAPause>
		*length = rpc_rx_buf.ctr;
 80070b0:	4b12      	ldr	r3, [pc, #72]	; (80070fc <rpc_get_command+0x78>)
 80070b2:	881a      	ldrh	r2, [r3, #0]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	801a      	strh	r2, [r3, #0]

		for(uint16_t i=0; i<rpc_rx_buf.ctr; i++){
 80070b8:	2300      	movs	r3, #0
 80070ba:	82fb      	strh	r3, [r7, #22]
 80070bc:	e00a      	b.n	80070d4 <rpc_get_command+0x50>
			*buf++ = rpc_rx_buf.buf[i];
 80070be:	8afa      	ldrh	r2, [r7, #22]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	1c59      	adds	r1, r3, #1
 80070c4:	60f9      	str	r1, [r7, #12]
 80070c6:	490d      	ldr	r1, [pc, #52]	; (80070fc <rpc_get_command+0x78>)
 80070c8:	440a      	add	r2, r1
 80070ca:	7892      	ldrb	r2, [r2, #2]
 80070cc:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0; i<rpc_rx_buf.ctr; i++){
 80070ce:	8afb      	ldrh	r3, [r7, #22]
 80070d0:	3301      	adds	r3, #1
 80070d2:	82fb      	strh	r3, [r7, #22]
 80070d4:	4b09      	ldr	r3, [pc, #36]	; (80070fc <rpc_get_command+0x78>)
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	8afa      	ldrh	r2, [r7, #22]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d3ef      	bcc.n	80070be <rpc_get_command+0x3a>
		}
		rpc_rx_buf.ctr = 0; //reset the counter
 80070de:	4b07      	ldr	r3, [pc, #28]	; (80070fc <rpc_get_command+0x78>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	801a      	strh	r2, [r3, #0]

		HAL_UART_DMAResume(&huart2);
 80070e4:	4804      	ldr	r0, [pc, #16]	; (80070f8 <rpc_get_command+0x74>)
 80070e6:	f7fe f8eb 	bl	80052c0 <HAL_UART_DMAResume>
	}

	return err;
 80070ea:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	200003c0 	.word	0x200003c0
 80070fc:	20000170 	.word	0x20000170

08007100 <rpc_uart_init>:
 * This function is called in the initialization section of main.c. Assumed USART2 is used.
 * Baud rate set to 115200, 8-n-1 with DMA1 Channel 6 (Peripheral to Memory) enabled and
 * USART2 global interrupt enabled.
 */
void rpc_uart_init(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_Init 0 */
	/* DMA controller clock enable before HAL_UART_Init(&huart2) */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8007106:	4b2a      	ldr	r3, [pc, #168]	; (80071b0 <rpc_uart_init+0xb0>)
 8007108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800710a:	4a29      	ldr	r2, [pc, #164]	; (80071b0 <rpc_uart_init+0xb0>)
 800710c:	f043 0301 	orr.w	r3, r3, #1
 8007110:	6493      	str	r3, [r2, #72]	; 0x48
 8007112:	4b27      	ldr	r3, [pc, #156]	; (80071b0 <rpc_uart_init+0xb0>)
 8007114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	607b      	str	r3, [r7, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800711e:	2200      	movs	r2, #0
 8007120:	2100      	movs	r1, #0
 8007122:	2010      	movs	r0, #16
 8007124:	f7f9 ff08 	bl	8000f38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8007128:	2010      	movs	r0, #16
 800712a:	f7f9 ff31 	bl	8000f90 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */

	  huart2.Instance = USART2;
 800712e:	4b21      	ldr	r3, [pc, #132]	; (80071b4 <rpc_uart_init+0xb4>)
 8007130:	4a21      	ldr	r2, [pc, #132]	; (80071b8 <rpc_uart_init+0xb8>)
 8007132:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8007134:	4b1f      	ldr	r3, [pc, #124]	; (80071b4 <rpc_uart_init+0xb4>)
 8007136:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800713a:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800713c:	4b1d      	ldr	r3, [pc, #116]	; (80071b4 <rpc_uart_init+0xb4>)
 800713e:	2200      	movs	r2, #0
 8007140:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8007142:	4b1c      	ldr	r3, [pc, #112]	; (80071b4 <rpc_uart_init+0xb4>)
 8007144:	2200      	movs	r2, #0
 8007146:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8007148:	4b1a      	ldr	r3, [pc, #104]	; (80071b4 <rpc_uart_init+0xb4>)
 800714a:	2200      	movs	r2, #0
 800714c:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 800714e:	4b19      	ldr	r3, [pc, #100]	; (80071b4 <rpc_uart_init+0xb4>)
 8007150:	220c      	movs	r2, #12
 8007152:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007154:	4b17      	ldr	r3, [pc, #92]	; (80071b4 <rpc_uart_init+0xb4>)
 8007156:	2200      	movs	r2, #0
 8007158:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800715a:	4b16      	ldr	r3, [pc, #88]	; (80071b4 <rpc_uart_init+0xb4>)
 800715c:	2200      	movs	r2, #0
 800715e:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007160:	4b14      	ldr	r3, [pc, #80]	; (80071b4 <rpc_uart_init+0xb4>)
 8007162:	2200      	movs	r2, #0
 8007164:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007166:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <rpc_uart_init+0xb4>)
 8007168:	2200      	movs	r2, #0
 800716a:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 800716c:	4811      	ldr	r0, [pc, #68]	; (80071b4 <rpc_uart_init+0xb4>)
 800716e:	f7fd feb7 	bl	8004ee0 <HAL_UART_Init>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <rpc_uart_init+0x7c>
	  {
	    Error_Handler();
 8007178:	f7f9 fa5d 	bl	8000636 <Error_Handler>
	  }

	  /* USER CODE BEGIN USART2_Init 2 */
	  rpc_rx_buf.ctr = 0;
 800717c:	4b0f      	ldr	r3, [pc, #60]	; (80071bc <rpc_uart_init+0xbc>)
 800717e:	2200      	movs	r2, #0
 8007180:	801a      	strh	r2, [r3, #0]
	  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8007182:	4b0c      	ldr	r3, [pc, #48]	; (80071b4 <rpc_uart_init+0xb4>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	4b0a      	ldr	r3, [pc, #40]	; (80071b4 <rpc_uart_init+0xb4>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0210 	orr.w	r2, r2, #16
 8007190:	601a      	str	r2, [r3, #0]
	  if(HAL_UART_Receive_DMA(&huart2, rpc_rx_buf.buf, RPC_BUF_SIZE)!=HAL_OK)
 8007192:	22ff      	movs	r2, #255	; 0xff
 8007194:	490a      	ldr	r1, [pc, #40]	; (80071c0 <rpc_uart_init+0xc0>)
 8007196:	4807      	ldr	r0, [pc, #28]	; (80071b4 <rpc_uart_init+0xb4>)
 8007198:	f7fd ffba 	bl	8005110 <HAL_UART_Receive_DMA>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <rpc_uart_init+0xa6>
	  	{
	  		Error_Handler();
 80071a2:	f7f9 fa48 	bl	8000636 <Error_Handler>
	  	}
	  /* USER CODE END USART2_Init 2 */
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	40021000 	.word	0x40021000
 80071b4:	200003c0 	.word	0x200003c0
 80071b8:	40004400 	.word	0x40004400
 80071bc:	20000170 	.word	0x20000170
 80071c0:	20000172 	.word	0x20000172

080071c4 <rpc_idle_callback>:
 *		in USART2 IRQ handler (stm32l4xx_it.c). Characters are inserted into the ring buffer
 *		if it has enough room for incoming data from the DMA channel; otherwise, data will be lost.
 *		This function is declared in main.h and called in stm32l4xx.c::USART2_IRQHandler()
 */
void rpc_idle_callback(void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart2);
 80071c8:	4809      	ldr	r0, [pc, #36]	; (80071f0 <rpc_idle_callback+0x2c>)
 80071ca:	f7fe f8bf 	bl	800534c <HAL_UART_DMAStop>
	rpc_rx_buf.ctr = (RPC_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx));
 80071ce:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <rpc_idle_callback+0x30>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80071da:	b29a      	uxth	r2, r3
 80071dc:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <rpc_idle_callback+0x34>)
 80071de:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, rpc_rx_buf.buf, RPC_BUF_SIZE);
 80071e0:	22ff      	movs	r2, #255	; 0xff
 80071e2:	4906      	ldr	r1, [pc, #24]	; (80071fc <rpc_idle_callback+0x38>)
 80071e4:	4802      	ldr	r0, [pc, #8]	; (80071f0 <rpc_idle_callback+0x2c>)
 80071e6:	f7fd ff93 	bl	8005110 <HAL_UART_Receive_DMA>
}
 80071ea:	bf00      	nop
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	200003c0 	.word	0x200003c0
 80071f4:	2000027c 	.word	0x2000027c
 80071f8:	20000170 	.word	0x20000170
 80071fc:	20000172 	.word	0x20000172

08007200 <rpc_main_task>:
 *
 * Command protocol to send data: 0x7E 0x64 <data>, <data> is the data bytes to send
 * e.g. 0x7E 0x64 0xff 0x00 0xff draw a line of 24 pixels across the horizontal
 */
void rpc_main_task(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b0c2      	sub	sp, #264	; 0x108
 8007204:	af00      	add	r7, sp, #0
	  uint16_t length;
	  uint8_t msg[RPC_BUF_SIZE];
	  rpc_get_command(msg, &length, 0);
 8007206:	f507 7182 	add.w	r1, r7, #260	; 0x104
 800720a:	1d3b      	adds	r3, r7, #4
 800720c:	2200      	movs	r2, #0
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff ff38 	bl	8007084 <rpc_get_command>

	  if(length!=0){
 8007214:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8007218:	2b00      	cmp	r3, #0
 800721a:	d04c      	beq.n	80072b6 <rpc_main_task+0xb6>
	#ifdef USE_FULL_ASSERT
		  printf("Command echo:\r\n");
 800721c:	4828      	ldr	r0, [pc, #160]	; (80072c0 <rpc_main_task+0xc0>)
 800721e:	f000 f8f5 	bl	800740c <puts>
		  for(uint8_t i=0; i<length; i++)
 8007222:	2300      	movs	r3, #0
 8007224:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8007228:	e00b      	b.n	8007242 <rpc_main_task+0x42>
		  {
			  printf("%c", msg[i]);
 800722a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800722e:	1d3a      	adds	r2, r7, #4
 8007230:	5cd3      	ldrb	r3, [r2, r3]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f87a 	bl	800732c <putchar>
		  for(uint8_t i=0; i<length; i++)
 8007238:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800723c:	3301      	adds	r3, #1
 800723e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8007242:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007246:	b29a      	uxth	r2, r3
 8007248:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800724c:	429a      	cmp	r2, r3
 800724e:	d3ec      	bcc.n	800722a <rpc_main_task+0x2a>
		  }
		  printf("\r\n");
 8007250:	481c      	ldr	r0, [pc, #112]	; (80072c4 <rpc_main_task+0xc4>)
 8007252:	f000 f8db 	bl	800740c <puts>
	#endif
		  if(length>2){
 8007256:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800725a:	2b02      	cmp	r3, #2
 800725c:	d923      	bls.n	80072a6 <rpc_main_task+0xa6>
			if(msg[0]==0x7E && (msg[1]=='c')) //0x7E 0x63
 800725e:	1d3b      	adds	r3, r7, #4
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b7e      	cmp	r3, #126	; 0x7e
 8007264:	d10d      	bne.n	8007282 <rpc_main_task+0x82>
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	785b      	ldrb	r3, [r3, #1]
 800726a:	2b63      	cmp	r3, #99	; 0x63
 800726c:	d109      	bne.n	8007282 <rpc_main_task+0x82>
			{
				spi_write_command((const uint8_t *)&msg[2], length-2);
 800726e:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8007272:	3b02      	subs	r3, #2
 8007274:	b29a      	uxth	r2, r3
 8007276:	1d3b      	adds	r3, r7, #4
 8007278:	3302      	adds	r3, #2
 800727a:	4611      	mov	r1, r2
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff f979 	bl	8006574 <spi_write_command>
			}
			if(msg[0]==0x7E && (msg[1]=='d')) //0x7E 0x64
 8007282:	1d3b      	adds	r3, r7, #4
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b7e      	cmp	r3, #126	; 0x7e
 8007288:	d10d      	bne.n	80072a6 <rpc_main_task+0xa6>
 800728a:	1d3b      	adds	r3, r7, #4
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2b64      	cmp	r3, #100	; 0x64
 8007290:	d109      	bne.n	80072a6 <rpc_main_task+0xa6>
			{
				spi_write_data((const uint8_t *)&msg[2], length-2);
 8007292:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8007296:	3b02      	subs	r3, #2
 8007298:	b29a      	uxth	r2, r3
 800729a:	1d3b      	adds	r3, r7, #4
 800729c:	3302      	adds	r3, #2
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff f98b 	bl	80065bc <spi_write_data>
			}
		  }
		  memset(msg, 0x00, length);
 80072a6:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 80072aa:	461a      	mov	r2, r3
 80072ac:	1d3b      	adds	r3, r7, #4
 80072ae:	2100      	movs	r1, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 f833 	bl	800731c <memset>
	  }
}
 80072b6:	bf00      	nop
 80072b8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	08007f84 	.word	0x08007f84
 80072c4:	08007f94 	.word	0x08007f94

080072c8 <__errno>:
 80072c8:	4b01      	ldr	r3, [pc, #4]	; (80072d0 <__errno+0x8>)
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	20000030 	.word	0x20000030

080072d4 <__libc_init_array>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	4e0d      	ldr	r6, [pc, #52]	; (800730c <__libc_init_array+0x38>)
 80072d8:	4c0d      	ldr	r4, [pc, #52]	; (8007310 <__libc_init_array+0x3c>)
 80072da:	1ba4      	subs	r4, r4, r6
 80072dc:	10a4      	asrs	r4, r4, #2
 80072de:	2500      	movs	r5, #0
 80072e0:	42a5      	cmp	r5, r4
 80072e2:	d109      	bne.n	80072f8 <__libc_init_array+0x24>
 80072e4:	4e0b      	ldr	r6, [pc, #44]	; (8007314 <__libc_init_array+0x40>)
 80072e6:	4c0c      	ldr	r4, [pc, #48]	; (8007318 <__libc_init_array+0x44>)
 80072e8:	f000 fcd2 	bl	8007c90 <_init>
 80072ec:	1ba4      	subs	r4, r4, r6
 80072ee:	10a4      	asrs	r4, r4, #2
 80072f0:	2500      	movs	r5, #0
 80072f2:	42a5      	cmp	r5, r4
 80072f4:	d105      	bne.n	8007302 <__libc_init_array+0x2e>
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072fc:	4798      	blx	r3
 80072fe:	3501      	adds	r5, #1
 8007300:	e7ee      	b.n	80072e0 <__libc_init_array+0xc>
 8007302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007306:	4798      	blx	r3
 8007308:	3501      	adds	r5, #1
 800730a:	e7f2      	b.n	80072f2 <__libc_init_array+0x1e>
 800730c:	0800cdb8 	.word	0x0800cdb8
 8007310:	0800cdb8 	.word	0x0800cdb8
 8007314:	0800cdb8 	.word	0x0800cdb8
 8007318:	0800cdbc 	.word	0x0800cdbc

0800731c <memset>:
 800731c:	4402      	add	r2, r0
 800731e:	4603      	mov	r3, r0
 8007320:	4293      	cmp	r3, r2
 8007322:	d100      	bne.n	8007326 <memset+0xa>
 8007324:	4770      	bx	lr
 8007326:	f803 1b01 	strb.w	r1, [r3], #1
 800732a:	e7f9      	b.n	8007320 <memset+0x4>

0800732c <putchar>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4b08      	ldr	r3, [pc, #32]	; (8007350 <putchar+0x24>)
 8007330:	681c      	ldr	r4, [r3, #0]
 8007332:	4605      	mov	r5, r0
 8007334:	b124      	cbz	r4, 8007340 <putchar+0x14>
 8007336:	69a3      	ldr	r3, [r4, #24]
 8007338:	b913      	cbnz	r3, 8007340 <putchar+0x14>
 800733a:	4620      	mov	r0, r4
 800733c:	f000 fa1e 	bl	800777c <__sinit>
 8007340:	68a2      	ldr	r2, [r4, #8]
 8007342:	4629      	mov	r1, r5
 8007344:	4620      	mov	r0, r4
 8007346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800734a:	f000 bbad 	b.w	8007aa8 <_putc_r>
 800734e:	bf00      	nop
 8007350:	20000030 	.word	0x20000030

08007354 <_puts_r>:
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	460e      	mov	r6, r1
 8007358:	4605      	mov	r5, r0
 800735a:	b118      	cbz	r0, 8007364 <_puts_r+0x10>
 800735c:	6983      	ldr	r3, [r0, #24]
 800735e:	b90b      	cbnz	r3, 8007364 <_puts_r+0x10>
 8007360:	f000 fa0c 	bl	800777c <__sinit>
 8007364:	69ab      	ldr	r3, [r5, #24]
 8007366:	68ac      	ldr	r4, [r5, #8]
 8007368:	b913      	cbnz	r3, 8007370 <_puts_r+0x1c>
 800736a:	4628      	mov	r0, r5
 800736c:	f000 fa06 	bl	800777c <__sinit>
 8007370:	4b23      	ldr	r3, [pc, #140]	; (8007400 <_puts_r+0xac>)
 8007372:	429c      	cmp	r4, r3
 8007374:	d117      	bne.n	80073a6 <_puts_r+0x52>
 8007376:	686c      	ldr	r4, [r5, #4]
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	071b      	lsls	r3, r3, #28
 800737c:	d51d      	bpl.n	80073ba <_puts_r+0x66>
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	b1db      	cbz	r3, 80073ba <_puts_r+0x66>
 8007382:	3e01      	subs	r6, #1
 8007384:	68a3      	ldr	r3, [r4, #8]
 8007386:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800738a:	3b01      	subs	r3, #1
 800738c:	60a3      	str	r3, [r4, #8]
 800738e:	b9e9      	cbnz	r1, 80073cc <_puts_r+0x78>
 8007390:	2b00      	cmp	r3, #0
 8007392:	da2e      	bge.n	80073f2 <_puts_r+0x9e>
 8007394:	4622      	mov	r2, r4
 8007396:	210a      	movs	r1, #10
 8007398:	4628      	mov	r0, r5
 800739a:	f000 f83f 	bl	800741c <__swbuf_r>
 800739e:	3001      	adds	r0, #1
 80073a0:	d011      	beq.n	80073c6 <_puts_r+0x72>
 80073a2:	200a      	movs	r0, #10
 80073a4:	e011      	b.n	80073ca <_puts_r+0x76>
 80073a6:	4b17      	ldr	r3, [pc, #92]	; (8007404 <_puts_r+0xb0>)
 80073a8:	429c      	cmp	r4, r3
 80073aa:	d101      	bne.n	80073b0 <_puts_r+0x5c>
 80073ac:	68ac      	ldr	r4, [r5, #8]
 80073ae:	e7e3      	b.n	8007378 <_puts_r+0x24>
 80073b0:	4b15      	ldr	r3, [pc, #84]	; (8007408 <_puts_r+0xb4>)
 80073b2:	429c      	cmp	r4, r3
 80073b4:	bf08      	it	eq
 80073b6:	68ec      	ldreq	r4, [r5, #12]
 80073b8:	e7de      	b.n	8007378 <_puts_r+0x24>
 80073ba:	4621      	mov	r1, r4
 80073bc:	4628      	mov	r0, r5
 80073be:	f000 f87f 	bl	80074c0 <__swsetup_r>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d0dd      	beq.n	8007382 <_puts_r+0x2e>
 80073c6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da04      	bge.n	80073da <_puts_r+0x86>
 80073d0:	69a2      	ldr	r2, [r4, #24]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	dc06      	bgt.n	80073e4 <_puts_r+0x90>
 80073d6:	290a      	cmp	r1, #10
 80073d8:	d004      	beq.n	80073e4 <_puts_r+0x90>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	6022      	str	r2, [r4, #0]
 80073e0:	7019      	strb	r1, [r3, #0]
 80073e2:	e7cf      	b.n	8007384 <_puts_r+0x30>
 80073e4:	4622      	mov	r2, r4
 80073e6:	4628      	mov	r0, r5
 80073e8:	f000 f818 	bl	800741c <__swbuf_r>
 80073ec:	3001      	adds	r0, #1
 80073ee:	d1c9      	bne.n	8007384 <_puts_r+0x30>
 80073f0:	e7e9      	b.n	80073c6 <_puts_r+0x72>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	200a      	movs	r0, #10
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	6022      	str	r2, [r4, #0]
 80073fa:	7018      	strb	r0, [r3, #0]
 80073fc:	e7e5      	b.n	80073ca <_puts_r+0x76>
 80073fe:	bf00      	nop
 8007400:	0800cd70 	.word	0x0800cd70
 8007404:	0800cd90 	.word	0x0800cd90
 8007408:	0800cd50 	.word	0x0800cd50

0800740c <puts>:
 800740c:	4b02      	ldr	r3, [pc, #8]	; (8007418 <puts+0xc>)
 800740e:	4601      	mov	r1, r0
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	f7ff bf9f 	b.w	8007354 <_puts_r>
 8007416:	bf00      	nop
 8007418:	20000030 	.word	0x20000030

0800741c <__swbuf_r>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	460e      	mov	r6, r1
 8007420:	4614      	mov	r4, r2
 8007422:	4605      	mov	r5, r0
 8007424:	b118      	cbz	r0, 800742e <__swbuf_r+0x12>
 8007426:	6983      	ldr	r3, [r0, #24]
 8007428:	b90b      	cbnz	r3, 800742e <__swbuf_r+0x12>
 800742a:	f000 f9a7 	bl	800777c <__sinit>
 800742e:	4b21      	ldr	r3, [pc, #132]	; (80074b4 <__swbuf_r+0x98>)
 8007430:	429c      	cmp	r4, r3
 8007432:	d12a      	bne.n	800748a <__swbuf_r+0x6e>
 8007434:	686c      	ldr	r4, [r5, #4]
 8007436:	69a3      	ldr	r3, [r4, #24]
 8007438:	60a3      	str	r3, [r4, #8]
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	071a      	lsls	r2, r3, #28
 800743e:	d52e      	bpl.n	800749e <__swbuf_r+0x82>
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	b363      	cbz	r3, 800749e <__swbuf_r+0x82>
 8007444:	6923      	ldr	r3, [r4, #16]
 8007446:	6820      	ldr	r0, [r4, #0]
 8007448:	1ac0      	subs	r0, r0, r3
 800744a:	6963      	ldr	r3, [r4, #20]
 800744c:	b2f6      	uxtb	r6, r6
 800744e:	4283      	cmp	r3, r0
 8007450:	4637      	mov	r7, r6
 8007452:	dc04      	bgt.n	800745e <__swbuf_r+0x42>
 8007454:	4621      	mov	r1, r4
 8007456:	4628      	mov	r0, r5
 8007458:	f000 f926 	bl	80076a8 <_fflush_r>
 800745c:	bb28      	cbnz	r0, 80074aa <__swbuf_r+0x8e>
 800745e:	68a3      	ldr	r3, [r4, #8]
 8007460:	3b01      	subs	r3, #1
 8007462:	60a3      	str	r3, [r4, #8]
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	6022      	str	r2, [r4, #0]
 800746a:	701e      	strb	r6, [r3, #0]
 800746c:	6963      	ldr	r3, [r4, #20]
 800746e:	3001      	adds	r0, #1
 8007470:	4283      	cmp	r3, r0
 8007472:	d004      	beq.n	800747e <__swbuf_r+0x62>
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	07db      	lsls	r3, r3, #31
 8007478:	d519      	bpl.n	80074ae <__swbuf_r+0x92>
 800747a:	2e0a      	cmp	r6, #10
 800747c:	d117      	bne.n	80074ae <__swbuf_r+0x92>
 800747e:	4621      	mov	r1, r4
 8007480:	4628      	mov	r0, r5
 8007482:	f000 f911 	bl	80076a8 <_fflush_r>
 8007486:	b190      	cbz	r0, 80074ae <__swbuf_r+0x92>
 8007488:	e00f      	b.n	80074aa <__swbuf_r+0x8e>
 800748a:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <__swbuf_r+0x9c>)
 800748c:	429c      	cmp	r4, r3
 800748e:	d101      	bne.n	8007494 <__swbuf_r+0x78>
 8007490:	68ac      	ldr	r4, [r5, #8]
 8007492:	e7d0      	b.n	8007436 <__swbuf_r+0x1a>
 8007494:	4b09      	ldr	r3, [pc, #36]	; (80074bc <__swbuf_r+0xa0>)
 8007496:	429c      	cmp	r4, r3
 8007498:	bf08      	it	eq
 800749a:	68ec      	ldreq	r4, [r5, #12]
 800749c:	e7cb      	b.n	8007436 <__swbuf_r+0x1a>
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 f80d 	bl	80074c0 <__swsetup_r>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d0cc      	beq.n	8007444 <__swbuf_r+0x28>
 80074aa:	f04f 37ff 	mov.w	r7, #4294967295
 80074ae:	4638      	mov	r0, r7
 80074b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b2:	bf00      	nop
 80074b4:	0800cd70 	.word	0x0800cd70
 80074b8:	0800cd90 	.word	0x0800cd90
 80074bc:	0800cd50 	.word	0x0800cd50

080074c0 <__swsetup_r>:
 80074c0:	4b32      	ldr	r3, [pc, #200]	; (800758c <__swsetup_r+0xcc>)
 80074c2:	b570      	push	{r4, r5, r6, lr}
 80074c4:	681d      	ldr	r5, [r3, #0]
 80074c6:	4606      	mov	r6, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	b125      	cbz	r5, 80074d6 <__swsetup_r+0x16>
 80074cc:	69ab      	ldr	r3, [r5, #24]
 80074ce:	b913      	cbnz	r3, 80074d6 <__swsetup_r+0x16>
 80074d0:	4628      	mov	r0, r5
 80074d2:	f000 f953 	bl	800777c <__sinit>
 80074d6:	4b2e      	ldr	r3, [pc, #184]	; (8007590 <__swsetup_r+0xd0>)
 80074d8:	429c      	cmp	r4, r3
 80074da:	d10f      	bne.n	80074fc <__swsetup_r+0x3c>
 80074dc:	686c      	ldr	r4, [r5, #4]
 80074de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	0715      	lsls	r5, r2, #28
 80074e6:	d42c      	bmi.n	8007542 <__swsetup_r+0x82>
 80074e8:	06d0      	lsls	r0, r2, #27
 80074ea:	d411      	bmi.n	8007510 <__swsetup_r+0x50>
 80074ec:	2209      	movs	r2, #9
 80074ee:	6032      	str	r2, [r6, #0]
 80074f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f4:	81a3      	strh	r3, [r4, #12]
 80074f6:	f04f 30ff 	mov.w	r0, #4294967295
 80074fa:	e03e      	b.n	800757a <__swsetup_r+0xba>
 80074fc:	4b25      	ldr	r3, [pc, #148]	; (8007594 <__swsetup_r+0xd4>)
 80074fe:	429c      	cmp	r4, r3
 8007500:	d101      	bne.n	8007506 <__swsetup_r+0x46>
 8007502:	68ac      	ldr	r4, [r5, #8]
 8007504:	e7eb      	b.n	80074de <__swsetup_r+0x1e>
 8007506:	4b24      	ldr	r3, [pc, #144]	; (8007598 <__swsetup_r+0xd8>)
 8007508:	429c      	cmp	r4, r3
 800750a:	bf08      	it	eq
 800750c:	68ec      	ldreq	r4, [r5, #12]
 800750e:	e7e6      	b.n	80074de <__swsetup_r+0x1e>
 8007510:	0751      	lsls	r1, r2, #29
 8007512:	d512      	bpl.n	800753a <__swsetup_r+0x7a>
 8007514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007516:	b141      	cbz	r1, 800752a <__swsetup_r+0x6a>
 8007518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800751c:	4299      	cmp	r1, r3
 800751e:	d002      	beq.n	8007526 <__swsetup_r+0x66>
 8007520:	4630      	mov	r0, r6
 8007522:	f000 fa19 	bl	8007958 <_free_r>
 8007526:	2300      	movs	r3, #0
 8007528:	6363      	str	r3, [r4, #52]	; 0x34
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	2300      	movs	r3, #0
 8007534:	6063      	str	r3, [r4, #4]
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	f043 0308 	orr.w	r3, r3, #8
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	b94b      	cbnz	r3, 800755a <__swsetup_r+0x9a>
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800754c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007550:	d003      	beq.n	800755a <__swsetup_r+0x9a>
 8007552:	4621      	mov	r1, r4
 8007554:	4630      	mov	r0, r6
 8007556:	f000 f9bf 	bl	80078d8 <__smakebuf_r>
 800755a:	89a2      	ldrh	r2, [r4, #12]
 800755c:	f012 0301 	ands.w	r3, r2, #1
 8007560:	d00c      	beq.n	800757c <__swsetup_r+0xbc>
 8007562:	2300      	movs	r3, #0
 8007564:	60a3      	str	r3, [r4, #8]
 8007566:	6963      	ldr	r3, [r4, #20]
 8007568:	425b      	negs	r3, r3
 800756a:	61a3      	str	r3, [r4, #24]
 800756c:	6923      	ldr	r3, [r4, #16]
 800756e:	b953      	cbnz	r3, 8007586 <__swsetup_r+0xc6>
 8007570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007574:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007578:	d1ba      	bne.n	80074f0 <__swsetup_r+0x30>
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	0792      	lsls	r2, r2, #30
 800757e:	bf58      	it	pl
 8007580:	6963      	ldrpl	r3, [r4, #20]
 8007582:	60a3      	str	r3, [r4, #8]
 8007584:	e7f2      	b.n	800756c <__swsetup_r+0xac>
 8007586:	2000      	movs	r0, #0
 8007588:	e7f7      	b.n	800757a <__swsetup_r+0xba>
 800758a:	bf00      	nop
 800758c:	20000030 	.word	0x20000030
 8007590:	0800cd70 	.word	0x0800cd70
 8007594:	0800cd90 	.word	0x0800cd90
 8007598:	0800cd50 	.word	0x0800cd50

0800759c <__sflush_r>:
 800759c:	898a      	ldrh	r2, [r1, #12]
 800759e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a2:	4605      	mov	r5, r0
 80075a4:	0710      	lsls	r0, r2, #28
 80075a6:	460c      	mov	r4, r1
 80075a8:	d458      	bmi.n	800765c <__sflush_r+0xc0>
 80075aa:	684b      	ldr	r3, [r1, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	dc05      	bgt.n	80075bc <__sflush_r+0x20>
 80075b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dc02      	bgt.n	80075bc <__sflush_r+0x20>
 80075b6:	2000      	movs	r0, #0
 80075b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075be:	2e00      	cmp	r6, #0
 80075c0:	d0f9      	beq.n	80075b6 <__sflush_r+0x1a>
 80075c2:	2300      	movs	r3, #0
 80075c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075c8:	682f      	ldr	r7, [r5, #0]
 80075ca:	6a21      	ldr	r1, [r4, #32]
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	d032      	beq.n	8007636 <__sflush_r+0x9a>
 80075d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	075a      	lsls	r2, r3, #29
 80075d6:	d505      	bpl.n	80075e4 <__sflush_r+0x48>
 80075d8:	6863      	ldr	r3, [r4, #4]
 80075da:	1ac0      	subs	r0, r0, r3
 80075dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075de:	b10b      	cbz	r3, 80075e4 <__sflush_r+0x48>
 80075e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075e2:	1ac0      	subs	r0, r0, r3
 80075e4:	2300      	movs	r3, #0
 80075e6:	4602      	mov	r2, r0
 80075e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ea:	6a21      	ldr	r1, [r4, #32]
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b0      	blx	r6
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	d106      	bne.n	8007604 <__sflush_r+0x68>
 80075f6:	6829      	ldr	r1, [r5, #0]
 80075f8:	291d      	cmp	r1, #29
 80075fa:	d848      	bhi.n	800768e <__sflush_r+0xf2>
 80075fc:	4a29      	ldr	r2, [pc, #164]	; (80076a4 <__sflush_r+0x108>)
 80075fe:	40ca      	lsrs	r2, r1
 8007600:	07d6      	lsls	r6, r2, #31
 8007602:	d544      	bpl.n	800768e <__sflush_r+0xf2>
 8007604:	2200      	movs	r2, #0
 8007606:	6062      	str	r2, [r4, #4]
 8007608:	04d9      	lsls	r1, r3, #19
 800760a:	6922      	ldr	r2, [r4, #16]
 800760c:	6022      	str	r2, [r4, #0]
 800760e:	d504      	bpl.n	800761a <__sflush_r+0x7e>
 8007610:	1c42      	adds	r2, r0, #1
 8007612:	d101      	bne.n	8007618 <__sflush_r+0x7c>
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	b903      	cbnz	r3, 800761a <__sflush_r+0x7e>
 8007618:	6560      	str	r0, [r4, #84]	; 0x54
 800761a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800761c:	602f      	str	r7, [r5, #0]
 800761e:	2900      	cmp	r1, #0
 8007620:	d0c9      	beq.n	80075b6 <__sflush_r+0x1a>
 8007622:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007626:	4299      	cmp	r1, r3
 8007628:	d002      	beq.n	8007630 <__sflush_r+0x94>
 800762a:	4628      	mov	r0, r5
 800762c:	f000 f994 	bl	8007958 <_free_r>
 8007630:	2000      	movs	r0, #0
 8007632:	6360      	str	r0, [r4, #52]	; 0x34
 8007634:	e7c0      	b.n	80075b8 <__sflush_r+0x1c>
 8007636:	2301      	movs	r3, #1
 8007638:	4628      	mov	r0, r5
 800763a:	47b0      	blx	r6
 800763c:	1c41      	adds	r1, r0, #1
 800763e:	d1c8      	bne.n	80075d2 <__sflush_r+0x36>
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0c5      	beq.n	80075d2 <__sflush_r+0x36>
 8007646:	2b1d      	cmp	r3, #29
 8007648:	d001      	beq.n	800764e <__sflush_r+0xb2>
 800764a:	2b16      	cmp	r3, #22
 800764c:	d101      	bne.n	8007652 <__sflush_r+0xb6>
 800764e:	602f      	str	r7, [r5, #0]
 8007650:	e7b1      	b.n	80075b6 <__sflush_r+0x1a>
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007658:	81a3      	strh	r3, [r4, #12]
 800765a:	e7ad      	b.n	80075b8 <__sflush_r+0x1c>
 800765c:	690f      	ldr	r7, [r1, #16]
 800765e:	2f00      	cmp	r7, #0
 8007660:	d0a9      	beq.n	80075b6 <__sflush_r+0x1a>
 8007662:	0793      	lsls	r3, r2, #30
 8007664:	680e      	ldr	r6, [r1, #0]
 8007666:	bf08      	it	eq
 8007668:	694b      	ldreq	r3, [r1, #20]
 800766a:	600f      	str	r7, [r1, #0]
 800766c:	bf18      	it	ne
 800766e:	2300      	movne	r3, #0
 8007670:	eba6 0807 	sub.w	r8, r6, r7
 8007674:	608b      	str	r3, [r1, #8]
 8007676:	f1b8 0f00 	cmp.w	r8, #0
 800767a:	dd9c      	ble.n	80075b6 <__sflush_r+0x1a>
 800767c:	4643      	mov	r3, r8
 800767e:	463a      	mov	r2, r7
 8007680:	6a21      	ldr	r1, [r4, #32]
 8007682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007684:	4628      	mov	r0, r5
 8007686:	47b0      	blx	r6
 8007688:	2800      	cmp	r0, #0
 800768a:	dc06      	bgt.n	800769a <__sflush_r+0xfe>
 800768c:	89a3      	ldrh	r3, [r4, #12]
 800768e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007692:	81a3      	strh	r3, [r4, #12]
 8007694:	f04f 30ff 	mov.w	r0, #4294967295
 8007698:	e78e      	b.n	80075b8 <__sflush_r+0x1c>
 800769a:	4407      	add	r7, r0
 800769c:	eba8 0800 	sub.w	r8, r8, r0
 80076a0:	e7e9      	b.n	8007676 <__sflush_r+0xda>
 80076a2:	bf00      	nop
 80076a4:	20400001 	.word	0x20400001

080076a8 <_fflush_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	690b      	ldr	r3, [r1, #16]
 80076ac:	4605      	mov	r5, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	b1db      	cbz	r3, 80076ea <_fflush_r+0x42>
 80076b2:	b118      	cbz	r0, 80076bc <_fflush_r+0x14>
 80076b4:	6983      	ldr	r3, [r0, #24]
 80076b6:	b90b      	cbnz	r3, 80076bc <_fflush_r+0x14>
 80076b8:	f000 f860 	bl	800777c <__sinit>
 80076bc:	4b0c      	ldr	r3, [pc, #48]	; (80076f0 <_fflush_r+0x48>)
 80076be:	429c      	cmp	r4, r3
 80076c0:	d109      	bne.n	80076d6 <_fflush_r+0x2e>
 80076c2:	686c      	ldr	r4, [r5, #4]
 80076c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c8:	b17b      	cbz	r3, 80076ea <_fflush_r+0x42>
 80076ca:	4621      	mov	r1, r4
 80076cc:	4628      	mov	r0, r5
 80076ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d2:	f7ff bf63 	b.w	800759c <__sflush_r>
 80076d6:	4b07      	ldr	r3, [pc, #28]	; (80076f4 <_fflush_r+0x4c>)
 80076d8:	429c      	cmp	r4, r3
 80076da:	d101      	bne.n	80076e0 <_fflush_r+0x38>
 80076dc:	68ac      	ldr	r4, [r5, #8]
 80076de:	e7f1      	b.n	80076c4 <_fflush_r+0x1c>
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <_fflush_r+0x50>)
 80076e2:	429c      	cmp	r4, r3
 80076e4:	bf08      	it	eq
 80076e6:	68ec      	ldreq	r4, [r5, #12]
 80076e8:	e7ec      	b.n	80076c4 <_fflush_r+0x1c>
 80076ea:	2000      	movs	r0, #0
 80076ec:	bd38      	pop	{r3, r4, r5, pc}
 80076ee:	bf00      	nop
 80076f0:	0800cd70 	.word	0x0800cd70
 80076f4:	0800cd90 	.word	0x0800cd90
 80076f8:	0800cd50 	.word	0x0800cd50

080076fc <std>:
 80076fc:	2300      	movs	r3, #0
 80076fe:	b510      	push	{r4, lr}
 8007700:	4604      	mov	r4, r0
 8007702:	e9c0 3300 	strd	r3, r3, [r0]
 8007706:	6083      	str	r3, [r0, #8]
 8007708:	8181      	strh	r1, [r0, #12]
 800770a:	6643      	str	r3, [r0, #100]	; 0x64
 800770c:	81c2      	strh	r2, [r0, #14]
 800770e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007712:	6183      	str	r3, [r0, #24]
 8007714:	4619      	mov	r1, r3
 8007716:	2208      	movs	r2, #8
 8007718:	305c      	adds	r0, #92	; 0x5c
 800771a:	f7ff fdff 	bl	800731c <memset>
 800771e:	4b05      	ldr	r3, [pc, #20]	; (8007734 <std+0x38>)
 8007720:	6263      	str	r3, [r4, #36]	; 0x24
 8007722:	4b05      	ldr	r3, [pc, #20]	; (8007738 <std+0x3c>)
 8007724:	62a3      	str	r3, [r4, #40]	; 0x28
 8007726:	4b05      	ldr	r3, [pc, #20]	; (800773c <std+0x40>)
 8007728:	62e3      	str	r3, [r4, #44]	; 0x2c
 800772a:	4b05      	ldr	r3, [pc, #20]	; (8007740 <std+0x44>)
 800772c:	6224      	str	r4, [r4, #32]
 800772e:	6323      	str	r3, [r4, #48]	; 0x30
 8007730:	bd10      	pop	{r4, pc}
 8007732:	bf00      	nop
 8007734:	08007b35 	.word	0x08007b35
 8007738:	08007b57 	.word	0x08007b57
 800773c:	08007b8f 	.word	0x08007b8f
 8007740:	08007bb3 	.word	0x08007bb3

08007744 <_cleanup_r>:
 8007744:	4901      	ldr	r1, [pc, #4]	; (800774c <_cleanup_r+0x8>)
 8007746:	f000 b885 	b.w	8007854 <_fwalk_reent>
 800774a:	bf00      	nop
 800774c:	080076a9 	.word	0x080076a9

08007750 <__sfmoreglue>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	1e4a      	subs	r2, r1, #1
 8007754:	2568      	movs	r5, #104	; 0x68
 8007756:	4355      	muls	r5, r2
 8007758:	460e      	mov	r6, r1
 800775a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800775e:	f000 f949 	bl	80079f4 <_malloc_r>
 8007762:	4604      	mov	r4, r0
 8007764:	b140      	cbz	r0, 8007778 <__sfmoreglue+0x28>
 8007766:	2100      	movs	r1, #0
 8007768:	e9c0 1600 	strd	r1, r6, [r0]
 800776c:	300c      	adds	r0, #12
 800776e:	60a0      	str	r0, [r4, #8]
 8007770:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007774:	f7ff fdd2 	bl	800731c <memset>
 8007778:	4620      	mov	r0, r4
 800777a:	bd70      	pop	{r4, r5, r6, pc}

0800777c <__sinit>:
 800777c:	6983      	ldr	r3, [r0, #24]
 800777e:	b510      	push	{r4, lr}
 8007780:	4604      	mov	r4, r0
 8007782:	bb33      	cbnz	r3, 80077d2 <__sinit+0x56>
 8007784:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007788:	6503      	str	r3, [r0, #80]	; 0x50
 800778a:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <__sinit+0x58>)
 800778c:	4a12      	ldr	r2, [pc, #72]	; (80077d8 <__sinit+0x5c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6282      	str	r2, [r0, #40]	; 0x28
 8007792:	4298      	cmp	r0, r3
 8007794:	bf04      	itt	eq
 8007796:	2301      	moveq	r3, #1
 8007798:	6183      	streq	r3, [r0, #24]
 800779a:	f000 f81f 	bl	80077dc <__sfp>
 800779e:	6060      	str	r0, [r4, #4]
 80077a0:	4620      	mov	r0, r4
 80077a2:	f000 f81b 	bl	80077dc <__sfp>
 80077a6:	60a0      	str	r0, [r4, #8]
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 f817 	bl	80077dc <__sfp>
 80077ae:	2200      	movs	r2, #0
 80077b0:	60e0      	str	r0, [r4, #12]
 80077b2:	2104      	movs	r1, #4
 80077b4:	6860      	ldr	r0, [r4, #4]
 80077b6:	f7ff ffa1 	bl	80076fc <std>
 80077ba:	2201      	movs	r2, #1
 80077bc:	2109      	movs	r1, #9
 80077be:	68a0      	ldr	r0, [r4, #8]
 80077c0:	f7ff ff9c 	bl	80076fc <std>
 80077c4:	2202      	movs	r2, #2
 80077c6:	2112      	movs	r1, #18
 80077c8:	68e0      	ldr	r0, [r4, #12]
 80077ca:	f7ff ff97 	bl	80076fc <std>
 80077ce:	2301      	movs	r3, #1
 80077d0:	61a3      	str	r3, [r4, #24]
 80077d2:	bd10      	pop	{r4, pc}
 80077d4:	0800cd4c 	.word	0x0800cd4c
 80077d8:	08007745 	.word	0x08007745

080077dc <__sfp>:
 80077dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077de:	4b1b      	ldr	r3, [pc, #108]	; (800784c <__sfp+0x70>)
 80077e0:	681e      	ldr	r6, [r3, #0]
 80077e2:	69b3      	ldr	r3, [r6, #24]
 80077e4:	4607      	mov	r7, r0
 80077e6:	b913      	cbnz	r3, 80077ee <__sfp+0x12>
 80077e8:	4630      	mov	r0, r6
 80077ea:	f7ff ffc7 	bl	800777c <__sinit>
 80077ee:	3648      	adds	r6, #72	; 0x48
 80077f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	d503      	bpl.n	8007800 <__sfp+0x24>
 80077f8:	6833      	ldr	r3, [r6, #0]
 80077fa:	b133      	cbz	r3, 800780a <__sfp+0x2e>
 80077fc:	6836      	ldr	r6, [r6, #0]
 80077fe:	e7f7      	b.n	80077f0 <__sfp+0x14>
 8007800:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007804:	b16d      	cbz	r5, 8007822 <__sfp+0x46>
 8007806:	3468      	adds	r4, #104	; 0x68
 8007808:	e7f4      	b.n	80077f4 <__sfp+0x18>
 800780a:	2104      	movs	r1, #4
 800780c:	4638      	mov	r0, r7
 800780e:	f7ff ff9f 	bl	8007750 <__sfmoreglue>
 8007812:	6030      	str	r0, [r6, #0]
 8007814:	2800      	cmp	r0, #0
 8007816:	d1f1      	bne.n	80077fc <__sfp+0x20>
 8007818:	230c      	movs	r3, #12
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	4604      	mov	r4, r0
 800781e:	4620      	mov	r0, r4
 8007820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007822:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <__sfp+0x74>)
 8007824:	6665      	str	r5, [r4, #100]	; 0x64
 8007826:	e9c4 5500 	strd	r5, r5, [r4]
 800782a:	60a5      	str	r5, [r4, #8]
 800782c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007830:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007834:	2208      	movs	r2, #8
 8007836:	4629      	mov	r1, r5
 8007838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800783c:	f7ff fd6e 	bl	800731c <memset>
 8007840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007848:	e7e9      	b.n	800781e <__sfp+0x42>
 800784a:	bf00      	nop
 800784c:	0800cd4c 	.word	0x0800cd4c
 8007850:	ffff0001 	.word	0xffff0001

08007854 <_fwalk_reent>:
 8007854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007858:	4680      	mov	r8, r0
 800785a:	4689      	mov	r9, r1
 800785c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007860:	2600      	movs	r6, #0
 8007862:	b914      	cbnz	r4, 800786a <_fwalk_reent+0x16>
 8007864:	4630      	mov	r0, r6
 8007866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800786e:	3f01      	subs	r7, #1
 8007870:	d501      	bpl.n	8007876 <_fwalk_reent+0x22>
 8007872:	6824      	ldr	r4, [r4, #0]
 8007874:	e7f5      	b.n	8007862 <_fwalk_reent+0xe>
 8007876:	89ab      	ldrh	r3, [r5, #12]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d907      	bls.n	800788c <_fwalk_reent+0x38>
 800787c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007880:	3301      	adds	r3, #1
 8007882:	d003      	beq.n	800788c <_fwalk_reent+0x38>
 8007884:	4629      	mov	r1, r5
 8007886:	4640      	mov	r0, r8
 8007888:	47c8      	blx	r9
 800788a:	4306      	orrs	r6, r0
 800788c:	3568      	adds	r5, #104	; 0x68
 800788e:	e7ee      	b.n	800786e <_fwalk_reent+0x1a>

08007890 <__swhatbuf_r>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	460e      	mov	r6, r1
 8007894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007898:	2900      	cmp	r1, #0
 800789a:	b096      	sub	sp, #88	; 0x58
 800789c:	4614      	mov	r4, r2
 800789e:	461d      	mov	r5, r3
 80078a0:	da07      	bge.n	80078b2 <__swhatbuf_r+0x22>
 80078a2:	2300      	movs	r3, #0
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	89b3      	ldrh	r3, [r6, #12]
 80078a8:	061a      	lsls	r2, r3, #24
 80078aa:	d410      	bmi.n	80078ce <__swhatbuf_r+0x3e>
 80078ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078b0:	e00e      	b.n	80078d0 <__swhatbuf_r+0x40>
 80078b2:	466a      	mov	r2, sp
 80078b4:	f000 f9a4 	bl	8007c00 <_fstat_r>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	dbf2      	blt.n	80078a2 <__swhatbuf_r+0x12>
 80078bc:	9a01      	ldr	r2, [sp, #4]
 80078be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078c6:	425a      	negs	r2, r3
 80078c8:	415a      	adcs	r2, r3
 80078ca:	602a      	str	r2, [r5, #0]
 80078cc:	e7ee      	b.n	80078ac <__swhatbuf_r+0x1c>
 80078ce:	2340      	movs	r3, #64	; 0x40
 80078d0:	2000      	movs	r0, #0
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	b016      	add	sp, #88	; 0x58
 80078d6:	bd70      	pop	{r4, r5, r6, pc}

080078d8 <__smakebuf_r>:
 80078d8:	898b      	ldrh	r3, [r1, #12]
 80078da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078dc:	079d      	lsls	r5, r3, #30
 80078de:	4606      	mov	r6, r0
 80078e0:	460c      	mov	r4, r1
 80078e2:	d507      	bpl.n	80078f4 <__smakebuf_r+0x1c>
 80078e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	6123      	str	r3, [r4, #16]
 80078ec:	2301      	movs	r3, #1
 80078ee:	6163      	str	r3, [r4, #20]
 80078f0:	b002      	add	sp, #8
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	ab01      	add	r3, sp, #4
 80078f6:	466a      	mov	r2, sp
 80078f8:	f7ff ffca 	bl	8007890 <__swhatbuf_r>
 80078fc:	9900      	ldr	r1, [sp, #0]
 80078fe:	4605      	mov	r5, r0
 8007900:	4630      	mov	r0, r6
 8007902:	f000 f877 	bl	80079f4 <_malloc_r>
 8007906:	b948      	cbnz	r0, 800791c <__smakebuf_r+0x44>
 8007908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800790c:	059a      	lsls	r2, r3, #22
 800790e:	d4ef      	bmi.n	80078f0 <__smakebuf_r+0x18>
 8007910:	f023 0303 	bic.w	r3, r3, #3
 8007914:	f043 0302 	orr.w	r3, r3, #2
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	e7e3      	b.n	80078e4 <__smakebuf_r+0xc>
 800791c:	4b0d      	ldr	r3, [pc, #52]	; (8007954 <__smakebuf_r+0x7c>)
 800791e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	6020      	str	r0, [r4, #0]
 8007924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007928:	81a3      	strh	r3, [r4, #12]
 800792a:	9b00      	ldr	r3, [sp, #0]
 800792c:	6163      	str	r3, [r4, #20]
 800792e:	9b01      	ldr	r3, [sp, #4]
 8007930:	6120      	str	r0, [r4, #16]
 8007932:	b15b      	cbz	r3, 800794c <__smakebuf_r+0x74>
 8007934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007938:	4630      	mov	r0, r6
 800793a:	f000 f973 	bl	8007c24 <_isatty_r>
 800793e:	b128      	cbz	r0, 800794c <__smakebuf_r+0x74>
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	f023 0303 	bic.w	r3, r3, #3
 8007946:	f043 0301 	orr.w	r3, r3, #1
 800794a:	81a3      	strh	r3, [r4, #12]
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	431d      	orrs	r5, r3
 8007950:	81a5      	strh	r5, [r4, #12]
 8007952:	e7cd      	b.n	80078f0 <__smakebuf_r+0x18>
 8007954:	08007745 	.word	0x08007745

08007958 <_free_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4605      	mov	r5, r0
 800795c:	2900      	cmp	r1, #0
 800795e:	d045      	beq.n	80079ec <_free_r+0x94>
 8007960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007964:	1f0c      	subs	r4, r1, #4
 8007966:	2b00      	cmp	r3, #0
 8007968:	bfb8      	it	lt
 800796a:	18e4      	addlt	r4, r4, r3
 800796c:	f000 f97c 	bl	8007c68 <__malloc_lock>
 8007970:	4a1f      	ldr	r2, [pc, #124]	; (80079f0 <_free_r+0x98>)
 8007972:	6813      	ldr	r3, [r2, #0]
 8007974:	4610      	mov	r0, r2
 8007976:	b933      	cbnz	r3, 8007986 <_free_r+0x2e>
 8007978:	6063      	str	r3, [r4, #4]
 800797a:	6014      	str	r4, [r2, #0]
 800797c:	4628      	mov	r0, r5
 800797e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007982:	f000 b972 	b.w	8007c6a <__malloc_unlock>
 8007986:	42a3      	cmp	r3, r4
 8007988:	d90c      	bls.n	80079a4 <_free_r+0x4c>
 800798a:	6821      	ldr	r1, [r4, #0]
 800798c:	1862      	adds	r2, r4, r1
 800798e:	4293      	cmp	r3, r2
 8007990:	bf04      	itt	eq
 8007992:	681a      	ldreq	r2, [r3, #0]
 8007994:	685b      	ldreq	r3, [r3, #4]
 8007996:	6063      	str	r3, [r4, #4]
 8007998:	bf04      	itt	eq
 800799a:	1852      	addeq	r2, r2, r1
 800799c:	6022      	streq	r2, [r4, #0]
 800799e:	6004      	str	r4, [r0, #0]
 80079a0:	e7ec      	b.n	800797c <_free_r+0x24>
 80079a2:	4613      	mov	r3, r2
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	b10a      	cbz	r2, 80079ac <_free_r+0x54>
 80079a8:	42a2      	cmp	r2, r4
 80079aa:	d9fa      	bls.n	80079a2 <_free_r+0x4a>
 80079ac:	6819      	ldr	r1, [r3, #0]
 80079ae:	1858      	adds	r0, r3, r1
 80079b0:	42a0      	cmp	r0, r4
 80079b2:	d10b      	bne.n	80079cc <_free_r+0x74>
 80079b4:	6820      	ldr	r0, [r4, #0]
 80079b6:	4401      	add	r1, r0
 80079b8:	1858      	adds	r0, r3, r1
 80079ba:	4282      	cmp	r2, r0
 80079bc:	6019      	str	r1, [r3, #0]
 80079be:	d1dd      	bne.n	800797c <_free_r+0x24>
 80079c0:	6810      	ldr	r0, [r2, #0]
 80079c2:	6852      	ldr	r2, [r2, #4]
 80079c4:	605a      	str	r2, [r3, #4]
 80079c6:	4401      	add	r1, r0
 80079c8:	6019      	str	r1, [r3, #0]
 80079ca:	e7d7      	b.n	800797c <_free_r+0x24>
 80079cc:	d902      	bls.n	80079d4 <_free_r+0x7c>
 80079ce:	230c      	movs	r3, #12
 80079d0:	602b      	str	r3, [r5, #0]
 80079d2:	e7d3      	b.n	800797c <_free_r+0x24>
 80079d4:	6820      	ldr	r0, [r4, #0]
 80079d6:	1821      	adds	r1, r4, r0
 80079d8:	428a      	cmp	r2, r1
 80079da:	bf04      	itt	eq
 80079dc:	6811      	ldreq	r1, [r2, #0]
 80079de:	6852      	ldreq	r2, [r2, #4]
 80079e0:	6062      	str	r2, [r4, #4]
 80079e2:	bf04      	itt	eq
 80079e4:	1809      	addeq	r1, r1, r0
 80079e6:	6021      	streq	r1, [r4, #0]
 80079e8:	605c      	str	r4, [r3, #4]
 80079ea:	e7c7      	b.n	800797c <_free_r+0x24>
 80079ec:	bd38      	pop	{r3, r4, r5, pc}
 80079ee:	bf00      	nop
 80079f0:	20000274 	.word	0x20000274

080079f4 <_malloc_r>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	1ccd      	adds	r5, r1, #3
 80079f8:	f025 0503 	bic.w	r5, r5, #3
 80079fc:	3508      	adds	r5, #8
 80079fe:	2d0c      	cmp	r5, #12
 8007a00:	bf38      	it	cc
 8007a02:	250c      	movcc	r5, #12
 8007a04:	2d00      	cmp	r5, #0
 8007a06:	4606      	mov	r6, r0
 8007a08:	db01      	blt.n	8007a0e <_malloc_r+0x1a>
 8007a0a:	42a9      	cmp	r1, r5
 8007a0c:	d903      	bls.n	8007a16 <_malloc_r+0x22>
 8007a0e:	230c      	movs	r3, #12
 8007a10:	6033      	str	r3, [r6, #0]
 8007a12:	2000      	movs	r0, #0
 8007a14:	bd70      	pop	{r4, r5, r6, pc}
 8007a16:	f000 f927 	bl	8007c68 <__malloc_lock>
 8007a1a:	4a21      	ldr	r2, [pc, #132]	; (8007aa0 <_malloc_r+0xac>)
 8007a1c:	6814      	ldr	r4, [r2, #0]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	b991      	cbnz	r1, 8007a48 <_malloc_r+0x54>
 8007a22:	4c20      	ldr	r4, [pc, #128]	; (8007aa4 <_malloc_r+0xb0>)
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	b91b      	cbnz	r3, 8007a30 <_malloc_r+0x3c>
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f000 f873 	bl	8007b14 <_sbrk_r>
 8007a2e:	6020      	str	r0, [r4, #0]
 8007a30:	4629      	mov	r1, r5
 8007a32:	4630      	mov	r0, r6
 8007a34:	f000 f86e 	bl	8007b14 <_sbrk_r>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d124      	bne.n	8007a86 <_malloc_r+0x92>
 8007a3c:	230c      	movs	r3, #12
 8007a3e:	6033      	str	r3, [r6, #0]
 8007a40:	4630      	mov	r0, r6
 8007a42:	f000 f912 	bl	8007c6a <__malloc_unlock>
 8007a46:	e7e4      	b.n	8007a12 <_malloc_r+0x1e>
 8007a48:	680b      	ldr	r3, [r1, #0]
 8007a4a:	1b5b      	subs	r3, r3, r5
 8007a4c:	d418      	bmi.n	8007a80 <_malloc_r+0x8c>
 8007a4e:	2b0b      	cmp	r3, #11
 8007a50:	d90f      	bls.n	8007a72 <_malloc_r+0x7e>
 8007a52:	600b      	str	r3, [r1, #0]
 8007a54:	50cd      	str	r5, [r1, r3]
 8007a56:	18cc      	adds	r4, r1, r3
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f000 f906 	bl	8007c6a <__malloc_unlock>
 8007a5e:	f104 000b 	add.w	r0, r4, #11
 8007a62:	1d23      	adds	r3, r4, #4
 8007a64:	f020 0007 	bic.w	r0, r0, #7
 8007a68:	1ac3      	subs	r3, r0, r3
 8007a6a:	d0d3      	beq.n	8007a14 <_malloc_r+0x20>
 8007a6c:	425a      	negs	r2, r3
 8007a6e:	50e2      	str	r2, [r4, r3]
 8007a70:	e7d0      	b.n	8007a14 <_malloc_r+0x20>
 8007a72:	428c      	cmp	r4, r1
 8007a74:	684b      	ldr	r3, [r1, #4]
 8007a76:	bf16      	itet	ne
 8007a78:	6063      	strne	r3, [r4, #4]
 8007a7a:	6013      	streq	r3, [r2, #0]
 8007a7c:	460c      	movne	r4, r1
 8007a7e:	e7eb      	b.n	8007a58 <_malloc_r+0x64>
 8007a80:	460c      	mov	r4, r1
 8007a82:	6849      	ldr	r1, [r1, #4]
 8007a84:	e7cc      	b.n	8007a20 <_malloc_r+0x2c>
 8007a86:	1cc4      	adds	r4, r0, #3
 8007a88:	f024 0403 	bic.w	r4, r4, #3
 8007a8c:	42a0      	cmp	r0, r4
 8007a8e:	d005      	beq.n	8007a9c <_malloc_r+0xa8>
 8007a90:	1a21      	subs	r1, r4, r0
 8007a92:	4630      	mov	r0, r6
 8007a94:	f000 f83e 	bl	8007b14 <_sbrk_r>
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d0cf      	beq.n	8007a3c <_malloc_r+0x48>
 8007a9c:	6025      	str	r5, [r4, #0]
 8007a9e:	e7db      	b.n	8007a58 <_malloc_r+0x64>
 8007aa0:	20000274 	.word	0x20000274
 8007aa4:	20000278 	.word	0x20000278

08007aa8 <_putc_r>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	460d      	mov	r5, r1
 8007aac:	4614      	mov	r4, r2
 8007aae:	4606      	mov	r6, r0
 8007ab0:	b118      	cbz	r0, 8007aba <_putc_r+0x12>
 8007ab2:	6983      	ldr	r3, [r0, #24]
 8007ab4:	b90b      	cbnz	r3, 8007aba <_putc_r+0x12>
 8007ab6:	f7ff fe61 	bl	800777c <__sinit>
 8007aba:	4b13      	ldr	r3, [pc, #76]	; (8007b08 <_putc_r+0x60>)
 8007abc:	429c      	cmp	r4, r3
 8007abe:	d112      	bne.n	8007ae6 <_putc_r+0x3e>
 8007ac0:	6874      	ldr	r4, [r6, #4]
 8007ac2:	68a3      	ldr	r3, [r4, #8]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	60a3      	str	r3, [r4, #8]
 8007aca:	da16      	bge.n	8007afa <_putc_r+0x52>
 8007acc:	69a2      	ldr	r2, [r4, #24]
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	db02      	blt.n	8007ad8 <_putc_r+0x30>
 8007ad2:	b2eb      	uxtb	r3, r5
 8007ad4:	2b0a      	cmp	r3, #10
 8007ad6:	d110      	bne.n	8007afa <_putc_r+0x52>
 8007ad8:	4622      	mov	r2, r4
 8007ada:	4629      	mov	r1, r5
 8007adc:	4630      	mov	r0, r6
 8007ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ae2:	f7ff bc9b 	b.w	800741c <__swbuf_r>
 8007ae6:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <_putc_r+0x64>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d101      	bne.n	8007af0 <_putc_r+0x48>
 8007aec:	68b4      	ldr	r4, [r6, #8]
 8007aee:	e7e8      	b.n	8007ac2 <_putc_r+0x1a>
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <_putc_r+0x68>)
 8007af2:	429c      	cmp	r4, r3
 8007af4:	bf08      	it	eq
 8007af6:	68f4      	ldreq	r4, [r6, #12]
 8007af8:	e7e3      	b.n	8007ac2 <_putc_r+0x1a>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	6022      	str	r2, [r4, #0]
 8007b00:	701d      	strb	r5, [r3, #0]
 8007b02:	b2e8      	uxtb	r0, r5
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
 8007b06:	bf00      	nop
 8007b08:	0800cd70 	.word	0x0800cd70
 8007b0c:	0800cd90 	.word	0x0800cd90
 8007b10:	0800cd50 	.word	0x0800cd50

08007b14 <_sbrk_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4c06      	ldr	r4, [pc, #24]	; (8007b30 <_sbrk_r+0x1c>)
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	4608      	mov	r0, r1
 8007b1e:	6023      	str	r3, [r4, #0]
 8007b20:	f7f8 ffee 	bl	8000b00 <_sbrk>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_sbrk_r+0x1a>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_sbrk_r+0x1a>
 8007b2c:	602b      	str	r3, [r5, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	20000a8c 	.word	0x20000a8c

08007b34 <__sread>:
 8007b34:	b510      	push	{r4, lr}
 8007b36:	460c      	mov	r4, r1
 8007b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3c:	f000 f896 	bl	8007c6c <_read_r>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	bfab      	itete	ge
 8007b44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b46:	89a3      	ldrhlt	r3, [r4, #12]
 8007b48:	181b      	addge	r3, r3, r0
 8007b4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b4e:	bfac      	ite	ge
 8007b50:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b52:	81a3      	strhlt	r3, [r4, #12]
 8007b54:	bd10      	pop	{r4, pc}

08007b56 <__swrite>:
 8007b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5a:	461f      	mov	r7, r3
 8007b5c:	898b      	ldrh	r3, [r1, #12]
 8007b5e:	05db      	lsls	r3, r3, #23
 8007b60:	4605      	mov	r5, r0
 8007b62:	460c      	mov	r4, r1
 8007b64:	4616      	mov	r6, r2
 8007b66:	d505      	bpl.n	8007b74 <__swrite+0x1e>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b70:	f000 f868 	bl	8007c44 <_lseek_r>
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b7e:	81a3      	strh	r3, [r4, #12]
 8007b80:	4632      	mov	r2, r6
 8007b82:	463b      	mov	r3, r7
 8007b84:	4628      	mov	r0, r5
 8007b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8a:	f000 b817 	b.w	8007bbc <_write_r>

08007b8e <__sseek>:
 8007b8e:	b510      	push	{r4, lr}
 8007b90:	460c      	mov	r4, r1
 8007b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b96:	f000 f855 	bl	8007c44 <_lseek_r>
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	bf15      	itete	ne
 8007ba0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007baa:	81a3      	strheq	r3, [r4, #12]
 8007bac:	bf18      	it	ne
 8007bae:	81a3      	strhne	r3, [r4, #12]
 8007bb0:	bd10      	pop	{r4, pc}

08007bb2 <__sclose>:
 8007bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb6:	f000 b813 	b.w	8007be0 <_close_r>
	...

08007bbc <_write_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4c07      	ldr	r4, [pc, #28]	; (8007bdc <_write_r+0x20>)
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	4608      	mov	r0, r1
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	6022      	str	r2, [r4, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f7f8 ff47 	bl	8000a5e <_write>
 8007bd0:	1c43      	adds	r3, r0, #1
 8007bd2:	d102      	bne.n	8007bda <_write_r+0x1e>
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	b103      	cbz	r3, 8007bda <_write_r+0x1e>
 8007bd8:	602b      	str	r3, [r5, #0]
 8007bda:	bd38      	pop	{r3, r4, r5, pc}
 8007bdc:	20000a8c 	.word	0x20000a8c

08007be0 <_close_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4c06      	ldr	r4, [pc, #24]	; (8007bfc <_close_r+0x1c>)
 8007be4:	2300      	movs	r3, #0
 8007be6:	4605      	mov	r5, r0
 8007be8:	4608      	mov	r0, r1
 8007bea:	6023      	str	r3, [r4, #0]
 8007bec:	f7f8 ff53 	bl	8000a96 <_close>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d102      	bne.n	8007bfa <_close_r+0x1a>
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	b103      	cbz	r3, 8007bfa <_close_r+0x1a>
 8007bf8:	602b      	str	r3, [r5, #0]
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}
 8007bfc:	20000a8c 	.word	0x20000a8c

08007c00 <_fstat_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	4c07      	ldr	r4, [pc, #28]	; (8007c20 <_fstat_r+0x20>)
 8007c04:	2300      	movs	r3, #0
 8007c06:	4605      	mov	r5, r0
 8007c08:	4608      	mov	r0, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	f7f8 ff4e 	bl	8000aae <_fstat>
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	d102      	bne.n	8007c1c <_fstat_r+0x1c>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	b103      	cbz	r3, 8007c1c <_fstat_r+0x1c>
 8007c1a:	602b      	str	r3, [r5, #0]
 8007c1c:	bd38      	pop	{r3, r4, r5, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000a8c 	.word	0x20000a8c

08007c24 <_isatty_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4c06      	ldr	r4, [pc, #24]	; (8007c40 <_isatty_r+0x1c>)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	6023      	str	r3, [r4, #0]
 8007c30:	f7f8 ff4d 	bl	8000ace <_isatty>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	d102      	bne.n	8007c3e <_isatty_r+0x1a>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	b103      	cbz	r3, 8007c3e <_isatty_r+0x1a>
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	bd38      	pop	{r3, r4, r5, pc}
 8007c40:	20000a8c 	.word	0x20000a8c

08007c44 <_lseek_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4c07      	ldr	r4, [pc, #28]	; (8007c64 <_lseek_r+0x20>)
 8007c48:	4605      	mov	r5, r0
 8007c4a:	4608      	mov	r0, r1
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	2200      	movs	r2, #0
 8007c50:	6022      	str	r2, [r4, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	f7f8 ff46 	bl	8000ae4 <_lseek>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_lseek_r+0x1e>
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_lseek_r+0x1e>
 8007c60:	602b      	str	r3, [r5, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	20000a8c 	.word	0x20000a8c

08007c68 <__malloc_lock>:
 8007c68:	4770      	bx	lr

08007c6a <__malloc_unlock>:
 8007c6a:	4770      	bx	lr

08007c6c <_read_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4c07      	ldr	r4, [pc, #28]	; (8007c8c <_read_r+0x20>)
 8007c70:	4605      	mov	r5, r0
 8007c72:	4608      	mov	r0, r1
 8007c74:	4611      	mov	r1, r2
 8007c76:	2200      	movs	r2, #0
 8007c78:	6022      	str	r2, [r4, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f7f8 fed2 	bl	8000a24 <_read>
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	d102      	bne.n	8007c8a <_read_r+0x1e>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	b103      	cbz	r3, 8007c8a <_read_r+0x1e>
 8007c88:	602b      	str	r3, [r5, #0]
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	20000a8c 	.word	0x20000a8c

08007c90 <_init>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	bf00      	nop
 8007c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c96:	bc08      	pop	{r3}
 8007c98:	469e      	mov	lr, r3
 8007c9a:	4770      	bx	lr

08007c9c <_fini>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	bf00      	nop
 8007ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca2:	bc08      	pop	{r3}
 8007ca4:	469e      	mov	lr, r3
 8007ca6:	4770      	bx	lr
